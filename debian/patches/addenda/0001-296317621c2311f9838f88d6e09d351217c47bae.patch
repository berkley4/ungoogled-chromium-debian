From 296317621c2311f9838f88d6e09d351217c47bae Mon Sep 17 00:00:00 2001
From: Mason Freed <masonf@chromium.org>
Date: Thu, 31 Aug 2023 01:10:16 +0000
Subject: [PATCH] Fix InputType::RangeInvalidText crash

Function InputType::RangeInvalidText should be overridden by other input
type subclasses. There have been crashes due to reaching the default
function. In this CL, we implement it for input types <range> and
<number>, and add more detailed logs for potential future crashes.

This follows the same implementation as:
https://chromium-review.googlesource.com/c/chromium/src/+/4355456

Bug: 1474270
Change-Id: I721ffdffaaee30199ab745ed9a783878a0192e5e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4820850
Reviewed-by: Kent Tamura <tkent@chromium.org>
Commit-Queue: Kent Tamura <tkent@chromium.org>
Reviewed-by: Mason Freed <masonf@chromium.org>
Auto-Submit: Stephanie Zhang <stephanie.zhang@microsoft.com>
Commit-Queue: Stephanie Zhang <stephanie.zhang@microsoft.com>
Cr-Commit-Position: refs/heads/main@{#1190462}
---
 third_party/blink/public/strings/blink_strings.grd       | 3 +++
 .../IDS_FORM_VALIDATION_RANGE_REVERSED.png.sha1          | 1 +
 third_party/blink/renderer/core/html/forms/input_type.cc | 9 ++++++++-
 .../blink/renderer/core/html/forms/number_input_type.cc  | 7 +++++++
 .../blink/renderer/core/html/forms/number_input_type.h   | 2 ++
 .../blink/renderer/core/html/forms/range_input_type.cc   | 7 +++++++
 .../blink/renderer/core/html/forms/range_input_type.h    | 2 ++
 .../forms/number/number-validation-message-expected.txt  | 2 ++
 .../fast/forms/number/number-validation-message.html     | 3 +++
 .../range/input-range-validation-message-expected.txt    | 2 ++
 .../fast/forms/range/input-range-validation-message.html | 3 +++
 11 files changed, 40 insertions(+), 1 deletion(-)
 create mode 100644 third_party/blink/public/strings/blink_strings_grd/IDS_FORM_VALIDATION_RANGE_REVERSED.png.sha1

--- a/third_party/blink/public/strings/blink_strings.grd
+++ b/third_party/blink/public/strings/blink_strings.grd
@@ -655,6 +655,9 @@
       <message name="IDS_FORM_VALIDATION_REVERSED_RANGE_OUT_OF_RANGE_TIME" desc="Heading or short sentence shown when a form control value in a webpage needs to be within the minimum and maximum time range which crosses midnight, but a user specified a value that is greater than the maximum and less than the minimum.">
         Value must be between <ph name="MINIMUM_TIME">$1<ex>11:00 PM</ex></ph> and <ph name="MAXIMUM_TIME">$2<ex>1:00 AM</ex></ph>.
       </message>
+      <message name="IDS_FORM_VALIDATION_RANGE_REVERSED" desc="Heading or short sentence shown when a page author has specified minimum and maximum values for a form control, but the maximum is less than the minimum.">
+        Minimum value (<ph name="MINIMUM">$1<ex>100</ex></ph>) must be less than the maximum value (<ph name="MAXIMUM">$2<ex>0</ex></ph>).
+      </message>
       <message name="IDS_FORM_VALIDATION_RANGE_INVALID_DATETIME" desc="Heading or short sentence shown when a page author has specified minimum and maximum date/time values for a form control, but the maximum comes before the minimum.">
         Minimum date (<ph name="MIN_DATE_OR_TIME">$1<ex>01/04/2013</ex></ph>) must come before Maximum date (<ph name="MAX_DATE_OR_TIME">$2<ex>02/04/2013</ex></ph>).
       </message>
--- /dev/null
+++ b/third_party/blink/public/strings/blink_strings_grd/IDS_FORM_VALIDATION_RANGE_REVERSED.png.sha1
@@ -0,0 +1 @@
+8529bc9e46c865db8dd8d621ddb3ddbc01219b94
\ No newline at end of file
--- a/third_party/blink/renderer/core/html/forms/input_type.cc
+++ b/third_party/blink/renderer/core/html/forms/input_type.cc
@@ -529,7 +529,14 @@
 }
 
 String InputType::RangeInvalidText(const Decimal&, const Decimal&) const {
-  NOTREACHED();
+  static auto* input_type = base::debug::AllocateCrashKeyString(
+      "input-type", base::debug::CrashKeySize::Size32);
+  base::debug::SetCrashKeyString(input_type,
+                                 FormControlType().GetString().Utf8().c_str());
+  NOTREACHED() << "This should not get called. Check if input type '"
+               << FormControlType()
+               << "' should have a RangeInvalidText implementation."
+               << "See crbug.com/1474270";
   return String();
 }
 
--- a/third_party/blink/renderer/core/html/forms/number_input_type.cc
+++ b/third_party/blink/renderer/core/html/forms/number_input_type.cc
@@ -345,6 +345,13 @@
                                  LocalizeValue(Serialize(minimum)));
 }
 
+String NumberInputType::RangeInvalidText(const Decimal& minimum,
+                                         const Decimal& maximum) const {
+  return GetLocale().QueryString(IDS_FORM_VALIDATION_RANGE_REVERSED,
+                                 LocalizeValue(Serialize(minimum)),
+                                 LocalizeValue(Serialize(maximum)));
+}
+
 bool NumberInputType::SupportsPlaceholder() const {
   return true;
 }
--- a/third_party/blink/renderer/core/html/forms/number_input_type.h
+++ b/third_party/blink/renderer/core/html/forms/number_input_type.h
@@ -75,6 +75,8 @@
   String ValueNotEqualText(const Decimal& value) const override;
   String RangeOverflowText(const Decimal& maxmum) const override;
   String RangeUnderflowText(const Decimal& minimum) const override;
+  String RangeInvalidText(const Decimal& minimum,
+                          const Decimal& maximum) const override;
   bool SupportsPlaceholder() const override;
   void MinOrMaxAttributeChanged() override;
   void StepAttributeChanged() override;
--- a/third_party/blink/renderer/core/html/forms/range_input_type.cc
+++ b/third_party/blink/renderer/core/html/forms/range_input_type.cc
@@ -326,6 +326,13 @@
                                  LocalizeValue(Serialize(minimum)));
 }
 
+String RangeInputType::RangeInvalidText(const Decimal& minimum,
+                                        const Decimal& maximum) const {
+  return GetLocale().QueryString(IDS_FORM_VALIDATION_RANGE_REVERSED,
+                                 LocalizeValue(Serialize(minimum)),
+                                 LocalizeValue(Serialize(maximum)));
+}
+
 void RangeInputType::DisabledAttributeChanged() {
   if (!HasCreatedShadowSubtree()) {
     return;
--- a/third_party/blink/renderer/core/html/forms/range_input_type.h
+++ b/third_party/blink/renderer/core/html/forms/range_input_type.h
@@ -71,6 +71,8 @@
   void WarnIfValueIsInvalid(const String&) const override;
   String RangeOverflowText(const Decimal& maxmum) const override;
   String RangeUnderflowText(const Decimal& minimum) const override;
+  String RangeInvalidText(const Decimal& minimum,
+                          const Decimal& maximum) const override;
   void DidSetValue(const String&, bool value_changed) override;
   String SanitizeValue(const String& proposed_value) const override;
   bool ShouldRespectListAttribute() override;
--- a/third_party/blink/web_tests/fast/forms/number/number-validation-message-expected.txt
+++ b/third_party/blink/web_tests/fast/forms/number/number-validation-message-expected.txt
@@ -17,6 +17,8 @@
 PASS testIt("10", "50", "100") is "Value must be greater than or equal to ٥٠."
 Step mismatch
 PASS testIt("55", "0", "100", "10") is "Please enter a valid value. The two nearest valid values are 50 and 60."
+Range invalid
+PASS testIt("10", "100", "50") is "Minimum value (100) must be less than the maximum value (50)."
 PASS successfullyParsed is true
 
 TEST COMPLETE
--- a/third_party/blink/web_tests/fast/forms/number/number-validation-message.html
+++ b/third_party/blink/web_tests/fast/forms/number/number-validation-message.html
@@ -52,6 +52,9 @@
 debug('Step mismatch')
 shouldBeEqualToString('testIt("55", "0", "100", "10")', 'Please enter a valid value. The two nearest valid values are 50 and 60.');
 
+debug('Range invalid');
+shouldBeEqualToString('testIt("10", "100", "50")', 'Minimum value (100) must be less than the maximum value (50).');
+
 </script>
 </body>
 </html>
--- a/third_party/blink/web_tests/fast/forms/range/input-range-validation-message-expected.txt
+++ b/third_party/blink/web_tests/fast/forms/range/input-range-validation-message-expected.txt
@@ -14,6 +14,8 @@
 PASS testIt("10", "50", "100") is ""
 Step mismatch
 PASS testIt("55", "0", "100", "10") is ""
+Range invalid
+PASS testIt("10", "100", "50") is ""
 PASS successfullyParsed is true
 
 TEST COMPLETE
--- a/third_party/blink/web_tests/fast/forms/range/input-range-validation-message.html
+++ b/third_party/blink/web_tests/fast/forms/range/input-range-validation-message.html
@@ -40,6 +40,9 @@
 debug('Step mismatch')
 shouldBeEqualToString('testIt("55", "0", "100", "10")', '');
 
+debug('Range invalid');
+shouldBeEqualToString('testIt("10", "100", "50")', '');
+
 </script>
 </body>
 </html>
