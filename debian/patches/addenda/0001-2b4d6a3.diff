From 2b4d6a39363ff2cd6cde4bdbf393344a6fe2df9d Mon Sep 17 00:00:00 2001
From: Tom Anderson <thomasanderson@chromium.org>
Date: Wed, 20 Mar 2024 00:03:03 +0000
Subject: [PATCH] [Merge to M123] Remove OzonePlatform::IsWindowCompositingSupported default impl

It should be returning true for more platforms.  This CL removes
the default impl to force subclasses to decide whether compositing
is supported.

R=sky
CC=jopalmer

(cherry picked from commit b3af2649fed4f7ed43594839fcc2672c0394af5c)

Bug: 328996657
Change-Id: I0c2c7ce52b350cf011cbe29c823cee774e89c7cf
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5358435
Commit-Queue: Thomas Anderson <thomasanderson@chromium.org>
Reviewed-by: Scott Violet <sky@chromium.org>
Auto-Submit: Thomas Anderson <thomasanderson@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1271209}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5378250
Cr-Commit-Position: refs/branch-heads/6312@{#629}
Cr-Branched-From: 6711dcdae48edaf98cbc6964f90fac85b7d9986e-refs/heads/main@{#1262506}
---

--- a/ui/ozone/platform/cast/ozone_platform_cast.cc
+++ b/ui/ozone/platform/cast/ozone_platform_cast.cc
@@ -124,6 +124,8 @@
            usage == gfx::BufferUsage::SCANOUT;
   }
 
+  bool IsWindowCompositingSupported() const override { return true; }
+
   bool InitializeUI(const InitParams& params) override {
     device_manager_ = CreateDeviceManager();
     cursor_factory_ = std::make_unique<CursorFactory>();
--- a/ui/ozone/platform/drm/ozone_platform_drm.cc
+++ b/ui/ozone/platform/drm/ozone_platform_drm.cc
@@ -187,6 +187,8 @@
                                                                    usage);
   }
 
+  bool IsWindowCompositingSupported() const override { return true; }
+
   bool InitializeUI(const InitParams& args) override {
     // Ozone drm can operate in two modes configured at runtime.
     //   1. single-process mode where host and viz components
--- a/ui/ozone/platform/flatland/ozone_platform_flatland.cc
+++ b/ui/ozone/platform/flatland/ozone_platform_flatland.cc
@@ -216,6 +216,8 @@
                                                                          usage);
   }
 
+  bool IsWindowCompositingSupported() const override { return true; }
+
  private:
   // Binds main process surface factory to main process FlatlandGpuHost
   void BindInMainProcessIfNecessary() {
--- a/ui/ozone/platform/headless/ozone_platform_headless.cc
+++ b/ui/ozone/platform/headless/ozone_platform_headless.cc
@@ -87,6 +87,7 @@
     return std::make_unique<HeadlessWindow>(delegate, window_manager_.get(),
                                             properties.bounds);
   }
+  bool IsWindowCompositingSupported() const override { return false; }
   std::unique_ptr<display::NativeDisplayDelegate> CreateNativeDisplayDelegate()
       override {
     return nullptr;
--- a/ui/ozone/public/ozone_platform.cc
+++ b/ui/ozone/public/ozone_platform.cc
@@ -147,10 +147,6 @@
   return false;
 }
 
-bool OzonePlatform::IsWindowCompositingSupported() const {
-  return false;
-}
-
 bool OzonePlatform::ShouldUseCustomFrame() {
   return GetPlatformProperties().custom_frame_pref_default;
 }
--- a/ui/ozone/public/ozone_platform.h
+++ b/ui/ozone/public/ozone_platform.h
@@ -304,7 +304,7 @@
                                              gfx::BufferUsage usage) const;
 
   // Whether the platform supports compositing windows with transparency.
-  virtual bool IsWindowCompositingSupported() const;
+  virtual bool IsWindowCompositingSupported() const = 0;
 
   // Returns whether a custom frame should be used for windows.
   // The default behaviour is returning what is suggested by the
