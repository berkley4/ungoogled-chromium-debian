From b3be9f5bec4436558600f3f208b2ac64bccad2a0 Mon Sep 17 00:00:00 2001
From: Joey Arhar <jarhar@chromium.org>
Date: Thu, 25 Jul 2024 02:10:39 +0000
Subject: [PATCH] Improve popup document parsing performance

While debugging the performance of loading the popup document for
<select> with 10000+ <option>s, I found that
LocalFrame::ForceSynchronousDocumentInstall was taking the longest time,
especially the calls to parser->AppendBytes(). I also found that every
<option> resulted in adding many separate tiny strings in the
SegmentedBuffer. By combining some of these strings into a separate
Vector before passing it to parser->AppendBytes(), the performance was
dramatically improved.

Without this patch, <select>s with 20000+ <option>s would never load the
popup document and make the page unresponsive. With this patch, a
<select> with 40000 <option>s loads the popup in less than 4 seconds on
my machine.

(cherry picked from commit c8aad07821f22d7b93b8d2162880de3aa0367714)

Fixed: 342866365
Change-Id: I2060d2b18fb6e33f0a57319cfc3fb7be3c32744f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5692106
Commit-Queue: Joey Arhar <jarhar@chromium.org>
Reviewed-by: Mason Freed <masonf@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1327874}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5739953
Reviewed-by: Daniel Yip <danielyip@google.com>
Cr-Commit-Position: refs/branch-heads/6533@{#1806}
Cr-Branched-From: 7e0b87ec6b8cb5cb2969e1479fc25776e582721d-refs/heads/main@{#1313161}
---

diff --git a/third_party/blink/renderer/core/frame/local_frame.cc b/third_party/blink/renderer/core/frame/local_frame.cc
index 142d3bf..2b20759 100644
--- a/third_party/blink/renderer/core/frame/local_frame.cc
+++ b/third_party/blink/renderer/core/frame/local_frame.cc
@@ -255,6 +255,10 @@
 
 namespace {
 
+// Max size in bytes of the Vector used in ForceSynchronousDocumentInstall to
+// buffer data before sending it to the HTML parser.
+constexpr unsigned kMaxDocumentChunkSize = 1000000;
+
 // Maintain a global (statically-allocated) hash map indexed by the the result
 // of hashing the |frame_token| passed on creation of a LocalFrame object.
 using LocalFramesByTokenMap = HeapHashMap<uint64_t, WeakMember<LocalFrame>>;
@@ -2510,9 +2514,30 @@
   DCHECK_EQ(document, GetDocument());
   DocumentParser* parser = document->OpenForNavigation(
       kForceSynchronousParsing, mime_type, AtomicString("UTF-8"));
-  for (const auto& segment : data) {
-    parser->AppendBytes(segment.data(), segment.size());
+
+  if (RuntimeEnabledFeatures::DocumentInstallChunkingEnabled()) {
+    // Some code creates a very large number of tiny chunks that show up in
+    // |data|, such as InternalPopupMenu. Calling parser->AppendBytes() with
+    // each tiny piece dramatically slows down document loading. By combining
+    // these chunks in a Vector before passing it to parser->AppendBytes() gets
+    // around this problem.
+    Vector<char> current_chunk;
+    for (const auto& segment : data) {
+      current_chunk.Append(segment.data(),
+                           static_cast<wtf_size_t>(segment.size()));
+      if (current_chunk.size() > kMaxDocumentChunkSize) {
+        parser->AppendBytes(current_chunk.data(), current_chunk.size());
+        current_chunk.clear();
+      }
+    }
+    parser->AppendBytes(current_chunk.data(), current_chunk.size());
+    current_chunk.clear();
+  } else {
+    for (const auto& segment : data) {
+      parser->AppendBytes(segment.data(), segment.size());
+    }
   }
+
   parser->Finish();
 
   // Upon loading of SVGImages, log PageVisits in UseCounter if we did not
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
index bc7bf76..8321d6cf 100644
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -1337,6 +1337,12 @@
       name: "DocumentDomain",
     },
     {
+      // This is a performance fix for <select> popups which was enabled by
+      // default in M128.
+      name: "DocumentInstallChunking",
+      status: "stable",
+    },
+    {
       name: "DocumentOpenOriginAliasRemoval",
       status: "experimental",
       copied_from_base_feature_if: "overridden",
diff --git a/third_party/blink/web_tests/fast/forms/select-popup/select-many-options-hang.html b/third_party/blink/web_tests/fast/forms/select-popup/select-many-options-hang.html
new file mode 100644
index 0000000..89aec22
--- /dev/null
+++ b/third_party/blink/web_tests/fast/forms/select-popup/select-many-options-hang.html
@@ -0,0 +1,26 @@
+<!DOCTYPE html>
+<script src="../../../resources/testharness.js"></script>
+<script src="../../../resources/testharnessreport.js"></script>
+<script src="../../../resources/testdriver.js"></script>
+<script src="../../../resources/testdriver-vendor.js"></script>
+<script src="../resources/picker-common.js"></script>
+<body>
+<script>
+const select = document.createElement('select');
+for (let i = 0; i < 10000; i++) {
+  const option = document.createElement('option');
+  option.textContent = i;
+  select.appendChild(option);
+}
+document.body.appendChild(select);
+
+// This test passes if it doesn't hang or time out.
+
+promise_test(async () => {
+  assert_equals(select.value, '0', 'Initial select.value.');
+  await openPicker(select);
+  eventSender.keyDown('ArrowDown');
+  eventSender.keyDown('Enter');
+  assert_equals(select.value, '1', 'select.value after ArrowDown.');
+}, 'Selects with 10000+ options should be usable.');
+</script>
