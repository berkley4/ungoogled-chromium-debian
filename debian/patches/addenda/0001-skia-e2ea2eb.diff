From e2ea2eb3e0d37fff47968dfaaa337debb3b75b1e Mon Sep 17 00:00:00 2001
From: Chia-I Wu <olv@google.com>
Date: Thu, 04 Apr 2024 16:12:00 -0700
Subject: [PATCH] Add VkComponentMapping to VulkanYcbcrConversionInfo

VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM is YCbCr and
AHARDWAREBUFFER_FORMAT_YV12 is YCrCb.  We need to swap R and B when
AHARDWAREBUFFER_FORMAT_YV12 is not specified as an external format but
as VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM, which can happen when Android
runs inside a VM and skia is used in the host.

Bug: b/329151784
Change-Id: Ia33e79470cf38a3cf6c8decfc774f49ef6402673
Reviewed-on: https://skia-review.googlesource.com/c/skia/+/836758
Reviewed-by: Greg Daniel <egdaniel@google.com>
Commit-Queue: Chia-I Wu <olv@google.com>
(cherry picked from commit e30486e1fbcaf48406bea6c9f88a564c1898f328)
Reviewed-on: https://skia-review.googlesource.com/c/skia/+/838776
Reviewed-by: Nicolette Prevost <nicolettep@google.com>
---

--- a/third_party/skia/include/gpu/GrBackendSurface.h
+++ b/third_party/skia/include/gpu/GrBackendSurface.h
@@ -123,7 +123,7 @@
 private:
     // Size determined by looking at the GrBackendFormatData subclasses, then guessing-and-checking.
     // Compiler will complain if this is too small - in that case, just increase the number.
-    inline constexpr static size_t kMaxSubclassSize = 64;
+    inline constexpr static size_t kMaxSubclassSize = 80;
     using AnyFormatData = SkAnySubclass<GrBackendFormatData, kMaxSubclassSize>;
 
     friend class GrBackendSurfacePriv;
@@ -262,7 +262,7 @@
 private:
     // Size determined by looking at the GrBackendTextureData subclasses, then guessing-and-checking.
     // Compiler will complain if this is too small - in that case, just increase the number.
-    inline constexpr static size_t kMaxSubclassSize = 160;
+    inline constexpr static size_t kMaxSubclassSize = 176;
     using AnyTextureData = SkAnySubclass<GrBackendTextureData, kMaxSubclassSize>;
 
     friend class GrBackendSurfacePriv;
@@ -405,7 +405,7 @@
     // Size determined by looking at the GrBackendRenderTargetData subclasses, then
     // guessing-and-checking. Compiler will complain if this is too small - in that case, just
     // increase the number.
-    inline constexpr static size_t kMaxSubclassSize = 160;
+    inline constexpr static size_t kMaxSubclassSize = 176;
     using AnyRenderTargetData = SkAnySubclass<GrBackendRenderTargetData, kMaxSubclassSize>;
 
     friend class GrBackendSurfacePriv;
--- a/third_party/skia/include/gpu/vk/VulkanTypes.h
+++ b/third_party/skia/include/gpu/vk/VulkanTypes.h
@@ -72,7 +72,11 @@
                this->fXChromaOffset == that.fXChromaOffset &&
                this->fYChromaOffset == that.fYChromaOffset &&
                this->fChromaFilter == that.fChromaFilter &&
-               this->fForceExplicitReconstruction == that.fForceExplicitReconstruction;
+               this->fForceExplicitReconstruction == that.fForceExplicitReconstruction &&
+               this->fComponents.r == that.fComponents.r &&
+               this->fComponents.g == that.fComponents.g &&
+               this->fComponents.b == that.fComponents.b &&
+               this->fComponents.a == that.fComponents.a;
     }
     bool operator!=(const VulkanYcbcrConversionInfo& that) const { return !(*this == that); }
 
@@ -99,6 +103,12 @@
     // For external images format features here should be those returned by a call to
     // vkAndroidHardwareBufferFormatPropertiesANDROID
     VkFormatFeatureFlags fFormatFeatures = 0;
+
+    // This is ignored when fExternalFormat is non-zero.
+    VkComponentMapping fComponents            = {VK_COMPONENT_SWIZZLE_IDENTITY,
+                                                 VK_COMPONENT_SWIZZLE_IDENTITY,
+                                                 VK_COMPONENT_SWIZZLE_IDENTITY,
+                                                 VK_COMPONENT_SWIZZLE_IDENTITY};
 };
 
 typedef void* VulkanDeviceLostContext;
--- a/third_party/skia/src/gpu/ganesh/vk/GrVkSamplerYcbcrConversion.cpp
+++ b/third_party/skia/src/gpu/ganesh/vk/GrVkSamplerYcbcrConversion.cpp
@@ -70,14 +70,26 @@
     SkASSERT(static_cast<int>(ycbcrInfo.fChromaFilter) <= 1);
     static const int kReconShift = kChromaFilterShift + 1;
     SkASSERT(static_cast<int>(ycbcrInfo.fForceExplicitReconstruction) <= 1);
-    static_assert(kReconShift <= 7);
+    static const int kCompRShift = kReconShift + 1;
+    static const int kCompGShift = kCompRShift + 3;
+    static const int kCompBShift = kCompGShift + 3;
+    static const int kCompAShift = kCompBShift + 3;
+    SkASSERT(static_cast<int>(ycbcrInfo.fComponents.r <= 6) &&
+             static_cast<int>(ycbcrInfo.fComponents.g <= 6) &&
+             static_cast<int>(ycbcrInfo.fComponents.b <= 6) &&
+             static_cast<int>(ycbcrInfo.fComponents.a <= 6));
+    static_assert(kCompAShift <= 17);
 
-    uint8_t ycbcrKey = static_cast<uint8_t>(ycbcrInfo.fYcbcrModel);
-    ycbcrKey |= (static_cast<uint8_t>(ycbcrInfo.fYcbcrRange) << kRangeShift);
-    ycbcrKey |= (static_cast<uint8_t>(ycbcrInfo.fXChromaOffset) << kXChromaOffsetShift);
-    ycbcrKey |= (static_cast<uint8_t>(ycbcrInfo.fYChromaOffset) << kYChromaOffsetShift);
-    ycbcrKey |= (static_cast<uint8_t>(ycbcrInfo.fChromaFilter) << kChromaFilterShift);
-    ycbcrKey |= (static_cast<uint8_t>(ycbcrInfo.fForceExplicitReconstruction) << kReconShift);
+    uint32_t ycbcrKey = static_cast<uint32_t>(ycbcrInfo.fYcbcrModel);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fYcbcrRange) << kRangeShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fXChromaOffset) << kXChromaOffsetShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fYChromaOffset) << kYChromaOffsetShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fChromaFilter) << kChromaFilterShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fForceExplicitReconstruction) << kReconShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fComponents.r) << kCompRShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fComponents.g) << kCompGShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fComponents.b) << kCompBShift);
+    ycbcrKey |= (static_cast<uint32_t>(ycbcrInfo.fComponents.a) << kCompAShift);
 
     return Key{ycbcrInfo.fFormat, ycbcrInfo.fExternalFormat, ycbcrKey};
 }
--- a/third_party/skia/src/gpu/ganesh/vk/GrVkSamplerYcbcrConversion.h
+++ b/third_party/skia/src/gpu/ganesh/vk/GrVkSamplerYcbcrConversion.h
@@ -26,15 +26,14 @@
     SK_BEGIN_REQUIRE_DENSE
     struct Key {
         Key() = default;
-        Key(VkFormat vkFormat, uint64_t externalFormat, uint8_t conversionKey) {
+        Key(VkFormat vkFormat, uint64_t externalFormat, uint32_t conversionKey) {
             fVkFormat = vkFormat;
             fExternalFormat = externalFormat;
             fConversionKey = conversionKey;
         }
 
         VkFormat fVkFormat = VK_FORMAT_UNDEFINED;
-        uint8_t  fConversionKey = 0;
-        uint8_t  fPadding[3] = {0, 0, 0};
+        uint32_t fConversionKey = 0;
         uint64_t fExternalFormat = 0;
 
         bool operator==(const Key& that) const {
--- a/third_party/skia/src/gpu/graphite/vk/VulkanSamplerYcbcrConversion.cpp
+++ b/third_party/skia/src/gpu/graphite/vk/VulkanSamplerYcbcrConversion.cpp
@@ -73,6 +73,10 @@
     SkASSERT(info.fYChromaOffset               < (1u << 1));
     SkASSERT(info.fChromaFilter                < (1u << 1));
     SkASSERT(info.fForceExplicitReconstruction < (1u << 7));
+    SkASSERT(info.fComponents.r                < (1u << 3));
+    SkASSERT(info.fComponents.g                < (1u << 3));
+    SkASSERT(info.fComponents.b                < (1u << 3));
+    SkASSERT(info.fComponents.a                < (1u << 3));
 
     builder[0] = info.fFormat;
     builder[1] = (uint32_t)(info.fExternalFormat << 32);
@@ -82,7 +86,11 @@
                  (static_cast<uint32_t>(info.fXChromaOffset              ) <<  9) |
                  (static_cast<uint32_t>(info.fYChromaOffset              ) << 10) |
                  (static_cast<uint32_t>(info.fChromaFilter               ) << 11) |
-                 (static_cast<uint32_t>(info.fForceExplicitReconstruction) << 12) ;
+                 (static_cast<uint32_t>(info.fForceExplicitReconstruction) << 12) |
+                 (static_cast<uint32_t>(info.fComponents.r               ) << 20) |
+                 (static_cast<uint32_t>(info.fComponents.g               ) << 23) |
+                 (static_cast<uint32_t>(info.fComponents.b               ) << 26) |
+                 (static_cast<uint32_t>(info.fComponents.a               ) << 29) ;
 
     builder.finish();
     return key;
--- a/third_party/skia/src/gpu/vk/VulkanUtilsPriv.cpp
+++ b/third_party/skia/src/gpu/vk/VulkanUtilsPriv.cpp
@@ -46,11 +46,7 @@
     outInfo->format = conversionInfo.fFormat;
     outInfo->ycbcrModel = conversionInfo.fYcbcrModel;
     outInfo->ycbcrRange = conversionInfo.fYcbcrRange;
-
-    // Components is ignored for external format conversions. For all other formats identity swizzle
-    // is used. It can be added to VulkanYcbcrConversionInfo if necessary.
-    outInfo->components = {VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY,
-                           VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY};
+    outInfo->components = conversionInfo.fComponents;
     outInfo->xChromaOffset = conversionInfo.fXChromaOffset;
     outInfo->yChromaOffset = conversionInfo.fYChromaOffset;
     outInfo->chromaFilter = conversionInfo.fChromaFilter;
@@ -67,6 +63,7 @@
         const VkAndroidHardwareBufferFormatPropertiesANDROID& formatProps) {
     outConversionInfo->fYcbcrModel = formatProps.suggestedYcbcrModel;
     outConversionInfo->fYcbcrRange = formatProps.suggestedYcbcrRange;
+    outConversionInfo->fComponents = formatProps.samplerYcbcrConversionComponents;
     outConversionInfo->fXChromaOffset = formatProps.suggestedXChromaOffset;
     outConversionInfo->fYChromaOffset = formatProps.suggestedYChromaOffset;
     outConversionInfo->fForceExplicitReconstruction = VK_FALSE;
--- a/third_party/skia/tools/gpu/vk/VkYcbcrSamplerHelper.cpp
+++ b/third_party/skia/tools/gpu/vk/VkYcbcrSamplerHelper.cpp
@@ -206,7 +206,8 @@
                                          VK_CHROMA_LOCATION_COSITED_EVEN,
                                          VK_FILTER_LINEAR,
                                          false,
-                                         formatProperties.linearTilingFeatures};
+                                         formatProperties.linearTilingFeatures,
+                                         /*fComponents=*/{}};
     skgpu::VulkanAlloc alloc;
     alloc.fMemory = fImageMemory;
     alloc.fOffset = 0;
