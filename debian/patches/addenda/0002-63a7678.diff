From 63a7678f112cb9280c9058a4d54191d7a2d5519f Mon Sep 17 00:00:00 2001
From: Joe Mason <joenotcharles@google.com>
Date: Mon, 30 Oct 2023 23:44:19 +0000
Subject: [PATCH] Only enable ResourceAttribution during experiment

ResourceAttribution is currently only used in production when the
ResourceAttributionCPUMonitor experiment is enabled, so its support
classes shouldn't be added to the PerformanceManager graph by default.

In M119 this works around a crash in ResourceContextRegistryStorage, by
making sure it's only instantiated when the experiment is running.
ResourceContextRegistryStorage was deleted in M120 so this is only an
optimization after that.

(cherry picked from commit 713d364fd73277046f3d31f717861aaa94a8ddd0)

Bug: 1495609
Change-Id: I284f2c6b365ad7f3cf1195843775c90b18e9ccff
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4980050
Reviewed-by: Alison Gale <agale@chromium.org>
Auto-Submit: Joe Mason <joenotcharles@google.com>
Commit-Queue: Joe Mason <joenotcharles@google.com>
Commit-Queue: Alison Gale <agale@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1215762}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4987943
Reviewed-by: Giovanni Ortuno Urquidi <ortuno@chromium.org>
Commit-Queue: Giovanni Ortuno Urquidi <ortuno@chromium.org>
Cr-Commit-Position: refs/branch-heads/6045@{#1126}
Cr-Branched-From: 905e8bdd32d891451d94d1ec71682e989da2b0a1-refs/heads/main@{#1204232}
---

--- a/chrome/browser/performance_manager/chrome_browser_main_extra_parts_performance_manager.cc
+++ b/chrome/browser/performance_manager/chrome_browser_main_extra_parts_performance_manager.cc
@@ -221,9 +221,13 @@
 }
 
 void ChromeBrowserMainExtraPartsPerformanceManager::PostCreateThreads() {
+  auto graph_features = performance_manager::GraphFeatures::WithDefault();
+  if (performance_manager::features::kUseResourceAttributionCPUMonitor.Get()) {
+    graph_features.EnableResourceAttributionRegistries();
+  }
   performance_manager_lifetime_ =
       std::make_unique<performance_manager::PerformanceManagerLifetime>(
-          performance_manager::GraphFeatures::WithDefault(),
+          graph_features,
           base::BindOnce(&ChromeBrowserMainExtraPartsPerformanceManager::
                              CreatePoliciesAndDecorators));
   browser_child_process_watcher_ =
--- a/components/performance_manager/embedder/graph_features.h
+++ b/components/performance_manager/embedder/graph_features.h
@@ -155,7 +155,6 @@
     EnableNodeImplDescribers();
     EnablePageLoadTrackerDecorator();
     EnableProcessHostedContentTypesAggregator();
-    EnableResourceAttributionRegistries();
     EnableSiteDataRecorder();
     EnableTabPropertiesDecorator();
     EnableV8ContextTracker();
--- a/components/performance_manager/graph_features_unittest.cc
+++ b/components/performance_manager/graph_features_unittest.cc
@@ -60,7 +60,7 @@
       execution_context::ExecutionContextRegistry::GetFromGraph(&graph));
   EXPECT_FALSE(v8_memory::V8ContextTracker::GetFromGraph(&graph));
 
-  size_t graph_owned_count = 15;
+  size_t graph_owned_count = 14;
 #if !BUILDFLAG(IS_ANDROID)
   // The SiteDataRecorder is not available on Android.
   graph_owned_count++;
@@ -70,7 +70,7 @@
   features.EnableDefault();
   features.ConfigureGraph(&graph);
   EXPECT_EQ(graph_owned_count, graph.GraphOwnedCountForTesting());
-  EXPECT_EQ(9u, graph.GraphRegisteredCountForTesting());
+  EXPECT_EQ(5u, graph.GraphRegisteredCountForTesting());
   EXPECT_EQ(7u, graph.NodeDataDescriberCountForTesting());
   // Ensure the GraphRegistered objects can be queried directly.
   EXPECT_TRUE(
