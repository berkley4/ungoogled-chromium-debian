From 765cbf7309ca8e2ff4434f6ec1e651246fbd178b Mon Sep 17 00:00:00 2001
From: Justin Lulejian <jlulejian@chromium.org>
Date: Tue, 21 May 2024 01:48:29 +0000
Subject: [PATCH] [Extensions] Fix SWTQ::IsReadyToRunTasks() crash for unloaded extension.

NOTE: merge conflict for M125 needed to adjust
event_metrics_browsertest.cc to be just the metric name change.
Effectively a no-op though.

Before this change the method relied on an `extension` being non-null
with a CHECK, but this is not guaranteed. It is expected, but maybe not
completely intentional, that we dispatch tasks to unloaded extensions.

After this change we don't CHECK, but instead consider this `false`
since a worker should not be ready to run tasks because the renderer
will be shutting down when this happens.

Also update the method comment to more accurately reflect what this
method is intended for metrics only.

OBSOLETE_HISTOGRAMS=Histogram based on SWTQ::IsReadyToRunTasks() incremented since they were not counting when extensions were unloaded.

(cherry picked from commit f948a104d968f26c33b2c36afaed6a408a9b0ee7)

Low-Coverage-Reason: TESTS_IN_SEPARATE_CL we'll test this once we confirm it fixes the crashes.
Bug: 339908207, 340500576
Change-Id: I14c5dd8354b2cb54acabc1b5c8f7c2e5d1f7b715
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5539170
Commit-Queue: David Bertoni <dbertoni@chromium.org>
Reviewed-by: David Bertoni <dbertoni@chromium.org>
Auto-Submit: Justin Lulejian <jlulejian@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1301677}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5551471
Cr-Commit-Position: refs/branch-heads/6422@{#1098}
Cr-Branched-From: 9012208d0ce02e0cf0adb9b62558627c356f3278-refs/heads/main@{#1287751}
---

diff --git a/chrome/browser/extensions/event_metrics_browsertest.cc b/chrome/browser/extensions/event_metrics_browsertest.cc
index 09461c01..fc6d3b05 100644
--- a/chrome/browser/extensions/event_metrics_browsertest.cc
+++ b/chrome/browser/extensions/event_metrics_browsertest.cc
@@ -453,15 +453,15 @@
 
   // Call to webNavigation.onCompleted expected.
   histogram_tester.ExpectTotalCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active3",
       /*expected_count=*/1);
   // Verify that the recorded values are sane -- that is, that they are less
   // than the maximum bucket.
   histogram_tester.ExpectBucketCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active3",
       /*sample=*/base::Minutes(5).InMicroseconds(), /*expected_count=*/0);
   histogram_tester.ExpectTotalCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive3",
       /*expected_count=*/0);
 }
 
@@ -505,15 +505,15 @@
 
   // Call to webNavigation.onCompleted expected.
   histogram_tester.ExpectTotalCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive3",
       /*expected_count=*/1);
   histogram_tester.ExpectTotalCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Active3",
       /*expected_count=*/0);
   // Verify that the recorded values are sane -- that is, that they are less
   // than the maximum bucket.
   histogram_tester.ExpectBucketCount(
-      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive2",
+      "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2.Inactive3",
       /*sample=*/base::Minutes(5).InMicroseconds(),
       /*expected_count=*/0);
 }
@@ -594,13 +594,13 @@
     // worker.
     histogram_tester.ExpectTotalCount(
         "Extensions.ServiceWorkerBackground."
-        "RequestedWorkerStartForStartedWorker2",
+        "RequestedWorkerStartForStartedWorker3",
         /*expected_count=*/1);
     // Verify that the value is `true` since the without the feature the worker
     // will be redundantly started.
     histogram_tester.ExpectBucketCount(
         "Extensions.ServiceWorkerBackground."
-        "RequestedWorkerStartForStartedWorker2",
+        "RequestedWorkerStartForStartedWorker3",
         /*sample=*/true, /*expected_count=*/1);
   }
 }
diff --git a/extensions/browser/events/event_ack_data.cc b/extensions/browser/events/event_ack_data.cc
index 06e83a5..77a188a 100644
--- a/extensions/browser/events/event_ack_data.cc
+++ b/extensions/browser/events/event_ack_data.cc
@@ -90,9 +90,9 @@
     const char* active_metric_name =
         event_info.lazy_background_active_on_dispatch
             ? "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2."
-              "Active2"
+              "Active3"
             : "Extensions.Events.DispatchToAckTime.ExtensionServiceWorker2."
-              "Inactive2";
+              "Inactive3";
     base::UmaHistogramCustomMicrosecondsTimes(
         active_metric_name,
         /*sample=*/base::TimeTicks::Now() - event_info.dispatch_start_time,
diff --git a/extensions/browser/service_worker/service_worker_task_queue.cc b/extensions/browser/service_worker/service_worker_task_queue.cc
index 14c3c0f..4b0be679a 100644
--- a/extensions/browser/service_worker/service_worker_task_queue.cc
+++ b/extensions/browser/service_worker/service_worker_task_queue.cc
@@ -388,7 +388,13 @@
 bool ServiceWorkerTaskQueue::IsReadyToRunTasks(
     content::BrowserContext* context,
     const Extension* extension) const {
-  CHECK(extension);
+  if (!extension) {
+    // TODO(crbug.com/339908207): Create tests for this once crash is confirmed
+    // fixed.
+    // An extension may have been unloaded when this runs.
+    return false;
+  }
+
   auto activation_token = GetCurrentActivationToken(extension->id());
 
   if (!activation_token) {
@@ -434,7 +440,7 @@
     PendingTask task) {
   DCHECK(lazy_context_id.IsForServiceWorker());
   base::UmaHistogramBoolean(
-      "Extensions.ServiceWorkerBackground.AddPendingTaskForRunningWorker2",
+      "Extensions.ServiceWorkerBackground.AddPendingTaskForRunningWorker3",
       IsReadyToRunTasks(
           browser_context_,
           extensions::ExtensionRegistry::Get(browser_context_)
@@ -955,7 +961,7 @@
                             ->GetInstalledExtension(extension_id));
   base::UmaHistogramBoolean(
       "Extensions.ServiceWorkerBackground."
-      "RequestedWorkerStartForStartedWorker2",
+      "RequestedWorkerStartForStartedWorker3",
       worker_is_ready_to_run_tasks);
 }
 
diff --git a/extensions/browser/service_worker/service_worker_task_queue.h b/extensions/browser/service_worker/service_worker_task_queue.h
index 2018348..0b5c7a0 100644
--- a/extensions/browser/service_worker/service_worker_task_queue.h
+++ b/extensions/browser/service_worker/service_worker_task_queue.h
@@ -95,9 +95,8 @@
   bool ShouldEnqueueTask(content::BrowserContext* context,
                          const Extension* extension) const override;
 
-  // Returns true if the service worker is blink::EmbeddedWorkerStatus::Running.
-  // This could, once service worker start logic is refactored in
-  // crbug.com/1467015, be refactored into `ShouldEnqueueTask()`.
+  // Returns true if the service worker seems ready to run pending tasks. It
+  // only informs metrics data, not task dispatching logic.
   bool IsReadyToRunTasks(content::BrowserContext* context,
                          const Extension* extension) const override;
 
diff --git a/tools/metrics/histograms/metadata/extensions/histograms.xml b/tools/metrics/histograms/metadata/extensions/histograms.xml
index 4322257..c8b7d99 100644
--- a/tools/metrics/histograms/metadata/extensions/histograms.xml
+++ b/tools/metrics/histograms/metadata/extensions/histograms.xml
@@ -1579,17 +1579,20 @@
     include any requests that utilize the EventRouter::DispatchEventToSender()
     event routing flow (some web request API, and web view API events).
 
-    Note: this histogram was incremented March, 2024 since it was emitting for
-    an incorrect definition of &quot;started&quot;.&quot;
+    If the extension was unloaded when the event was dispatched, the worker is
+    considered inactive.
+
+    Note: this histogram was incremented May, 2024 since it additionally started
+    emmitting when the extension is unloaded.
   </summary>
   <token key="ContextActive">
     <variant name="" summary=""/>
-    <variant name=".Active2"
+    <variant name=".Active3"
         summary="and in status active. Active means that the background
                  script was started and ready to receive and run events (both
                  //content browser notification and extension renderer JS
                  global evaluation completed) when the event was dispatched"/>
-    <variant name=".Inactive2"
+    <variant name=".Inactive3"
         summary="and in status inactive. Inactive means that the background
                  script was not started and not ready to receive and run
                  events (either the //content browser notification or
@@ -4244,7 +4247,7 @@
 </histogram>
 
 <histogram
-    name="Extensions.ServiceWorkerBackground.AddPendingTaskForRunningWorker2"
+    name="Extensions.ServiceWorkerBackground.AddPendingTaskForRunningWorker3"
     enum="Boolean" expires_after="2024-09-15">
 <!-- expires-never: Monitors core extension system health. -->
 
@@ -4254,10 +4257,11 @@
     It is emitted every time we add a pending task for a worker. Records true if
     the worker was ready to run tasks when pendings tasks are added (this is not
     optimal). Records false if the worker was not ready to run tasks when the
-    pending task was added (this is the optimal expected state).
+    pending task was added (this is the optimal expected state). `false` is
+    recorded if the task is added when the extension is unloaded.
 
-    Note: this histogram was incremented March, 2024 since it was emitting for
-    an incorrect definition of &quot;started&quot;.
+    Note: this histogram was incremented May, 2024 since it additionally started
+    emmitting when the extension is unloaded.
   </summary>
 </histogram>
 
@@ -4439,7 +4443,7 @@
 </histogram>
 
 <histogram
-    name="Extensions.ServiceWorkerBackground.RequestedWorkerStartForStartedWorker2"
+    name="Extensions.ServiceWorkerBackground.RequestedWorkerStartForStartedWorker3"
     enum="Boolean" expires_after="never">
 <!-- expires-never: Monitors core extension system health. -->
 
@@ -4452,10 +4456,11 @@
     that we will redundantly reqeust to start a worker when it was already
     running and could've processed the event without the request to start. A
     `false` value means that we correctly started the worker because it was not
-    ready to run events.
+    ready to run events. `false` is recorded if the worker start is requested
+    when the extension is unloaded.
 
-    Note: this histogram was incremented March, 2024 since it was emitting for
-    an incorrect definition of &quot;started&quot;.
+    Note: this histogram was incremented May, 2024 since it additionally started
+    emmitting when the extension is unloaded.
   </summary>
 </histogram>
 
