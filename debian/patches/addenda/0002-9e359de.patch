From 9e359deb70ed780e02a0f314a696bf9ad6a112ad Mon Sep 17 00:00:00 2001
From: Joel Hockey <joelhockey@chromium.org>
Date: Wed, 09 Aug 2023 00:08:39 +0000
Subject: [PATCH] [M116 merge] Block filesystem: navigation to external mounted files

(cherry picked from commit ca18f13ae0bff0d89db6c25ba49c400131b6b923)

Bug: b/291526810
Change-Id: I89eaaf8183b887ac266730c2168d10333f9f0e5b
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4705137
Reviewed-by: Alex Moshchuk <alexmos@chromium.org>
Commit-Queue: Joel Hockey <joelhockey@chromium.org>
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1175231}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4729508
Reviewed-by: Jorge Lucangeli Obes <jorgelo@chromium.org>
Owners-Override: Daniel Cheng <dcheng@chromium.org>
Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Cr-Commit-Position: refs/branch-heads/5845@{#1301}
Cr-Branched-From: 5a5dff63a4a4c63b9b18589819bebb2566c85443-refs/heads/main@{#1160321}
---

--- a/content/browser/renderer_host/blocked_scheme_navigation_browsertest.cc
+++ b/content/browser/renderer_host/blocked_scheme_navigation_browsertest.cc
@@ -35,6 +35,10 @@
 #include "net/dns/mock_host_resolver.h"
 #include "net/test/embedded_test_server/embedded_test_server.h"
 #include "pdf/buildflags.h"
+#include "storage/browser/file_system/external_mount_points.h"
+#include "storage/common/file_system/file_system_mount_option.h"
+#include "storage/common/file_system/file_system_types.h"
+#include "third_party/blink/public/common/features.h"
 
 #if BUILDFLAG(ENABLE_PLUGINS)
 #include "content/public/browser/plugin_service.h"
@@ -1418,4 +1422,58 @@
   }
 }
 
+class FilesystemUrlNavigationBrowserTest
+    : public ContentBrowserTest,
+      public testing::WithParamInterface<bool> {
+ public:
+  FilesystemUrlNavigationBrowserTest() {
+    if (GetParam()) {
+      scoped_feature_list_.InitWithFeatureState(
+          blink::features::kFileSystemUrlNavigation, GetParam());
+    }
+  }
+
+  FilesystemUrlNavigationBrowserTest(
+      const FilesystemUrlNavigationBrowserTest&) = delete;
+  FilesystemUrlNavigationBrowserTest& operator=(
+      const FilesystemUrlNavigationBrowserTest&) = delete;
+
+  ~FilesystemUrlNavigationBrowserTest() override = default;
+
+ private:
+  base::test::ScopedFeatureList scoped_feature_list_;
+};
+
+// Tests that navigation to external mounted filesystem: URLs are blocked
+// unless FileSystemUrlNavigation feature flag is enabled (b/291526810).
+IN_PROC_BROWSER_TEST_P(FilesystemUrlNavigationBrowserTest, External) {
+  base::ScopedAllowBlockingForTesting allow_blocking;
+  base::ScopedTempDir mount_point;
+  ASSERT_TRUE(mount_point.CreateUniqueTempDir());
+  ASSERT_TRUE(
+      base::WriteFile(mount_point.GetPath().AppendASCII("file.html"),
+                      "<html><script>console.log('success')</script></html>"));
+  storage::ExternalMountPoints::GetSystemInstance()->RegisterFileSystem(
+      "mount-name", storage::kFileSystemTypeLocal,
+      storage::FileSystemMountOption(), mount_point.GetPath());
+
+  WebContentsConsoleObserver console_observer(shell()->web_contents());
+  console_observer.SetPattern(
+      GetParam() ? "success" : "Not allowed to navigate to filesystem URL:*");
+  EXPECT_EQ(GetParam(),
+            NavigateToURL(shell(), GURL("filesystem:http://remote/"
+                                        "external/mount-name/file.html")));
+  ASSERT_TRUE(console_observer.Wait());
+
+  storage::ExternalMountPoints::GetSystemInstance()->RevokeFileSystem(
+      "mount-name");
+}
+
+INSTANTIATE_TEST_SUITE_P(All,
+                         FilesystemUrlNavigationBrowserTest,
+                         testing::Bool(),
+                         [](const testing::TestParamInfo<bool> info) {
+                           return info.param ? "FlagOn" : "FlagOff";
+                         });
+
 }  // namespace content
--- a/content/browser/renderer_host/blocked_scheme_navigation_throttle.cc
+++ b/content/browser/renderer_host/blocked_scheme_navigation_throttle.cc
@@ -14,6 +14,9 @@
 #include "content/public/browser/navigation_handle.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/common/content_features.h"
+#include "storage/browser/file_system/external_mount_points.h"
+#include "storage/browser/file_system/file_system_url.h"
+#include "storage/common/file_system/file_system_util.h"
 #include "third_party/blink/public/mojom/devtools/console_message.mojom.h"
 #include "url/url_constants.h"
 
@@ -22,6 +25,13 @@
 namespace {
 const char kConsoleError[] = "Not allowed to navigate top frame to %s URL: %s";
 const char kAnyFrameConsoleError[] = "Not allowed to navigate to %s URL: %s";
+
+bool IsExternalMountedFile(const GURL& url) {
+  storage::FileSystemURL file_system_url =
+      storage::ExternalMountPoints::GetSystemInstance()->CrackURL(
+          url, blink::StorageKey::CreateFirstParty(url::Origin::Create(url)));
+  return file_system_url.is_valid();
+}
 }
 
 BlockedSchemeNavigationThrottle::BlockedSchemeNavigationThrottle(
@@ -45,6 +55,7 @@
 
   if (base::FeatureList::IsEnabled(
           blink::features::kFileSystemUrlNavigationForChromeAppsOnly) &&
+      !IsExternalMountedFile(request->GetURL()) &&
       (url::Origin::Create(request->GetURL()) ==
        request->GetInitiatorOrigin()) &&
       content::GetContentClient()->browser()->IsFileSystemURLNavigationAllowed(
@@ -123,6 +134,12 @@
       request->GetURL().SchemeIs(url::kFileSystemScheme)) {
     return std::make_unique<BlockedSchemeNavigationThrottle>(request);
   }
+  // Block any external mounted files.
+  if (!base::FeatureList::IsEnabled(
+          blink::features::kFileSystemUrlNavigation) &&
+      IsExternalMountedFile(request->GetURL())) {
+    return std::make_unique<BlockedSchemeNavigationThrottle>(request);
+  }
   return nullptr;
 }
 
