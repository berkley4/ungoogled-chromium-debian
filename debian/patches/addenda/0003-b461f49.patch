From b461f49f66bfa4811bbd1588bee53534e4e5cb31 Mon Sep 17 00:00:00 2001
From: Roman Arora <romanarora@chromium.org>
Date: Wed, 09 Aug 2023 14:48:36 +0000
Subject: [PATCH] [Merge M116] [ntp-journeys] Fix issue with layout processing

Fixes a processing of URL visits issue that may arise when the first
URL visit is one that does not have a url keyed image, which can result
in an invalid processed visits array being generated.

(cherry picked from commit 9dde4c511cbe0edf0c029c153da20ffc83bfc351)

Bug: 1470395
Change-Id: I0c2a68672e4139bacb4b40004ffea61ab7d39f9e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4754036
Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
Commit-Queue: Roman Arora <romanarora@chromium.org>
Reviewed-by: Riley Tatum <rtatum@google.com>
Cr-Original-Commit-Position: refs/heads/main@{#1180539}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4763306
Cr-Commit-Position: refs/branch-heads/5845@{#1312}
Cr-Branched-From: 5a5dff63a4a4c63b9b18589819bebb2566c85443-refs/heads/main@{#1160321}
---

--- a/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts
+++ b/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts
@@ -255,23 +255,28 @@
       Object.keys(LayoutType).length);
 }
 
+// Sort the first "n" visits with images to the front of the list and splice the
+// `visits` array so that "Open All" and "Dismiss" cluster operations are
+// limited to the visible URL visits for the given card layout.
 function processLayoutVisits(
-    visits: URLVisit[], numVisits: number, numImageVisits: number): URLVisit[] {
-  const result: URLVisit[] = Array<URLVisit>(numVisits);
-  let currentImageIdx = 0;
-  let currentVisitIdx = numImageVisits;
-  for (let i = 0; i < visits.length; i++) {
-    if (currentImageIdx < numImageVisits && visits[i].hasUrlKeyedImage) {
-      result[currentImageIdx] = visits[i];
-      currentImageIdx++;
-    } else if (currentVisitIdx < numVisits) {
-      result[currentVisitIdx] = visits[i];
-      currentVisitIdx++;
-    } else {
-      break;
-    }
-  }
-  return result;
+    visits: URLVisit[], numVisits: number, numImageVisits: number) {
+  // Indexes are stored in reverse order and spliced in that order from the
+  // visits array to avoid affecting subsequent splice index order.
+  const nVisitsWithImagesIndices: number[] =
+      visits.reduce((acc: number[], visit: URLVisit, index: number) => {
+        if (acc.length < numImageVisits && visit.hasUrlKeyedImage) {
+          acc.unshift(index);
+        }
+        return acc;
+      }, []);
+
+  const nVisitsWithImages: URLVisit[] = [];
+  nVisitsWithImagesIndices.forEach(visitWithImageIndex => {
+    nVisitsWithImages.unshift(visits.splice(visitWithImageIndex, 1)[0]);
+  });
+
+  visits.unshift(...nVisitsWithImages);
+  visits.splice(numVisits, visits.length - numVisits);
 }
 
 async function createElement(): Promise<HistoryClustersModuleElement|null> {
@@ -295,18 +300,15 @@
   }
   // Pull out the SRP to be used in the header and to open the cluster
   // in tab group.
-  element.searchResultPage = clusters[0]!.visits[0];
+  element.searchResultPage = clusters[0]!.visits.shift()!;
 
-  // History cluster visits minus the SRP that is included, since the SRP
-  // isn't used in the layout.
-  const visits = element.cluster.visits.slice(1);
   // Count number of visits with images.
-  const imageCount = visits
+  const imageCount = element.cluster.visits
                          .filter(
                              (visit: URLVisit) =>
                                  visit.hasUrlKeyedImage && visit.isKnownToSync)
                          .length;
-  const visitCount = visits.length;
+  const visitCount = element.cluster.visits.length;
 
   // Calculate which layout to use.
   if (imageCount >= LAYOUT_3_MIN_IMAGE_VISITS) {
@@ -315,21 +317,23 @@
     // visits for layout 3.
     if (visitCount >= LAYOUT_3_MIN_VISITS) {
       element.layoutType = LayoutType.kLayout3;
-      element.cluster.visits = processLayoutVisits(
-          visits, LAYOUT_3_MIN_VISITS, LAYOUT_3_MIN_IMAGE_VISITS);
+      processLayoutVisits(
+          element.cluster.visits, LAYOUT_3_MIN_VISITS,
+          LAYOUT_3_MIN_IMAGE_VISITS);
     } else {
       // If we have enough image visits, we have enough total visits
       // for layout 1, since all visits shown are image visits.
       element.layoutType = LayoutType.kLayout1;
-      element.cluster.visits = processLayoutVisits(
-          visits, LAYOUT_1_MIN_VISITS, LAYOUT_1_MIN_IMAGE_VISITS);
+      processLayoutVisits(
+          element.cluster.visits, LAYOUT_1_MIN_VISITS,
+          LAYOUT_1_MIN_IMAGE_VISITS);
     }
   } else if (
       imageCount === LAYOUT_2_MIN_IMAGE_VISITS &&
       visitCount >= LAYOUT_2_MIN_VISITS) {
     element.layoutType = LayoutType.kLayout2;
-    element.cluster.visits = processLayoutVisits(
-        visits, LAYOUT_2_MIN_VISITS, LAYOUT_2_MIN_IMAGE_VISITS);
+    processLayoutVisits(
+        element.cluster.visits, LAYOUT_2_MIN_VISITS, LAYOUT_2_MIN_IMAGE_VISITS);
   } else {
     // If the data doesn't fit any layout, don't show the module.
     recordSelectedLayout(LayoutType.kNone);
--- a/chrome/test/data/webui/new_tab_page/modules/history_clusters/module_test.ts
+++ b/chrome/test/data/webui/new_tab_page/modules/history_clusters/module_test.ts
@@ -45,24 +45,28 @@
   return [];
 }
 
-function createSampleCluster(
-    layout?: LayoutType, numRelatedSearches?: number,
-    overrides?: Partial<Cluster>): Cluster {
-  const cluster: Cluster = Object.assign(
+function createLayoutSuitableSampleCluster(
+    layout: LayoutType, numRelatedSearches: number = MIN_RELATED_SEARCHES) {
+  return createSampleCluster({
+    visits: createLayoutSuitableSampleVisits(layout),
+    relatedSearches: createRelatedSearches(numRelatedSearches),
+  });
+}
+
+function createSampleCluster(overrides: Partial<Cluster>): Cluster {
+  return Object.assign(
       {
         id: BigInt(111),
-        visits: createLayoutSuitableSampleVisits(layout),
         label: '',
         tabGroupName: 'My Tab Group Name',
         labelMatchPositions: [],
-        relatedSearches: createRelatedSearches(numRelatedSearches),
+        visits: [],
+        relatedSearches: [],
         imageUrl: undefined,
         fromPersistence: false,
         debugInfo: undefined,
       },
       overrides);
-
-  return cluster;
 }
 
 suite('NewTabPageModulesHistoryClustersModuleTest', () => {
@@ -115,9 +119,10 @@
       // Arrange.
       const cluster: Partial<Cluster> = {
         visits: createSampleVisits(2, 0),
+        relatedSearches: createRelatedSearches(),
       };
-      const moduleElement = await initializeModule(
-          [createSampleCluster(LayoutType.kNone, undefined, cluster)]);
+      const moduleElement =
+          await initializeModule([createSampleCluster(cluster)]);
 
       // Assert.
       assertEquals(null, moduleElement);
@@ -126,8 +131,11 @@
     test('Header element populated with correct data', async () => {
       // Arrange.
       const sampleClusterLabel = '"Sample Journey"';
-      const moduleElement = await initializeModule([createSampleCluster(
-          undefined, undefined, {label: sampleClusterLabel})]);
+      const moduleElement = await initializeModule([createSampleCluster({
+        label: sampleClusterLabel,
+        visits: createLayoutSuitableSampleVisits(LayoutType.kLayout1),
+        relatedSearches: createRelatedSearches(),
+      })]);
 
       // Assert.
       assertTrue(!!moduleElement);
@@ -144,8 +152,11 @@
     test('Header info button click opens info dialog', async () => {
       // Arrange.
       const sampleClusterLabel = '"Sample Journey"';
-      const moduleElement = await initializeModule([createSampleCluster(
-          undefined, undefined, {label: sampleClusterLabel})]);
+      const moduleElement = await initializeModule([createSampleCluster({
+        label: sampleClusterLabel,
+        visits: createLayoutSuitableSampleVisits(LayoutType.kLayout1),
+        relatedSearches: createRelatedSearches(),
+      })]);
 
       // Act.
       assertTrue(!!moduleElement);
@@ -161,8 +172,11 @@
     test('Backend is notified when Show all button is triggered', async () => {
       const sampleClusterUnquotedLabel = 'Sample Journey';
       const sampleClusterLabel = `"${sampleClusterUnquotedLabel}"`;
-      const moduleElement = await initializeModule([createSampleCluster(
-          undefined, MIN_RELATED_SEARCHES, {label: sampleClusterLabel})]);
+      const moduleElement = await initializeModule([createSampleCluster({
+        label: sampleClusterLabel,
+        visits: createLayoutSuitableSampleVisits(LayoutType.kLayout1),
+        relatedSearches: createRelatedSearches(),
+      })]);
       assertTrue(!!moduleElement);
 
       const headerElement = $$(moduleElement, 'ntp-module-header');
@@ -193,7 +207,8 @@
     test(
         'Backend is notified when "Open all in tab group" is triggered',
         async () => {
-          const sampleCluster = createSampleCluster(LayoutType.kLayout1);
+          const sampleCluster =
+              createLayoutSuitableSampleCluster(LayoutType.kLayout1);
           const moduleElement = await initializeModule([sampleCluster]);
           assertTrue(!!moduleElement);
 
@@ -220,10 +235,8 @@
 
     test('Backend is notified when module is disabled', async () => {
       // Arrange.
-      const sampleClusterLabel = '"Sample Journey"';
-      const sampleCluster = createSampleCluster(
-          undefined, undefined, {label: sampleClusterLabel});
-      const moduleElement = await initializeModule([sampleCluster]);
+      const moduleElement = await initializeModule(
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)]);
       assertTrue(!!moduleElement);
 
       // Act.
@@ -240,8 +253,11 @@
     test('Backend is notified when module is dismissed', async () => {
       // Arrange.
       const sampleClusterLabel = '"Sample Journey"';
-      const sampleCluster = createSampleCluster(
-          undefined, undefined, {label: sampleClusterLabel});
+      const sampleCluster = createSampleCluster({
+        label: sampleClusterLabel,
+        visits: createLayoutSuitableSampleVisits(LayoutType.kLayout1),
+        relatedSearches: createRelatedSearches(),
+      });
       const moduleElement = await initializeModule([sampleCluster]);
       assertTrue(!!moduleElement);
 
@@ -279,7 +295,7 @@
               modulesOverflowScrollbarEnabled: true,
             });
 
-            const clusters = [createSampleCluster(layoutType)];
+            const clusters = [createLayoutSuitableSampleCluster(layoutType)];
             handler.setResultFor('getClusters', Promise.resolve({clusters}));
             handler.setResultFor(
                 'getCartForCluster', Promise.resolve({cart: null}));
@@ -305,8 +321,8 @@
 
           test(`Layout ${layoutType}: Visit tile click metrics`, async () => {
             // Arrange.
-            const moduleElement =
-                await initializeModule([createSampleCluster(layoutType)]);
+            const moduleElement = await initializeModule(
+                [createLayoutSuitableSampleCluster(layoutType)]);
 
             // Assert.
             assertTrue(!!moduleElement);
@@ -336,8 +352,8 @@
 
           test(`Layout ${layoutType}: Suggest tile click metrics`, async () => {
             // Arrange.
-            const moduleElement =
-                await initializeModule([createSampleCluster(layoutType)]);
+            const moduleElement = await initializeModule(
+                [createLayoutSuitableSampleCluster(layoutType)]);
 
             // Assert.
             assertTrue(!!moduleElement);
@@ -373,10 +389,11 @@
             LAYOUT_2_MIN_IMAGE_VISITS,
             LAYOUT_3_MIN_IMAGE_VISITS,
           ];
+
           test(`Layout ${layoutType} is used`, async () => {
             // Arrange.
-            const moduleElement =
-                await initializeModule([createSampleCluster(layoutType)]);
+            const moduleElement = await initializeModule(
+                [createLayoutSuitableSampleCluster(layoutType)]);
 
             // Assert.
             assertTrue(!!moduleElement);
@@ -399,6 +416,28 @@
                 assertTrue(visits[i]!.hasUrlKeyedImage);
               }
             }
+            // TODO(romanarora): Assert the visit elements have a non zero title
+            // length.
+          });
+        });
+
+    test(
+        'Layout renders correctly for no leading image sample visits',
+        async () => {
+          const expectedLayout = LayoutType.kLayout1;
+          const moduleElement = await initializeModule([createSampleCluster({
+            visits: createSampleVisits(
+                LAYOUT_3_MIN_VISITS - 1, LAYOUT_1_MIN_IMAGE_VISITS, false),
+          })]);
+          assertTrue(!!moduleElement);
+          assertLayoutSet(moduleElement, expectedLayout);
+
+          const visitElements = moduleElement.shadowRoot!.querySelectorAll(
+              'ntp-history-clusters-tile')!;
+          assertEquals(LAYOUT_1_MIN_VISITS, visitElements.length);
+          visitElements.forEach(visitElement => {
+            const title = $$(visitElement, '#title')!.textContent!.trim();
+            assertTrue(!!title);
           });
         });
   });
@@ -408,8 +447,8 @@
       imageServiceHandler.setResultFor(
           'getPageImageUrl', Promise.resolve(null));
 
-      const moduleElement =
-          await initializeModule([createSampleCluster(LayoutType.kLayout1)]);
+      const moduleElement = await initializeModule(
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)]);
       assertTrue(!!moduleElement);
       await waitAfterNextRender(moduleElement);
 
@@ -435,8 +474,8 @@
         result: {imageUrl: {url: 'https://example.com/image.png'}},
       }));
 
-      const moduleElement =
-          await initializeModule([createSampleCluster(LayoutType.kLayout1)]);
+      const moduleElement = await initializeModule(
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)]);
       assertTrue(!!moduleElement);
       await waitAfterNextRender(moduleElement);
 
@@ -463,7 +502,7 @@
       });
 
       const moduleElement = await initializeModule(
-          [createSampleCluster(LayoutType.kLayout1)], null);
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)], null);
 
       assertEquals(0, handler.getCallCount('getCartForCluster'));
       assertTrue(!!moduleElement);
@@ -481,7 +520,7 @@
           });
 
           const moduleElement = await initializeModule(
-              [createSampleCluster(LayoutType.kLayout1)], null);
+              [createLayoutSuitableSampleCluster(LayoutType.kLayout1)], null);
 
           assertEquals(1, handler.getCallCount('getCartForCluster'));
           assertTrue(!!moduleElement);
@@ -505,7 +544,7 @@
         relativeDate: '6 mins ago',
       });
       const moduleElement = await initializeModule(
-          [createSampleCluster(LayoutType.kLayout1)], cart);
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)], cart);
 
       assertEquals(1, handler.getCallCount('getCartForCluster'));
       assertTrue(!!moduleElement);
@@ -530,7 +569,7 @@
         relativeDate: '6 mins ago',
       });
       const moduleElement = await initializeModule(
-          [createSampleCluster(LayoutType.kLayout1)], cart);
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)], cart);
 
       assertEquals(1, handler.getCallCount('getCartForCluster'));
       assertTrue(!!moduleElement);
@@ -581,7 +620,7 @@
         relativeDate: '6 mins ago',
       });
       const moduleElement = await initializeModule(
-          [createSampleCluster(LayoutType.kLayout1)], cart);
+          [createLayoutSuitableSampleCluster(LayoutType.kLayout1)], cart);
 
       assertEquals(1, handler.getCallCount('getCartForCluster'));
       assertTrue(!!moduleElement);
--- a/chrome/test/data/webui/new_tab_page/modules/history_clusters/test_support.ts
+++ b/chrome/test/data/webui/new_tab_page/modules/history_clusters/test_support.ts
@@ -44,28 +44,31 @@
 // Use Layout 1 as default for tests that do not care which layout.
 export function createSampleVisits(
     numVisits: number = LAYOUT_1_MIN_VISITS,
-    numImageVisits: number = LAYOUT_1_MIN_IMAGE_VISITS): URLVisit[] {
-  const result: URLVisit[] = [];
-
-  // Create SRP visit.
-  result.push(createVisit({
-    visitId: BigInt(0),
-    normalizedUrl: {url: `${GOOGLE_SEARCH_BASE_URL}?q=foo`},
-    urlForDisplay: 'www.google.com',
-    pageTitle: 'SRP',
-  }));
-
-  // Create general visits.
-  for (let i = 1; i <= numVisits; i++) {
-    result.push(createVisit({
-      visitId: BigInt(i),
-      normalizedUrl: {url: `https://www.foo.com/${i}`},
-      urlForDisplay: `www.foo.com/${i}`,
-      pageTitle: `Test Title ${i}`,
-      hasUrlKeyedImage: i <= numImageVisits,
-    }));
+    numImageVisits: number = LAYOUT_1_MIN_IMAGE_VISITS,
+    imageVisitsFirst: boolean = true): URLVisit[] {
+  const nonSrpVisits = Array(numVisits).fill(0).map((_, i) => {
+    const id = i + 1;
+    return createVisit({
+      visitId: BigInt(id),
+      normalizedUrl: {url: `https://www.foo.com/${id}`},
+      urlForDisplay: `www.foo.com/${id}`,
+      pageTitle: `Test Title ${id}`,
+      hasUrlKeyedImage: i < numImageVisits,
+    });
+  });
+  if (!imageVisitsFirst) {
+    nonSrpVisits.reverse();
   }
-  return result;
+
+  return [
+    createVisit({
+      visitId: BigInt(0),
+      normalizedUrl: {url: `${GOOGLE_SEARCH_BASE_URL}?q=foo`},
+      urlForDisplay: 'www.google.com',
+      pageTitle: 'SRP',
+    }),
+    ...nonSrpVisits,
+  ];
 }
 
 export function createRelatedSearches(num: number = MIN_RELATED_SEARCHES):
