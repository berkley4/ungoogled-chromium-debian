From 8d87a262de03ba1b4d0d5c1de9e48209fdc6946c Mon Sep 17 00:00:00 2001
From: James Price <jrprice@google.com>
Date: Thu, 25 Jul 2024 20:21:48 +0000
Subject: [PATCH] [tint] Fix continue bypassing decl check

We were missing cases where a reference to a bypassed variable was
inside another loop continuing block nested inside the outer loop's
continuing block. Use a loop to check all parent continuing blocks,
not just the first parent.

Bug: 353034820
Change-Id: Iffd4be81043f43f07aa39f87cd2d7f7fa4936c7f
Reviewed-on: https://dawn-review.googlesource.com/c/dawn/+/199455
Commit-Queue: David Neto <dneto@google.com>
Commit-Queue: James Price <jrprice@google.com>
Auto-Submit: James Price <jrprice@google.com>
Reviewed-by: David Neto <dneto@google.com>
(cherry picked from commit da0ac02382cea2820e23f69be709c54e43900999)
Reviewed-on: https://dawn-review.googlesource.com/c/dawn/+/200056
Reviewed-by: Antonio Maiorano <amaiorano@google.com>
---

diff --git a/src/tint/lang/wgsl/resolver/resolver.cc b/src/tint/lang/wgsl/resolver/resolver.cc
index 8f55977..80e3ef7 100644
--- a/third_party/dawn/src/tint/lang/wgsl/resolver/resolver.cc
+++ b/third_party/dawn/src/tint/lang/wgsl/resolver/resolver.cc
@@ -3302,12 +3302,12 @@
                     b.create<sem::VariableUser>(expr, stage, current_statement_, value, variable);
 
                 if (current_statement_) {
-                    // If identifier is part of a loop continuing block, make sure it
-                    // doesn't refer to a variable that is bypassed by a continue statement
-                    // in the loop's body block.
-                    if (auto* continuing_block =
-                            current_statement_
-                                ->FindFirstParent<sem::LoopContinuingBlockStatement>()) {
+                    // Check all parent continuing blocks to make sure that this is not a reference
+                    // to a variable that is bypassed by a continue statement in a loop's body
+                    // block.
+                    auto* continuing_block =
+                        current_statement_->FindFirstParent<sem::LoopContinuingBlockStatement>();
+                    while (continuing_block) {
                         auto* loop_block =
                             continuing_block->FindFirstParent<sem::LoopBlockStatement>();
                         if (loop_block->FirstContinue()) {
@@ -3328,6 +3328,9 @@
                                 }
                             }
                         }
+                        continuing_block =
+                            continuing_block->Parent()
+                                ->FindFirstParent<sem::LoopContinuingBlockStatement>();
                     }
                 }
 
diff --git a/src/tint/lang/wgsl/resolver/validation_test.cc b/src/tint/lang/wgsl/resolver/validation_test.cc
index 9c306f7..5f285c5 100644
--- a/third_party/dawn/src/tint/lang/wgsl/resolver/validation_test.cc
+++ b/third_party/dawn/src/tint/lang/wgsl/resolver/validation_test.cc
@@ -589,6 +589,69 @@
 90:12 note: identifier 'z' referenced in continuing block here)");
 }
 
+TEST_F(ResolverValidationTest,
+       Stmt_Loop_ContinueInLoopBodyBeforeDecl_UsageInNestedContinuingInBody) {
+    // loop  {
+    //     continue;
+    //     var z : i32;
+    //     loop {
+    //         continue;
+    //         continuing {
+    //             z = 2i;
+    //             break if true;
+    //         }
+    //     }
+    //     continuing {
+    //         break if true;
+    //     }
+    // }
+
+    auto cont_loc = Source{{12, 34}};
+    auto decl_loc = Source{{56, 78}};
+    auto ref_loc = Source{{90, 12}};
+    auto* nested_loop =
+        Loop(Block(Continue()), Block(Assign(Expr(ref_loc, "z"), 2_i), BreakIf(true)));
+    auto* body = Block(Continue(cont_loc), Decl(Var(decl_loc, "z", ty.i32())), nested_loop);
+    auto* continuing = Block(BreakIf(true));
+    auto* loop_stmt = Loop(body, continuing);
+    WrapInFunction(loop_stmt);
+
+    ASSERT_TRUE(r()->Resolve()) << r()->error();
+}
+
+TEST_F(ResolverValidationTest,
+       Stmt_Loop_ContinueInLoopBodyBeforeDecl_UsageInNestedContinuingInContinuing) {
+    // loop  {
+    //     continue;
+    //     var z : i32;
+    //     continuing {
+    //         loop {
+    //             continuing {
+    //               z = 2i;
+    //               break if true;
+    //             }
+    //         }
+    //         break if true;
+    //     }
+    // }
+
+    auto cont_loc = Source{{12, 34}};
+    auto decl_loc = Source{{56, 78}};
+    auto ref_loc = Source{{90, 12}};
+    auto* body = Block(Continue(cont_loc), Decl(Var(decl_loc, "z", ty.i32())));
+    auto* nested_loop = Loop(Block(), Block(Assign(Expr(ref_loc, "z"), 2_i), BreakIf(true)));
+    auto* continuing = Block(nested_loop, BreakIf(true));
+    auto* loop_stmt = Loop(body, continuing);
+    WrapInFunction(loop_stmt);
+
+    EXPECT_FALSE(r()->Resolve()) << r()->error();
+    EXPECT_EQ(r()->error(),
+              R"(warning: code is unreachable
+12:34 error: continue statement bypasses declaration of 'z'
+56:78 note: identifier 'z' declared here
+90:12 note: identifier 'z' referenced in continuing block here)");
+}
+
 TEST_F(ResolverValidationTest, Stmt_Loop_ContinueInNestedLoopBodyBeforeDecl_UsageInContinuing) {
     // loop  {
     //     loop {
