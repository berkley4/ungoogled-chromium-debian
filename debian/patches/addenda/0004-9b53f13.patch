From 9b53f131776e50c589e1ada5448f212dbf544633 Mon Sep 17 00:00:00 2001
From: Shakti Sahu <shaktisahu@chromium.org>
Date: Wed, 09 Aug 2023 23:55:06 +0000
Subject: [PATCH] [CSC] Match URL using prefix for registration and IPH blocklist

(cherry picked from commit 7213b90086d31b95cbe9857384e0442cf51062b1)

Bug: b/295200566, crbug/1449021
Change-Id: If9e44cefb01db3f3fe2fa2dc7218333ba49e4314
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4766322
Commit-Queue: Shakti Sahu <shaktisahu@chromium.org>
Reviewed-by: Sophie Chang <sophiechang@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1181683}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4766558
Cr-Commit-Position: refs/branch-heads/5845@{#1325}
Cr-Branched-From: 5a5dff63a4a4c63b9b18589819bebb2566c85443-refs/heads/main@{#1160321}
---

--- a/chrome/browser/ui/side_panel/companion/exps_registration_success_observer.cc
+++ b/chrome/browser/ui/side_panel/companion/exps_registration_success_observer.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/ui/side_panel/companion/exps_registration_success_observer.h"
 
 #include "base/strings/string_split.h"
+#include "base/strings/string_util.h"
 #include "chrome/browser/companion/core/constants.h"
 #include "chrome/browser/companion/core/features.h"
 #include "chrome/browser/companion/core/utils.h"
@@ -29,14 +30,14 @@
       base::SplitString(companion::GetExpsRegistrationSuccessPageURLs(), ",",
                         base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
   for (const auto& url_string : url_strings_to_match) {
-    urls_to_match_against_.emplace_back(url_string);
+    exps_registration_success_url_patterns_.emplace_back(url_string);
   }
 
   const auto& blocklisted_url_strings_to_match =
       base::SplitString(companion::GetCompanionIPHBlocklistedPageURLs(), ",",
                         base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
   for (const auto& url_string : blocklisted_url_strings_to_match) {
-    blocklisted_iph_urls_to_match_against_.emplace_back(url_string);
+    blocklisted_iph_url_patterns_.emplace_back(url_string);
   }
 }
 
@@ -52,16 +53,10 @@
   if (pref_service()->GetBoolean(kHasNavigatedToExpsSuccessPage)) {
     return;
   }
-  bool matches_exps_url = false;
-  const GURL& url = page.GetMainDocument().GetLastCommittedURL();
-  for (const auto& url_to_match : urls_to_match_against_) {
-    if (url == url_to_match) {
-      matches_exps_url = true;
-      break;
-    }
-  }
 
-  if (!matches_exps_url) {
+  const GURL& url = page.GetMainDocument().GetLastCommittedURL();
+  if (!DoesUrlMatchPatternsInList(url,
+                                  exps_registration_success_url_patterns_)) {
     return;
   }
 
@@ -83,7 +78,7 @@
     return;
   }
 
-  if (IsUrlBlockListedForIPH(url)) {
+  if (DoesUrlMatchPatternsInList(url, blocklisted_iph_url_patterns_)) {
     return;
   }
 
@@ -118,9 +113,15 @@
       chrome::FindBrowserWithWebContents(web_contents()));
 }
 
-bool ExpsRegistrationSuccessObserver::IsUrlBlockListedForIPH(const GURL& url) {
-  for (const auto& url_to_match : blocklisted_iph_urls_to_match_against_) {
-    if (url == url_to_match) {
+bool ExpsRegistrationSuccessObserver::DoesUrlMatchPatternsInList(
+    const GURL& url,
+    const std::vector<std::string>& url_patterns) {
+  if (!url.is_valid()) {
+    return false;
+  }
+
+  for (const auto& url_pattern : url_patterns) {
+    if (base::StartsWith(url.spec(), url_pattern)) {
       return true;
     }
   }
--- a/chrome/browser/ui/side_panel/companion/exps_registration_success_observer.h
+++ b/chrome/browser/ui/side_panel/companion/exps_registration_success_observer.h
@@ -7,6 +7,7 @@
 
 #include <vector>
 
+#include "base/gtest_prod_util.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/browser/web_contents_user_data.h"
 #include "url/gurl.h"
@@ -38,6 +39,8 @@
       const ExpsRegistrationSuccessObserver&) = delete;
 
  protected:
+  // Called on every page load. Determines and shows IPH if the conditions are
+  // met.
   void MaybeShowIPH();
   virtual void ShowIPH();
   virtual bool IsSearchInCompanionSidePanelSupported();
@@ -46,22 +49,23 @@
  private:
   friend class content::WebContentsUserData<ExpsRegistrationSuccessObserver>;
 
+  FRIEND_TEST_ALL_PREFIXES(ExpsRegistrationSuccessObserverTest, MatchURL);
+
   // content::WebContentsObserver overrides.
   void PrimaryPageChanged(content::Page& page) override;
 
-  // Called on every page load. Determines and shows IPH if the conditions are
-  // met.
-
-  // Whether the current URL is blocklisted from showing IPH.
-  bool IsUrlBlockListedForIPH(const GURL& url);
+  // Whether the given `url` starts with with one of the url patterns in
+  // `url_patterns`.
+  bool DoesUrlMatchPatternsInList(const GURL& url,
+                                  const std::vector<std::string>& url_patterns);
 
   // The list of URLs to search for a match that represents exps registration
   // success.
-  std::vector<GURL> urls_to_match_against_;
+  std::vector<std::string> exps_registration_success_url_patterns_;
 
   // The list of blocklisted URLs to search for a match for which IPH isn't
   // shown.
-  std::vector<GURL> blocklisted_iph_urls_to_match_against_;
+  std::vector<std::string> blocklisted_iph_url_patterns_;
 
   WEB_CONTENTS_USER_DATA_KEY_DECL();
 };
--- a/chrome/browser/ui/side_panel/companion/exps_registration_success_observer_unittest.cc
+++ b/chrome/browser/ui/side_panel/companion/exps_registration_success_observer_unittest.cc
@@ -173,4 +173,36 @@
       pref_service_.GetBoolean(companion::kHasNavigatedToExpsSuccessPage));
 }
 
+TEST_F(ExpsRegistrationSuccessObserverTest, MatchURL) {
+  std::vector<std::string> url_patterns;
+  url_patterns.emplace_back("https://labs.google.com/search/experiment");
+  url_patterns.emplace_back("https://labs.google.com/search/otherexperiment");
+
+  // Empty URL.
+  EXPECT_FALSE(
+      exps_observer_->DoesUrlMatchPatternsInList(GURL(), url_patterns));
+  EXPECT_FALSE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("http://example.com"), url_patterns));
+
+  // Valid URLs.
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/experiment"), url_patterns));
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/experiment?q=some_val"),
+      url_patterns));
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/experiment#fragment1"),
+      url_patterns));
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/experiment/v3"), url_patterns));
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/experiment2"), url_patterns));
+
+  // Valid URLs matching pattern 2.
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/otherexperiment"), url_patterns));
+  EXPECT_TRUE(exps_observer_->DoesUrlMatchPatternsInList(
+      GURL("https://labs.google.com/search/otherexperiment/v3"), url_patterns));
+}
+
 }  // namespace companion
