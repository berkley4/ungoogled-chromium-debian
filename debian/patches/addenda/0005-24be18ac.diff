From 24be18acfbd585a951b5a23c5b9b6213209ae942 Mon Sep 17 00:00:00 2001
From: Scott Violet <sky@chromium.org>
Date: Wed, 24 Apr 2024 20:01:41 +0000
Subject: [PATCH] [m124] [a11y]: this reverts three patches that lead to renderer crashes

Specifically these patches:
https://chromium-review.googlesource.com/c/chromium/src/+/5370683
https://chromium-review.googlesource.com/c/chromium/src/+/5388968

Bug: 335553723
Change-Id: I3c6e65290021dd8f732b7175b9625cb72fbb1ef0
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5484217
Reviewed-by: Benjamin Beaudry <benjamin.beaudry@microsoft.com>
Commit-Queue: Scott Violet <sky@chromium.org>
Reviewed-by: Dan Clark <daniec@microsoft.com>
Reviewed-by: Tzarial Kuznia <zork@chromium.org>
Reviewed-by: Aaron Leventhal <aleventhal@chromium.org>
Cr-Commit-Position: refs/branch-heads/6367@{#983}
Cr-Branched-From: d158c6dc6e3604e6f899041972edf26087a49740-refs/heads/main@{#1274542}
---

--- a/third_party/blink/renderer/modules/accessibility/ax_node_object.cc
+++ b/third_party/blink/renderer/modules/accessibility/ax_node_object.cc
@@ -3396,11 +3396,6 @@
 }
 
 String AXNodeObject::GetValueForControl() const {
-  AXObjectSet visited;
-  return GetValueForControl(visited);
-}
-
-String AXNodeObject::GetValueForControl(AXObjectSet& visited) const {
   // TODO(crbug.com/1165853): Remove this method completely and compute value on
   // the browser side.
   Node* node = GetNode();
@@ -3527,6 +3522,7 @@
     }
 
     // An ARIA combobox can get value from inner contents.
+    AXObjectSet visited;
     return TextFromDescendants(visited, nullptr, false);
   }
 
@@ -3534,12 +3530,6 @@
 }
 
 String AXNodeObject::SlowGetValueForControlIncludingContentEditable() const {
-  AXObjectSet visited;
-  return SlowGetValueForControlIncludingContentEditable(visited);
-}
-
-String AXNodeObject::SlowGetValueForControlIncludingContentEditable(
-    AXObjectSet& visited) const {
   if (IsNonAtomicTextField()) {
     Element* element = GetElement();
     return element ? element->GetInnerTextWithoutUpdate() : String();
@@ -6409,37 +6399,17 @@
   // "If the embedded control has role combobox or listbox, return the text
   // alternative of the chosen option."
   if (UseNameFromSelectedOption()) {
+    StringBuilder accumulated_text;
     AXObjectVector selected_options;
     SelectedOptions(selected_options);
-    if (selected_options.size() == 0) {
-      // Per https://www.w3.org/TR/wai-aria/#combobox, a combobox gets its
-      // value in the following way:
-      // "If the combobox element is a host language element that provides a
-      // value, such as an HTML input element, the value of the combobox is the
-      // value of that element. Otherwise, the value of the combobox is
-      // represented by its descendant elements and can be determined using the
-      // same method used to compute the name of a button from its descendant
-      // content."
-      //
-      // Section 2C of the accname computation steps for the combobox/listbox
-      // case (https://w3c.github.io/accname/#comp_embedded_control) only
-      // mentions getting the text alternative from the chosen option, which
-      // doesn't precisely fit for combobox, but a clarification is coming; see
-      // https://github.com/w3c/accname/issues/232 and
-      // https://github.com/w3c/accname/issues/200.
-      return SlowGetValueForControlIncludingContentEditable(visited);
-    } else {
-      StringBuilder accumulated_text;
-      for (const auto& child : selected_options) {
-        if (visited.insert(child).is_new_entry) {
-          if (accumulated_text.length()) {
-            accumulated_text.Append(" ");
-          }
-          accumulated_text.Append(child->ComputedName());
-        }
+    for (const auto& child : selected_options) {
+      if (visited.insert(child).is_new_entry) {
+        if (accumulated_text.length())
+          accumulated_text.Append(" ");
+        accumulated_text.Append(child->ComputedName());
       }
-      return accumulated_text.ToString();
     }
+    return accumulated_text.ToString();
   }
 
   return String();
--- a/third_party/blink/renderer/modules/accessibility/ax_node_object.h
+++ b/third_party/blink/renderer/modules/accessibility/ax_node_object.h
@@ -186,10 +186,7 @@
   KURL Url() const override;
   AXObject* ChooserPopup() const override;
   String GetValueForControl() const override;
-  String GetValueForControl(AXObjectSet& visited) const override;
   String SlowGetValueForControlIncludingContentEditable() const override;
-  String SlowGetValueForControlIncludingContentEditable(
-      AXObjectSet& visited) const override;
   String TextFromDescendants(AXObjectSet& visited,
                              const AXObject* aria_label_or_description_root,
                              bool recursive) const override;
--- a/third_party/blink/renderer/modules/accessibility/ax_object.cc
+++ b/third_party/blink/renderer/modules/accessibility/ax_object.cc
@@ -2875,19 +2875,10 @@
   return String();
 }
 
-String AXObject::GetValueForControl(AXObjectSet& visited) const {
-  return String();
-}
-
 String AXObject::SlowGetValueForControlIncludingContentEditable() const {
   return String();
 }
 
-String AXObject::SlowGetValueForControlIncludingContentEditable(
-    AXObjectSet& visited) const {
-  return String();
-}
-
 bool AXObject::IsNativeCheckboxInMixedState(const Node* node) {
   const auto* input = DynamicTo<HTMLInputElement>(node);
   if (!input)
--- a/third_party/blink/renderer/modules/accessibility/ax_object.h
+++ b/third_party/blink/renderer/modules/accessibility/ax_object.h
@@ -812,7 +812,6 @@
   // For range controls, such as sliders and scroll bars, the value of
   // aria-valuetext takes priority over the value of aria-valuenow.
   virtual String GetValueForControl() const;
-  virtual String GetValueForControl(AXObjectSet& visited) const;
 
   // Similar to `AXObject::GetValueForControl()` above, but also computes the
   // value of a content editable from its inner text. Sending this value to the
@@ -820,8 +819,6 @@
   // So, we should prefer computing the value of a content editable on the
   // browser side.
   virtual String SlowGetValueForControlIncludingContentEditable() const;
-  virtual String SlowGetValueForControlIncludingContentEditable(
-      AXObjectSet& visited) const;
 
   virtual AXRestriction Restriction() const;
 
--- /dev/null
+++ b/third_party/blink/web_tests/external/wpt/accname/name/comp_embedded_control-expected.txt
@@ -0,0 +1,7 @@
+This is a testharness.js-based test.
+[FAIL] checkbox label with embedded combobox (span)
+  assert_equals: <input type="checkbox" data-expectedlabel="Flash the screen 3 times" data-testname="checkbox label with embedded combobox (span)" class="ex"> expected "Flash the screen 3 times" but got "Flash the screen times"
+[FAIL] checkbox label with embedded combobox (div)
+  assert_equals: <input type="checkbox" data-expectedlabel="Flash the screen 3 times" data-testname="checkbox label with embedded combobox (div)" class="ex"> expected "Flash the screen 3 times" but got "Flash the screen times"
+Harness: the test ran to completion.
+
