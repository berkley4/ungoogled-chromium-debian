From bc7ae76a1429f6f1aafc13f9db1b34899d2ab69f Mon Sep 17 00:00:00 2001
From: Dibyajyoti Pal <dibyapal@google.com>
Date: Thu, 21 Sep 2023 01:16:43 +0000
Subject: [PATCH] [dPWA / M117] Fix heap UAF in WebAppUninstallDialogView

This is a cherry-pick of crrev.com/c/4862702 with the following conflicts
solved:
1. The ClearSiteData() function moved to the ui_manager_impl.
2. A bunch of includes regarding using chromium_string.h instead of
branding.h.
3. Removing a bunch of AppService includes that has only been added
to M118 onwards.

Old commit message:
There is an UAF triggered in WebAppUninstallDialogView where uninstall
with a ScopedKeepAlive wipes out the dialog view, leading to a UAF in
the checkbox_ stored in the dialog view. There might be other
concerns as well about clearing web app site data breaking, since that
is called after the checkbox_ is accessed.

This CL fixes that by:
1. Storing the information about checkbox before triggering uninstall,
and ensuring that Uninstall is the last call happening.
2. Moving the logic to clear web app site data to the caller. This
allows the site clearing logic to be tied to the ScopedKeepAlive
callback, allowing site clearing to happen before the keep alive
destructs, thus preventing any possible UAFs.

(cherry picked from commit 30f82e12dce7d58bfad59aaadfd527a39e271fb9)

Bug: 1481063
Change-Id: I82248d19f06f89edac47a8d719e1535f17c83777
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4862702
Reviewed-by: Daniel Murphy <dmurph@chromium.org>
Reviewed-by: Mike Wasserman <msw@chromium.org>
Commit-Queue: Dibyajyoti Pal <dibyapal@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#1197331}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4880598
Cr-Commit-Position: refs/branch-heads/5938@{#1360}
Cr-Branched-From: 2b50cb4bcc2318034581a816714d9535dc38966d-refs/heads/main@{#1181205}
---

--- a/chrome/browser/ui/browser_dialogs.h
+++ b/chrome/browser/ui/browser_dialogs.h
@@ -18,6 +18,7 @@
 #include "chrome/browser/web_applications/web_app_callback_app_identity.h"
 #include "chrome/browser/web_applications/web_app_id.h"
 #include "chrome/browser/web_applications/web_app_install_info.h"
+#include "chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h"
 #include "components/webapps/browser/installable/installable_metrics.h"
 #include "content/public/browser/bluetooth_delegate.h"
 #include "content/public/browser/login_delegate.h"
@@ -211,7 +212,7 @@
     webapps::WebappUninstallSource uninstall_source,
     gfx::NativeWindow parent,
     std::map<SquareSizePx, SkBitmap> icon_bitmaps,
-    base::OnceCallback<void(bool)> uninstall_dialog_result_callback);
+    web_app::UninstallDialogCallback uninstall_dialog_result_callback);
 
 #if !BUILDFLAG(IS_ANDROID)
 // Callback used to indicate whether a user has accepted the launch of a
--- a/chrome/browser/ui/views/web_apps/web_app_uninstall_dialog_view.cc
+++ b/chrome/browser/ui/views/web_apps/web_app_uninstall_dialog_view.cc
@@ -5,7 +5,6 @@
 #include "chrome/browser/ui/views/web_apps/web_app_uninstall_dialog_view.h"
 
 #include "base/functional/bind.h"
-#include "base/functional/callback_helpers.h"
 #include "base/memory/weak_ptr.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/utf_string_conversions.h"
@@ -17,13 +16,12 @@
 #include "chrome/browser/web_applications/web_app_command_scheduler.h"
 #include "chrome/browser/web_applications/web_app_icon_manager.h"
 #include "chrome/browser/web_applications/web_app_provider.h"
+#include "chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/constrained_window/constrained_window_views.h"
 #include "components/url_formatter/elide_url.h"
 #include "components/webapps/browser/installable/installable_metrics.h"
-#include "components/webapps/browser/uninstall_result_code.h"
-#include "content/public/browser/clear_site_data_utils.h"
 #include "extensions/browser/extension_dialog_auto_confirm.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/metadata/metadata_impl_macros.h"
@@ -32,8 +30,6 @@
 #include "ui/gfx/image/image_skia.h"
 #include "ui/gfx/native_widget_types.h"
 #include "ui/views/controls/button/checkbox.h"
-#include "ui/views/controls/image_view.h"
-#include "ui/views/controls/label.h"
 #include "ui/views/layout/box_layout.h"
 #include "ui/views/view.h"
 #include "ui/views/widget/widget.h"
@@ -61,16 +57,17 @@
     web_app::AppId app_id,
     webapps::WebappUninstallSource uninstall_source,
     std::map<SquareSizePx, SkBitmap> icon_bitmaps,
-    UninstallChoiceCallback uninstall_choice_callback)
+    web_app::UninstallDialogCallback uninstall_choice_callback)
     : app_id_(std::move(app_id)),
       profile_(profile),
       uninstall_choice_callback_(std::move(uninstall_choice_callback)) {
   provider_ = web_app::WebAppProvider::GetForWebApps(profile_)->AsWeakPtr();
   DCHECK(provider_);
 
-  app_start_url_ = provider_->registrar_unsafe().GetAppStartUrl(app_id_);
-  DCHECK(!app_start_url_.is_empty());
-  DCHECK(app_start_url_.is_valid());
+  const GURL app_start_url =
+      provider_->registrar_unsafe().GetAppStartUrl(app_id_);
+  DCHECK(!app_start_url.is_empty());
+  DCHECK(app_start_url.is_valid());
 
   gfx::Size image_size{kIconSizeInDip, kIconSizeInDip};
 
@@ -118,7 +115,7 @@
     std::u16string checkbox_label = l10n_util::GetStringFUTF16(
         IDS_EXTENSION_UNINSTALL_PROMPT_REMOVE_DATA_CHECKBOX,
         url_formatter::FormatUrlForSecurityDisplay(
-            app_start_url_, url_formatter::SchemeDisplay::OMIT_CRYPTOGRAPHIC));
+            app_start_url, url_formatter::SchemeDisplay::OMIT_CRYPTOGRAPHIC));
 
     auto checkbox = std::make_unique<views::Checkbox>(checkbox_label);
     checkbox->SetMultiLine(true);
@@ -132,30 +129,32 @@
 WebAppUninstallDialogDelegateView::~WebAppUninstallDialogDelegateView() {
   install_manager_observation_.Reset();
   if (uninstall_choice_callback_) {
-    std::move(uninstall_choice_callback_).Run(/*uninstalled=*/false);
+    std::move(uninstall_choice_callback_).Run(web_app::UninstallUserOptions());
   }
 }
 
 void WebAppUninstallDialogDelegateView::OnDialogAccepted() {
   DCHECK(provider_);
   bool is_isolated_web_app = provider_->registrar_unsafe().IsIsolated(app_id_);
+  bool clear_site_data = checkbox_ && checkbox_->GetChecked();
 
   HistogramCloseAction action =
-      is_isolated_web_app || (checkbox_ && checkbox_->GetChecked())
+      is_isolated_web_app || clear_site_data
           ? HistogramCloseAction::kUninstallAndCheckboxChecked
           : HistogramCloseAction::kUninstall;
   UMA_HISTOGRAM_ENUMERATION("Webapp.UninstallDialogAction", action);
 
-  Uninstall();
-  if (checkbox_ && checkbox_->GetChecked()) {
-    ClearWebAppSiteData();
-  }
+  Uninstall(clear_site_data);
 }
 
 void WebAppUninstallDialogDelegateView::OnDialogCanceled() {
   UMA_HISTOGRAM_ENUMERATION("Webapp.UninstallDialogAction",
                             HistogramCloseAction::kCancelled);
-  // The user_dialog_choice_callback_ is run in the destructor.
+  // We run this with the default value of web_app::UninstallUserOptions(),
+  // since user_wants_uninstall is set to false by default.
+  if (uninstall_choice_callback_) {
+    std::move(uninstall_choice_callback_).Run(web_app::UninstallUserOptions());
+  }
 }
 
 void WebAppUninstallDialogDelegateView::OnWebAppInstallManagerDestroyed() {
@@ -176,30 +175,12 @@
   }
 }
 
-void WebAppUninstallDialogDelegateView::Uninstall() {
-  DCHECK(provider_);
-  if (!provider_->registrar_unsafe().CanUserUninstallWebApp(app_id_)) {
-    std::move(uninstall_choice_callback_).Run(/*uninstalled=*/false);
-    return;
-  }
-
-  std::move(uninstall_choice_callback_).Run(/*uninstalled=*/true);
+void WebAppUninstallDialogDelegateView::Uninstall(bool clear_site_data) {
   install_manager_observation_.Reset();
-}
-
-void WebAppUninstallDialogDelegateView::ClearWebAppSiteData() {
-  content::ClearSiteData(
-      base::BindRepeating(
-          [](content::BrowserContext* browser_context) {
-            return browser_context;
-          },
-          base::Unretained(profile_)),
-      url::Origin::Create(app_start_url_), content::ClearSiteDataTypeSet::All(),
-      /*storage_buckets_to_remove=*/{},
-      /*avoid_closing_connections=*/false,
-      /*cookie_partition_key=*/absl::nullopt,
-      /*storage_key=*/absl::nullopt,
-      /*partitioned_state_allowed_only=*/false, base::DoNothing());
+  web_app::UninstallUserOptions user_options;
+  user_options.clear_site_data = clear_site_data;
+  user_options.user_wants_uninstall = true;
+  std::move(uninstall_choice_callback_).Run(user_options);
 }
 
 void WebAppUninstallDialogDelegateView::ProcessAutoConfirmValue() {
@@ -231,7 +212,7 @@
     webapps::WebappUninstallSource uninstall_source,
     gfx::NativeWindow parent,
     std::map<SquareSizePx, SkBitmap> icon_bitmaps,
-    base::OnceCallback<void(bool)> uninstall_dialog_result_callback) {
+    web_app::UninstallDialogCallback uninstall_dialog_result_callback) {
   auto* view = new WebAppUninstallDialogDelegateView(
       profile, app_id, uninstall_source, std::move(icon_bitmaps),
       std::move(uninstall_dialog_result_callback));
--- a/chrome/browser/ui/views/web_apps/web_app_uninstall_dialog_view.h
+++ b/chrome/browser/ui/views/web_apps/web_app_uninstall_dialog_view.h
@@ -18,6 +18,7 @@
 #include "chrome/browser/web_applications/web_app_install_manager_observer.h"
 #include "chrome/browser/web_applications/web_app_provider.h"
 #include "chrome/browser/web_applications/web_app_registrar.h"
+#include "chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/metadata/metadata_header_macros.h"
 #include "ui/gfx/image/image_skia.h"
@@ -36,8 +37,6 @@
 class Checkbox;
 }
 
-using UninstallChoiceCallback = base::OnceCallback<void(bool)>;
-
 // The dialog's view, owned by the views framework.
 class WebAppUninstallDialogDelegateView
     : public views::DialogDelegateView,
@@ -50,7 +49,7 @@
       web_app::AppId app_id,
       webapps::WebappUninstallSource uninstall_source,
       std::map<SquareSizePx, SkBitmap> icon_bitmaps,
-      UninstallChoiceCallback uninstall_choice_callback);
+      web_app::UninstallDialogCallback uninstall_choice_callback);
   WebAppUninstallDialogDelegateView(const WebAppUninstallDialogDelegateView&) =
       delete;
   WebAppUninstallDialogDelegateView& operator=(
@@ -64,8 +63,7 @@
   ui::ImageModel GetWindowIcon() override;
 
   // Uninstalls the web app.
-  void Uninstall();
-  void ClearWebAppSiteData();
+  void Uninstall(bool clear_site_data);
 
   void OnDialogAccepted();
   void OnDialogCanceled();
@@ -80,11 +78,9 @@
   // The web app we are showing the dialog for.
   const web_app::AppId app_id_;
 
-  // The dialog needs start_url copy even if app gets uninstalled.
-  GURL app_start_url_;
   const raw_ptr<Profile, AcrossTasksDanglingUntriaged> profile_;
   base::WeakPtr<web_app::WebAppProvider> provider_;
-  UninstallChoiceCallback uninstall_choice_callback_;
+  web_app::UninstallDialogCallback uninstall_choice_callback_;
 
   base::ScopedObservation<web_app::WebAppInstallManager,
                           web_app::WebAppInstallManagerObserver>
--- a/chrome/browser/ui/web_applications/web_app_ui_manager_impl.cc
+++ b/chrome/browser/ui/web_applications/web_app_ui_manager_impl.cc
@@ -41,13 +41,11 @@
 #include "chrome/browser/web_applications/web_app_command_scheduler.h"
 #include "chrome/browser/web_applications/web_app_provider.h"
 #include "chrome/browser/web_applications/web_app_ui_manager.h"
-#include "chrome/common/extensions/manifest_handlers/app_launch_info.h"
+#include "chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h"
 #include "components/constrained_window/constrained_window_views.h"
-#include "components/services/app_service/public/cpp/app_registry_cache.h"
-#include "components/services/app_service/public/cpp/app_types.h"
-#include "components/services/app_service/public/cpp/types_util.h"
 #include "components/webapps/browser/installable/installable_metrics.h"
 #include "components/webapps/browser/uninstall_result_code.h"
+#include "content/public/browser/clear_site_data_utils.h"
 #include "content/public/browser/navigation_handle.h"
 #include "extensions/browser/app_sorting.h"
 #include "extensions/browser/extension_prefs.h"
@@ -57,6 +55,9 @@
 #include "ui/base/page_transition_types.h"
 #include "ui/gfx/native_widget_types.h"
 #include "ui/views/native_window_tracker.h"
+#include "url/gurl.h"
+#include "url/origin.h"
+#include "url/url_constants.h"
 
 #if !BUILDFLAG(IS_MAC)
 #include "ui/aura/window.h"
@@ -496,16 +497,34 @@
     webapps::WebappUninstallSource uninstall_source,
     UninstallCompleteCallback complete_callback,
     UninstallScheduledCallback uninstall_scheduled_callback,
-    bool user_wants_uninstall) {
-  if (user_wants_uninstall) {
-    WebAppProvider* provider = WebAppProvider::GetForWebApps(profile_);
-    CHECK(provider);
-    provider->scheduler().UninstallWebApp(app_id, uninstall_source,
-                                          std::move(complete_callback));
-  } else {
+    web_app::UninstallUserOptions uninstall_options) {
+  WebAppProvider* provider = WebAppProvider::GetForWebApps(profile_);
+  CHECK(provider);
+
+  const bool uninstall_scheduled =
+      uninstall_options.user_wants_uninstall &&
+      provider->registrar_unsafe().CanUserUninstallWebApp(app_id);
+  std::move(uninstall_scheduled_callback).Run(uninstall_scheduled);
+  if (!uninstall_scheduled) {
     std::move(complete_callback).Run(webapps::UninstallResultCode::kCancelled);
+    return;
+  }
+
+  UninstallCompleteCallback final_callback;
+  if (uninstall_options.clear_site_data) {
+    CHECK(uninstall_options.user_wants_uninstall);
+    const GURL app_start_url =
+        provider->registrar_unsafe().GetAppStartUrl(app_id);
+    final_callback =
+        base::BindOnce(&WebAppUiManagerImpl::ClearWebAppSiteDataIfNeeded,
+                       weak_ptr_factory_.GetWeakPtr(), app_start_url,
+                       std::move(complete_callback));
+  } else {
+    final_callback = std::move(complete_callback);
   }
-  std::move(uninstall_scheduled_callback).Run(user_wants_uninstall);
+
+  provider->scheduler().UninstallWebApp(app_id, uninstall_source,
+                                        std::move(final_callback));
 }
 
 void WebAppUiManagerImpl::OnUninstallCancelled(
@@ -515,4 +534,35 @@
   std::move(complete_callback).Run(webapps::UninstallResultCode::kCancelled);
 }
 
+void WebAppUiManagerImpl::ClearWebAppSiteDataIfNeeded(
+    const GURL app_start_url,
+    UninstallCompleteCallback uninstall_complete_callback,
+    webapps::UninstallResultCode uninstall_code) {
+  // This callback should be run at the very end of the uninstallation + site
+  // data removal process (if any).
+  base::OnceClosure final_uninstall_callback =
+      base::BindOnce(std::move(uninstall_complete_callback), uninstall_code);
+
+  // Only clear site data if the uninstallation has succeeded, i.e. either the
+  // app has been uninstalled completely, or it was previously uninstalled but
+  // some data had been left over.
+  if (webapps::UninstallSucceeded(uninstall_code)) {
+    content::ClearSiteData(base::BindRepeating(
+                               [](content::BrowserContext* browser_context) {
+                                 return browser_context;
+                               },
+                               base::Unretained(profile_)),
+                           url::Origin::Create(app_start_url),
+                           content::ClearSiteDataTypeSet::All(),
+                           /*storage_buckets_to_remove=*/{},
+                           /*avoid_closing_connections=*/false,
+                           /*cookie_partition_key=*/absl::nullopt,
+                           /*storage_key=*/absl::nullopt,
+                           /*partitioned_state_allowed_only=*/false,
+                           std::move(final_uninstall_callback));
+  } else {
+    std::move(final_uninstall_callback).Run();
+  }
+}
+
 }  // namespace web_app
--- a/chrome/browser/ui/web_applications/web_app_ui_manager_impl.h
+++ b/chrome/browser/ui/web_applications/web_app_ui_manager_impl.h
@@ -9,7 +9,6 @@
 #include <memory>
 #include <vector>
 
-#include "base/containers/unique_ptr_adapters.h"
 #include "base/functional/callback_forward.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/weak_ptr.h"
@@ -17,7 +16,10 @@
 #include "chrome/browser/ui/browser_list_observer.h"
 #include "chrome/browser/web_applications/web_app_install_info.h"
 #include "chrome/browser/web_applications/web_app_ui_manager.h"
+#include "chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h"
 #include "components/webapps/browser/installable/installable_metrics.h"
+#include "content/public/browser/web_contents.h"
+#include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/gfx/native_widget_types.h"
 
@@ -150,12 +152,17 @@
       webapps::WebappUninstallSource uninstall_source,
       UninstallCompleteCallback complete_callback,
       UninstallScheduledCallback uninstall_scheduled_callback,
-      bool user_wants_uninstall);
+      web_app::UninstallUserOptions uninstall_options);
 
   void OnUninstallCancelled(
       UninstallCompleteCallback complete_callback,
       UninstallScheduledCallback uninstall_scheduled_callback);
 
+  void ClearWebAppSiteDataIfNeeded(
+      const GURL app_start_url,
+      UninstallCompleteCallback uninstall_complete_callback,
+      webapps::UninstallResultCode uninstall_code);
+
   const raw_ptr<Profile> profile_;
   std::map<AppId, std::vector<base::OnceClosure>> windows_closed_requests_map_;
   std::map<AppId, size_t> num_windows_for_apps_map_;
--- a/chrome/browser/web_applications/BUILD.gn
+++ b/chrome/browser/web_applications/BUILD.gn
@@ -278,6 +278,7 @@
     "web_app_translation_manager.h",
     "web_app_ui_manager.cc",
     "web_app_ui_manager.h",
+    "web_app_uninstall_dialog_user_options.h",
     "web_app_utils.cc",
     "web_app_utils.h",
     "web_contents/web_app_data_retriever.cc",
--- /dev/null
+++ b/chrome/browser/web_applications/web_app_uninstall_dialog_user_options.h
@@ -0,0 +1,21 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_WEB_APPLICATIONS_WEB_APP_UNINSTALL_DIALOG_USER_OPTIONS_H_
+#define CHROME_BROWSER_WEB_APPLICATIONS_WEB_APP_UNINSTALL_DIALOG_USER_OPTIONS_H_
+
+#include "base/functional/callback.h"
+
+namespace web_app {
+
+struct UninstallUserOptions {
+  bool user_wants_uninstall = false;
+  bool clear_site_data = false;
+};
+
+using UninstallDialogCallback = base::OnceCallback<void(UninstallUserOptions)>;
+
+}  // namespace web_app
+
+#endif  // CHROME_BROWSER_WEB_APPLICATIONS_WEB_APP_UNINSTALL_DIALOG_USER_OPTIONS_H_
