From: uazo <uazo@users.noreply.github.com>
Date: Thu, 14 Jul 2022 09:48:45 +0000
Subject: Remove navigator.connection info

Change the result of navigator.connection to default values
and disable observers

Original License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 .../renderer/modules/netinfo/network_information.cc   |  5 ++++-
 .../platform/network/network_state_notifier.cc        | 11 +++++++++++
 .../platform/network/network_state_notifier.h         |  2 +-
 3 files changed, 16 insertions(+), 2 deletions(-)

--- a/third_party/blink/renderer/modules/netinfo/network_information.cc
+++ b/third_party/blink/renderer/modules/netinfo/network_information.cc
@@ -61,7 +61,7 @@
 }
 
 bool NetworkInformation::IsObserving() const {
-  return !!connection_observer_handle_;
+  return false;
 }
 
 String NetworkInformation::type() const {
@@ -147,6 +147,7 @@
     const absl::optional<base::TimeDelta>& transport_rtt,
     const absl::optional<double>& downlink_mbps,
     bool save_data) {
+  if ((true)) return;
   DCHECK(GetExecutionContext()->IsContextThread());
 
   const String host = Host();
@@ -242,6 +243,7 @@
 }
 
 void NetworkInformation::StartObserving() {
+  if ((true)) return;
   if (!IsObserving() && !context_stopped_) {
     type_ = GetNetworkStateNotifier().ConnectionType();
     DCHECK(!connection_observer_handle_);
@@ -252,6 +254,7 @@
 }
 
 void NetworkInformation::StopObserving() {
+  if ((true)) return;
   if (IsObserving()) {
     DCHECK(connection_observer_handle_);
     connection_observer_handle_ = nullptr;
--- a/third_party/blink/renderer/platform/network/network_state_notifier.cc
+++ b/third_party/blink/renderer/platform/network/network_state_notifier.cc
@@ -101,6 +101,17 @@
   }
 }
 
+NetworkStateNotifier::NetworkStateNotifier() : has_override_(false) {
+  // set default data
+  SetNetworkConnectionInfoOverride(
+    /*on_line*/ true,
+    /*type*/ WebConnectionType::kWebConnectionTypeWifi,
+    /*effective_type*/ absl::nullopt,
+    /*http_rtt_msec*/ 0,
+    /*max_bandwidth_mbps*/ std::numeric_limits<double>::max());
+  SetNetworkQuality(/*effective_type*/ WebEffectiveConnectionType::kType4G, base::TimeDelta(), base::TimeDelta(), 10000);
+}
+
 NetworkStateNotifier::NetworkStateObserverHandle::NetworkStateObserverHandle(
     NetworkStateNotifier* notifier,
     NetworkStateNotifier::ObserverType type,
--- a/third_party/blink/renderer/platform/network/network_state_notifier.h
+++ b/third_party/blink/renderer/platform/network/network_state_notifier.h
@@ -123,7 +123,7 @@
     scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
   };
 
-  NetworkStateNotifier() : has_override_(false) {}
+  NetworkStateNotifier();
   NetworkStateNotifier(const NetworkStateNotifier&) = delete;
   NetworkStateNotifier& operator=(const NetworkStateNotifier&) = delete;
 
