--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -132,4 +132,8 @@
      "Minimal Referrers",
      "Removes all cross-origin referrers and strips same-origin referrers down to the origin. Has lower precedence than remove-cross-origin-referrers. ungoogled-chromium flag.",
      kOsAll, FEATURE_VALUE_TYPE(features::kMinimalReferrers)},
+    {"enable-mdns",
+     "Enable mDNS",
+     "Enables mDNS and Service Discovery. ungoogled-chromium flag.",
+     kOsAll, FEATURE_VALUE_TYPE(network::features::kMdns)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/net/dns/host_resolver_manager.cc
+++ b/net/dns/host_resolver_manager.cc
@@ -116,6 +116,7 @@
 #include "net/log/net_log_with_source.h"
 #include "net/socket/client_socket_factory.h"
 #include "net/url_request/url_request_context.h"
+#include "services/network/public/cpp/features.h"
 #include "third_party/abseil-cpp/absl/types/variant.h"
 #include "url/scheme_host_port.h"
 #include "url/url_constants.h"
@@ -153,6 +154,8 @@
 
 // True if |hostname| ends with either ".local" or ".local.".
 bool ResemblesMulticastDNSName(base::StringPiece hostname) {
+  if (!base::FeatureList::IsEnabled(network::features::kMdns))
+    return false;
   return hostname.ends_with(".local") || hostname.ends_with(".local.");
 }
 
--- a/net/dns/mdns_client_impl.cc
+++ b/net/dns/mdns_client_impl.cc
@@ -30,6 +30,7 @@
 #include "net/dns/public/util.h"
 #include "net/dns/record_rdata.h"
 #include "net/socket/datagram_socket.h"
+#include "services/network/public/cpp/features.h"
 
 // TODO(gene): Remove this temporary method of disabling NSEC support once it
 // becomes clear whether this feature should be
@@ -491,6 +492,8 @@
 }
 
 int MDnsClientImpl::StartListening(MDnsSocketFactory* socket_factory) {
+  if (!base::FeatureList::IsEnabled(network::features::kMdns))
+    return ERR_ABORTED;
   DCHECK(!core_.get());
   core_ = std::make_unique<Core>(clock_, cleanup_timer_.get());
   int rv = core_->Init(socket_factory);
--- a/services/network/p2p/socket_manager.cc
+++ b/services/network/p2p/socket_manager.cc
@@ -9,6 +9,7 @@
 #include <optional>
 #include <utility>
 
+#include "base/feature_list.h"
 #include "base/functional/bind.h"
 #include "base/memory/raw_ptr.h"
 #include "base/task/single_thread_task_runner.h"
@@ -30,6 +31,7 @@
 #include "net/url_request/url_request_context_getter.h"
 #include "services/network/p2p/socket.h"
 #include "services/network/proxy_resolving_client_socket_factory.h"
+#include "services/network/public/cpp/features.h"
 #include "services/network/public/cpp/p2p_param_traits.h"
 #include "third_party/webrtc/media/base/rtp_utils.h"
 #include "third_party/webrtc/media/base/turn_utils.h"
@@ -114,7 +116,7 @@
     net::HostPortPair host(host_name_, 0);
 
     net::HostResolver::ResolveHostParameters parameters;
-    if (enable_mdns_ && HasLocalTld(host_name_)) {
+    if (enable_mdns_ && HasLocalTld(host_name_) && base::FeatureList::IsEnabled(features::kMdns)) {
 #if BUILDFLAG(ENABLE_MDNS)
       // HostResolver/MDnsClient expects a key without a trailing dot.
       host.set_host(host_name_.substr(0, host_name_.size() - 1));
--- a/services/network/public/cpp/features.cc
+++ b/services/network/public/cpp/features.cc
@@ -15,6 +15,10 @@
 
 namespace network::features {
 
+BASE_FEATURE(kMdns,
+             "Mdns",
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
 BASE_FEATURE(kNetworkErrorLogging,
              "NetworkErrorLogging",
              base::FEATURE_ENABLED_BY_DEFAULT);
--- a/services/network/public/cpp/features.h
+++ b/services/network/public/cpp/features.h
@@ -13,6 +13,7 @@
 namespace network {
 namespace features {
 
+COMPONENT_EXPORT(NETWORK_CPP) BASE_DECLARE_FEATURE(kMdns);
 COMPONENT_EXPORT(NETWORK_CPP) BASE_DECLARE_FEATURE(kNetworkErrorLogging);
 COMPONENT_EXPORT(NETWORK_CPP) BASE_DECLARE_FEATURE(kReporting);
 COMPONENT_EXPORT(NETWORK_CPP) BASE_DECLARE_FEATURE(kThrottleDelayable);
