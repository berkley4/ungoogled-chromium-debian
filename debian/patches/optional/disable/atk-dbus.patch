--- a/build/config/ui.gni
+++ b/build/config/ui.gni
@@ -41,8 +41,10 @@
 
 assert(!use_glib || (is_linux && !is_chromecast))
 
-use_atk = is_linux && !is_chromecast && use_glib &&
-          current_toolchain == default_toolchain
+declare_args() {
+  use_atk = is_linux && !is_chromecast && use_glib &&
+            current_toolchain == default_toolchain
+}
 
 # Whether using Xvfb to provide a display server for a test might be
 # necessary.
--- a/chrome/browser/chrome_browser_main_linux.cc
+++ b/chrome/browser/chrome_browser_main_linux.cc
@@ -62,9 +62,9 @@
   // FeatureList, and is done elsewhere.
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
-#if !BUILDFLAG(IS_CHROMEOS)
+#if !BUILDFLAG(IS_CHROMEOS) && defined(USE_DBUS)
   bluez::BluezDBusManager::Initialize(nullptr /* system_bus */);
-
+#elif !BUILDFLAG(IS_CHROMEOS)
   // Set up crypt config. This needs to be done before anything starts the
   // network service, as the raw encryption key needs to be shared with the
   // network service for encrypted cookie storage.
@@ -125,7 +125,7 @@
 void ChromeBrowserMainPartsLinux::PostDestroyThreads() {
 #if BUILDFLAG(IS_CHROMEOS)
   // No-op; per PostBrowserStart() comment, this is done elsewhere.
-#else
+#elif defined(USE_DBUS)
   bluez::BluezDBusManager::Shutdown();
   bluez::BluezDBusThreadManager::Shutdown();
 #endif  // BUILDFLAG(IS_CHROMEOS)
--- a/chrome/browser/metrics/bluetooth_metrics_provider.cc
+++ b/chrome/browser/metrics/bluetooth_metrics_provider.cc
@@ -10,11 +10,11 @@
 #include "content/public/browser/browser_thread.h"
 #include "device/bluetooth/bluetooth_adapter_factory.h"
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#if (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
 #include "device/bluetooth/dbus/bluez_dbus_manager.h"
 #include "device/bluetooth/floss/floss_dbus_manager.h"
 #include "device/bluetooth/floss/floss_features.h"
-#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#endif  // (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
 
 namespace metrics {
 
@@ -74,7 +74,7 @@
     return;
   }
 
-#if BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX)
+#if BUILDFLAG(IS_CHROMEOS) || (BUILDFLAG(IS_LINUX) && defined(USE_DBUS))
   bool is_initialized;
 
   if (base::FeatureList::IsEnabled(floss::features::kFlossEnabled)) {
@@ -90,7 +90,7 @@
   // startup.
   if (!is_initialized)
     return;
-#endif  // BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX)
+#endif  // BUILDFLAG(IS_CHROMEOS) || (BUILDFLAG(IS_LINUX && defined(USE_DBUS))
 
   if (!device::BluetoothAdapterFactory::Get()->IsBluetoothSupported()) {
     bluetooth_availability_ = BluetoothAvailability::BLUETOOTH_NOT_SUPPORTED;
--- a/chrome/browser/platform_util_linux.cc
+++ b/chrome/browser/platform_util_linux.cc
@@ -27,11 +27,15 @@
 // complain as Chromecast doesn't use (or depend on) //components/dbus.
 // TODO(crbug.com/1215474): Eliminate //chrome being visible in the GN structure
 // on Chromecast and remove the nogncheck below.
+#if defined(USE_DBUS)
 #include "components/dbus/thread_linux/dbus_thread_linux.h"  // nogncheck
+#endif
 #include "content/public/browser/browser_thread.h"
+#if defined(USE_DBUS)
 #include "dbus/bus.h"
 #include "dbus/message.h"
 #include "dbus/object_proxy.h"
+#endif
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "url/gurl.h"
 
@@ -41,6 +45,7 @@
 
 namespace {
 
+#if defined(USE_DBUS)
 const char kMethodListActivatableNames[] = "ListActivatableNames";
 const char kMethodNameHasOwner[] = "NameHasOwner";
 
@@ -284,6 +289,7 @@
   base::CallbackListSubscription browser_shutdown_subscription_;
   base::WeakPtrFactory<ShowItemHelper> weak_ptr_factory_{this};
 };
+#endif
 
 void RunCommand(const std::string& command,
                 const base::FilePath& working_directory,
@@ -350,8 +356,10 @@
 }  // namespace internal
 
 void ShowItemInFolder(Profile* profile, const base::FilePath& full_path) {
+#if defined(USE_DBUS)
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   ShowItemHelper::GetInstance().ShowItemInFolder(profile, full_path);
+#endif
 }
 
 void OpenExternal(Profile* profile, const GURL& url) {
--- a/device/bluetooth/bluetooth_adapter_factory.cc
+++ b/device/bluetooth/bluetooth_adapter_factory.cc
@@ -42,7 +42,7 @@
   // instance even on platforms that would otherwise not support it.
   if (Get()->adapter_)
     return true;
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX) || \
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || \
     BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_MAC)
   return true;
 #else
@@ -55,7 +55,7 @@
     return values_for_testing_->GetLESupported();
   }
 
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || \
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS) || (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || \
     BUILDFLAG(IS_MAC)
   return true;
 #elif BUILDFLAG(IS_WIN)
--- a/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
+++ b/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
@@ -1339,7 +1339,7 @@
 // TODO: Ideally this should be handled by our feature system, so that this
 // code doesn't even compile on OSes it isn't being used on, but currently this
 // is not possible.
-#if !BUILDFLAG(IS_WIN)
+#if !BUILDFLAG(IS_WIN) && (!BUILDFLAG(IS_LINUX) || defined(USE_DBUS))
   base::WeakPtr<device::BluetoothLocalGattService> service =
       device::BluetoothLocalGattService::Create(
           event_router_->adapter(),
@@ -1368,6 +1368,7 @@
 }
 
 void BluetoothLowEnergyCreateCharacteristicFunction::DoWork() {
+#if !BUILDFLAG(IS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattService* service =
       event_router_->adapter()->GetGattService(params_->service_id);
   if (!service) {
@@ -1388,6 +1389,9 @@
 
   Respond(ArgumentList(apibtle::CreateCharacteristic::Results::Create(
       characteristic->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // createDescriptor:
@@ -1404,6 +1408,7 @@
 }
 
 void BluetoothLowEnergyCreateDescriptorFunction::DoWork() {
+#if !BUILDFLAG(IS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattCharacteristic* characteristic =
       event_router_->GetLocalCharacteristic(params_->characteristic_id);
   if (!characteristic) {
@@ -1419,6 +1424,9 @@
 
   Respond(ArgumentList(
       apibtle::CreateDescriptor::Results::Create(descriptor->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // registerService:
--- a/services/device/wake_lock/power_save_blocker/BUILD.gn
+++ b/services/device/wake_lock/power_save_blocker/BUILD.gn
@@ -82,6 +82,9 @@
     visibility = [ ":power_save_blocker" ]
     sources = java_sources_needing_jni
   }
+  if (!is_chromeos && use_x11 && !use_dbus) {
+    sources += [ "power_save_blocker_ozone.cc" ]
+  }
 
   android_library("java") {
     # Conceptually, this should be visible only to //services/device:java.
--- a/device/bluetooth/cast_bluetooth.gni
+++ b/device/bluetooth/cast_bluetooth.gni
@@ -2,5 +2,5 @@
 
 declare_args() {
   force_cast_bluetooth = false
-  use_bluez = (is_linux && !is_castos) || is_chromeos
+  use_bluez = (is_linux && !is_castos && use_dbus) || is_chromeos
 }
