--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -28,6 +28,7 @@
 import("//components/os_crypt/sync/features.gni")
 import("//components/spellcheck/spellcheck_build_features.gni")
 import("//crypto/features.gni")
+import("//device/bluetooth/cast_bluetooth.gni")
 import("//device/vr/buildflags/buildflags.gni")
 import("//extensions/buildflags/buildflags.gni")
 import("//media/gpu/args.gni")
@@ -6778,6 +6779,10 @@
       defines += [ "USE_DBUS" ]
     }
 
+    if (!use_bluez) {
+      defines += [ "LINUX_WITHOUT_DBUS" ]
+    }
+
     # device_info_fetcher uses a "defined(USE_GIO)" macro, so if it's refactored
     # away from this file make sure gio_config is still added to configs.
     if (use_gio) {
--- a/chrome/browser/chrome_browser_main_linux.cc
+++ b/chrome/browser/chrome_browser_main_linux.cc
@@ -84,7 +84,9 @@
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
 #if !BUILDFLAG(IS_CHROMEOS)
+#if !defined(LINUX_WITHOUT_DBUS)
   bluez::BluezDBusManager::Initialize(nullptr /* system_bus */);
+#endif  // !defined(LINUX_WITHOUT_DBUS)
 
   // Set up crypt config. This needs to be done before anything starts the
   // network service, as the raw encryption key needs to be shared with the
@@ -172,8 +174,10 @@
 #if BUILDFLAG(IS_CHROMEOS)
   // No-op; per PostBrowserStart() comment, this is done elsewhere.
 #else
+#if !defined(LINUX_WITHOUT_DBUS)
   bluez::BluezDBusManager::Shutdown();
   bluez::BluezDBusThreadManager::Shutdown();
+#endif  // !defined(LINUX_WITHOUT_DBUS)
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
   ChromeBrowserMainPartsPosix::PostDestroyThreads();
--- a/chrome/browser/metrics/bluetooth_metrics_provider.cc
+++ b/chrome/browser/metrics/bluetooth_metrics_provider.cc
@@ -15,11 +15,15 @@
 BluetoothMetricsProvider::~BluetoothMetricsProvider() = default;
 
 bool BluetoothMetricsProvider::ProvideHistograms() {
+#if defined(LINUX_WITHOUT_DBUS)
+  return false;
+#else
   base::UmaHistogramEnumeration("Bluetooth.StackName",
                                 floss::features::IsFlossEnabled()
                                     ? BluetoothStackName::kFloss
                                     : BluetoothStackName::kBlueZ);
   return true;
+#endif
 }
 
 }  // namespace metrics
