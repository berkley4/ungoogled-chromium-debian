--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -834,9 +834,11 @@
     return web_app_frame_toolbar();
   }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   enterprise_watermark::WatermarkView* get_watermark_view_for_testing() {
     return watermark_view_;
   }
+#endif
 
   void set_on_delay_apply_data_protection_settings_if_empty_called_for_testing(
       base::OnceClosure closure) {
@@ -1074,6 +1076,7 @@
   // when it should not be able to.
   void UpdateFullscreenAllowedFromPolicy(bool allowed_without_policy);
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   // Applies data protection settings based on the verdict received by
   // safe-browsing's realtime to `watermark_view_`.
   void ApplyDataProtectionSettings(
@@ -1094,6 +1097,7 @@
   void DelayApplyDataProtectionSettingsIfEmpty(
       base::WeakPtr<content::WebContents> expected_web_contents,
       const enterprise_data_protection::UrlSettings& settings);
+#endif
 
   // The BrowserFrame that hosts this view.
   raw_ptr<BrowserFrame, DanglingUntriaged> frame_ = nullptr;
@@ -1221,8 +1225,10 @@
   // Clear watermark text once the page loads.
   bool clear_watermark_text_on_page_load_ = false;
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   // The view that overlays a watermark on the contents container.
   raw_ptr<enterprise_watermark::WatermarkView> watermark_view_ = nullptr;
+#endif
 
   // The view managing the devtools and contents positions.
   // Handled by ContentsLayoutManager.
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -934,6 +934,8 @@
     watermark_view_ = contents_container->AddChildView(
         std::make_unique<enterprise_watermark::WatermarkView>());
   }
+#else
+  views::View* watermark_view_ = nullptr;
 #endif  // BUILDFLAG(ENTERPRISE_WATERMARK)
 
   contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
@@ -5479,6 +5481,7 @@
   }
 }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
 void BrowserView::ApplyDataProtectionSettings(
     base::WeakPtr<content::WebContents> expected_web_contents,
     const enterprise_data_protection::UrlSettings& settings) {
@@ -5524,6 +5527,7 @@
         .Run();
   }
 }
+#endif
 
 BEGIN_METADATA(BrowserView)
 ADD_READONLY_PROPERTY_METADATA(gfx::Rect, FindBarBoundingBox)
