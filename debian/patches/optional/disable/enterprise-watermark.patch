--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -810,9 +810,11 @@
     return web_app_frame_toolbar();
   }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   enterprise_watermark::WatermarkView* get_watermark_view_for_testing() {
     return watermark_view_;
   }
+#endif
 
   // This value is used in a common calculation in NonClientFrameView
   // subclasses. This must be added to the origin of the first painted pixel of
@@ -1180,8 +1182,10 @@
   raw_ptr<views::WebView, AcrossTasksDanglingUntriaged> devtools_web_view_ =
       nullptr;
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   // The view that overlays a watermark on the contents container.
   raw_ptr<enterprise_watermark::WatermarkView> watermark_view_ = nullptr;
+#endif
 
   // The view managing the devtools and contents positions.
   // Handled by ContentsLayoutManager.
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -1008,8 +1008,12 @@
   contents_web_view_ =
       contents_container->AddChildView(std::move(contents_web_view));
   contents_web_view_->set_is_primary_web_contents_for_window(true);
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   watermark_view_ = contents_container->AddChildView(
       std::make_unique<enterprise_watermark::WatermarkView>());
+#else
+  views::View* watermark_view_ = nullptr;
+#endif  // BUILDFLAG(ENTERPRISE_WATERMARK)
 
   contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
       devtools_web_view_, contents_web_view_, watermark_view_));
@@ -1127,7 +1131,7 @@
 
   // `watermark_view_` is a raw pointer to a child view, so it needs to be set
   // to null before `RemoveAllChildViews()` is called to avoid dangling.
-  watermark_view_ = nullptr;
+  views::View* watermark_view_ = nullptr;
 
   // Child views maintain PrefMember attributes that point to
   // OffTheRecordProfile's PrefService which gets deleted by ~Browser.
@@ -5599,11 +5603,13 @@
   }
 }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
 void BrowserView::ApplyWatermarkSettings(const std::string& watermark_text) {
   if (watermark_view_) {
     watermark_view_->SetString(watermark_text);
   }
 }
+#endif  // BUILDFLAG(ENTERPRISE_WATERMARK)
 
 #if BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
 void BrowserView::ApplyScreenshotSettings(bool allow) {
--- a/chrome/browser/enterprise/data_protection/data_protection_navigation_controller.cc
+++ b/chrome/browser/enterprise/data_protection/data_protection_navigation_controller.cc
@@ -10,6 +10,7 @@
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/tabs/public/tab_interface.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
+#include "components/enterprise/buildflags/buildflags.h"
 #include "content/public/browser/web_contents.h"
 
 namespace {
@@ -136,6 +137,7 @@
   }
 #endif  // BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   if (!settings.watermark_text.empty()) {
     browser_view->ApplyWatermarkSettings(settings.watermark_text);
   } else {
@@ -143,6 +145,7 @@
     // finishes loading.
     clear_watermark_text_on_page_load_ = true;
   }
+#endif  // BUILDFLAG(ENTERPRISE_WATERMARK)
 
   if (!on_delay_apply_data_protection_settings_if_empty_called_for_testing_
            .is_null()) {
@@ -174,7 +177,9 @@
     return;
   }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   browser_view->ApplyWatermarkSettings(settings.watermark_text);
+#endif
 
 #if BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
   browser_view->ApplyScreenshotSettings(settings.allow_screenshots);
@@ -220,10 +225,12 @@
   if (!browser_view) {
     return;
   }
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   if (clear_watermark_text_on_page_load_) {
     browser_view->ApplyWatermarkSettings(std::string());
     clear_watermark_text_on_page_load_ = false;
   }
+#endif
 
 #if BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
   if (clear_screenshot_protection_on_page_load_) {
