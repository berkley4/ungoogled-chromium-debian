--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -833,9 +833,11 @@
     return web_app_frame_toolbar();
   }
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   enterprise_watermark::WatermarkView* get_watermark_view_for_testing() {
     return watermark_view_;
   }
+#endif
 
   void set_on_delay_apply_data_protection_settings_if_empty_called_for_testing(
       base::OnceClosure closure) {
@@ -1231,8 +1233,10 @@
   bool clear_screenshot_protection_on_page_load_ = false;
 #endif
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
   // The view that overlays a watermark on the contents container.
   raw_ptr<enterprise_watermark::WatermarkView> watermark_view_ = nullptr;
+#endif
 
   // The view managing the devtools and contents positions.
   // Handled by ContentsLayoutManager.
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -940,6 +940,8 @@
     watermark_view_ = contents_container->AddChildView(
         std::make_unique<enterprise_watermark::WatermarkView>());
   }
+#else
+  views::View* watermark_view_ = nullptr;
 #endif  // BUILDFLAG(ENTERPRISE_WATERMARK)
 
   contents_container->SetLayoutManager(std::make_unique<ContentsLayoutManager>(
@@ -5463,6 +5465,7 @@
 #if BUILDFLAG(ENTERPRISE_WATERMARK) || \
     BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
 
+#if BUILDFLAG(ENTERPRISE_WATERMARK)
 void BrowserView::ApplyDataProtectionSettings(
     base::WeakPtr<content::WebContents> expected_web_contents,
     const enterprise_data_protection::UrlSettings& settings) {
@@ -5480,6 +5483,7 @@
   ApplyScreenshotSettings(settings.allow_screenshots);
 #endif  // BUILDFLAG(ENTERPRISE_SCREENSHOT_PROTECTION)
 }
+#endif
 
 #if BUILDFLAG(ENTERPRISE_WATERMARK)
 void BrowserView::ApplyWatermarkSettings(const std::string& watermark_text) {
