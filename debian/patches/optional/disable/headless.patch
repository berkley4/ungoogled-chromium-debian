--- a/BUILD.gn
+++ b/BUILD.gn
@@ -795,7 +795,7 @@
       deps += [ "//native_client_sdk/src:nacl_core_sdk" ]
     }
 
-    if (((is_linux || is_chromeos) && use_ozone) || is_fuchsia) {
+    if ((is_chromeos && use_ozone) || is_fuchsia) {
       deps += [
         "//headless:headless_non_renderer",
         "//headless:headless_tests",
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -301,7 +301,6 @@
           "//content/public/app",
 
           # For headless mode.
-          "//headless:headless_shell_lib",
         ]
 
         public_deps = [
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -2023,7 +2023,6 @@
     # should be added to browser_generated_files.
     ":browser_public_dependencies",
     "//chrome/browser/google",
-    "//chrome/browser/headless",
     "//chrome/browser/profiles",
     "//chrome/browser/resource_coordinator:tab_lifecycle_observer",
     "//chrome/browser/ui/tabs:tab_enums",
@@ -2229,7 +2228,6 @@
     "//components/flags_ui",
     "//components/gcm_driver",
     "//components/handoff",
-    "//components/headless/select_file_dialog",
     "//components/heap_profiling/in_process",
     "//components/heap_profiling/in_process:mojom",
     "//components/heavy_ad_intervention",
@@ -3927,8 +3925,6 @@
       "first_run/first_run_internal.h",
       "font_family_cache.cc",
       "font_family_cache.h",
-      "headless/chrome_browser_main_extra_parts_headless.cc",
-      "headless/chrome_browser_main_extra_parts_headless.h",
       "hid/chrome_hid_delegate.cc",
       "hid/chrome_hid_delegate.h",
       "hid/hid_chooser_context.cc",
@@ -4588,8 +4584,6 @@
       "//components/feedback",
       "//components/feedback/content:factory",
       "//components/feedback/redaction_tool",
-      "//components/headless/clipboard",
-      "//components/headless/policy",
       "//components/image_fetcher/core",
       "//components/keep_alive_registry",
       "//components/live_caption",
@@ -7326,7 +7320,7 @@
     ]
   }
 
-  if (is_win || is_mac || is_linux) {
+  if (is_win || is_mac) {
     deps += [ "//chrome/browser/headless:metrics" ]
   }
 
@@ -7398,7 +7392,6 @@
     deps += [
       "//chrome/common/printing",
       "//components/printing/browser",
-      "//components/printing/browser/headless",
       "//components/printing/browser/print_to_pdf",
       "//components/services/print_compositor/public/cpp",
       "//components/services/print_compositor/public/mojom",
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -424,7 +424,6 @@
     # New dependencies inside of //chrome/browser that generate header files
     # should be added to //chrome/browser:browser_generated_files.
     "//chrome/browser:browser_public_dependencies",
-    "//chrome/browser/headless",
     "//chrome/browser/ui/tabs:tab_enums",
   ]
 
@@ -2008,7 +2007,6 @@
       "//chrome/browser/companion/text_finder",
       "//chrome/browser/companion/visual_query",
       "//chrome/browser/feedback:feedback_enum",
-      "//chrome/browser/headless:command_processor",
       "//chrome/browser/image_editor",
       "//chrome/browser/image_editor:image_editor_component_util",
       "//chrome/browser/lens/region_search",
@@ -2043,7 +2041,6 @@
       "//components/endpoint_fetcher:endpoint_fetcher",
       "//components/enterprise/common:files_scan_data",
       "//components/feedback/proto",
-      "//components/headless/policy",
       "//components/history_embeddings",
       "//components/keep_alive_registry",
       "//components/manta",
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -1788,7 +1788,6 @@
       "//chrome/browser/dips:browser_tests",
       "//chrome/browser/favicon",
       "//chrome/browser/first_party_sets",
-      "//chrome/browser/headless:browser_tests",
       "//chrome/browser/icon_transcoder:browser_tests",
       "//chrome/browser/image_decoder:browser_tests",
       "//chrome/browser/image_fetcher",
@@ -3387,7 +3386,6 @@
             "../browser/devtools/protocol/devtools_printtopdf_browsertest.cc",
           ]
           deps += [
-            "//components/headless/test",
             "//components/printing/browser",
             "//pdf",
           ]
--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -17,14 +17,11 @@
 #include "build/build_config.h"
 #include "chrome/app/chrome_main_delegate.h"
 #include "chrome/app/startup_timestamps.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_result_codes.h"
 #include "chrome/common/chrome_switches.h"
 #include "content/public/app/content_main.h"
 #include "content/public/common/content_switches.h"
-#include "headless/public/headless_shell.h"
-#include "headless/public/switches.h"
 
 #if BUILDFLAG(IS_MAC)
 #include "chrome/app/chrome_main_mac.h"
@@ -54,8 +51,7 @@
 #define DLLEXPORT __declspec(dllexport)
 #endif  // BUILDFLAG(IS_WIN)
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_MAC) || \
-    BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
 #define ENABLE_OLD_HEADLESS
 #endif
 
@@ -199,25 +195,15 @@
   // function, which are now redundant.
   base::PoissonAllocationSampler::Init();
 
-  // Chrome-specific process modes.
-  std::unique_ptr<headless::HeadlessModeHandle> headless_mode_handle;
-  if (headless::IsHeadlessMode()) {
-    if (command_line->GetArgs().size() > 1) {
-      LOG(ERROR) << "Multiple targets are not supported in headless mode.";
-      return chrome::RESULT_CODE_UNSUPPORTED_PARAM;
-    }
-    headless_mode_handle = headless::InitHeadlessMode();
-  } else {
 #ifdef ENABLE_OLD_HEADLESS
-    if (headless::IsOldHeadlessMode()) {
-      ShowOldHeadlessWarningMaybe(command_line);
+  if (headless::IsOldHeadlessMode()) {
+    ShowOldHeadlessWarningMaybe(command_line);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-      command_line->AppendSwitch(::headless::switches::kEnableCrashReporter);
+    command_line->AppendSwitch(::headless::switches::kEnableCrashReporter);
 #endif
-      return headless::HeadlessShellMain(std::move(params));
-    }
-#endif  // ENABLE_OLD_HEADLESS
+    return headless::HeadlessShellMain(std::move(params));
   }
+#endif  // ENABLE_OLD_HEADLESS
 
 #if BUILDFLAG(IS_MAC)
   // Gracefully exit if the system tried to launch the macOS notification helper
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -300,9 +300,11 @@
 #endif
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
 #include "chrome/browser/headless/headless_mode_metrics.h"  // nogncheck
 #include "chrome/browser/headless/headless_mode_util.h"     // nogncheck
 #include "components/headless/select_file_dialog/headless_select_file_dialog.h"
+#endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
 #include "ui/gfx/switches.h"
 #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
 
@@ -1394,7 +1396,7 @@
       *UrlLanguageHistogramFactory::GetForBrowserContext(profile));
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
   if (headless::IsHeadlessMode()) {
     headless::ReportHeadlessActionMetrics();
   }
@@ -1506,7 +1508,7 @@
   // In headless mode provide alternate SelectFileDialog factory overriding
   // any platform specific SelectFileDialog implementation that may have been
   // set.
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
   if (headless::IsHeadlessMode()) {
     headless::HeadlessSelectFileDialogFactory::SetUp();
   }
@@ -2052,7 +2054,7 @@
 
   // Drop the request if headless mode is in effect or the request is from
   // a headless Chrome process.
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
   if (headless::IsHeadlessMode() ||
       command_line.HasSwitch(switches::kHeadless)) {
     return false;
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -553,7 +553,6 @@
 #include "chrome/browser/devtools/devtools_window.h"
 #include "chrome/browser/direct_sockets/chrome_direct_sockets_delegate.h"
 #include "chrome/browser/enterprise/connectors/connectors_service.h"
-#include "chrome/browser/headless/chrome_browser_main_extra_parts_headless.h"
 #include "chrome/browser/media/unified_autoplay_config.h"
 #include "chrome/browser/media_effects/media_effects_manager_binder.h"
 #include "chrome/browser/metrics/usage_scenario/chrome_responsiveness_calculator_delegate.h"
@@ -1855,7 +1854,7 @@
           chrome::enterprise_util::ChromeBrowserMainExtraPartsEnterprise>());
 #endif
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_LINUX)
   main_parts->AddParts(
       std::make_unique<headless::ChromeBrowserMainExtraPartsHeadless>());
 #endif
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -15,7 +15,6 @@
 #include "chrome/browser/chrome_browser_interface_binders.h"
 #include "chrome/browser/chrome_content_browser_client_parts.h"
 #include "chrome/browser/content_settings/content_settings_manager_delegate.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/metrics/chrome_metrics_service_accessor.h"
 #include "chrome/browser/net/net_error_tab_helper.h"
 #include "chrome/browser/net_benchmarking.h"
@@ -113,7 +112,6 @@
 
 #if BUILDFLAG(ENABLE_PRINTING)
 #include "chrome/browser/printing/print_view_manager_basic.h"
-#include "components/printing/browser/headless/headless_print_manager.h"
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 #include "chrome/browser/printing/print_view_manager.h"
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
@@ -559,10 +557,6 @@
           [](content::RenderFrameHost* render_frame_host,
              mojo::PendingAssociatedReceiver<printing::mojom::PrintManagerHost>
                  receiver) {
-            if (headless::IsHeadlessMode()) {
-              headless::HeadlessPrintManager::BindPrintManagerHost(
-                  std::move(receiver), render_frame_host);
-            } else {
 #if BUILDFLAG(IS_CHROMEOS)
               if (base::FeatureList::IsEnabled(
                       ::features::kPrintPreviewCrosPrimary)) {
@@ -584,7 +578,6 @@
               printing::PrintViewManagerBasic::BindPrintManagerHost(
                   std::move(receiver), render_frame_host);
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
-            }
           },
           &render_frame_host));
 #endif  // BUILDFLAG(ENABLE_PRINTING)
--- a/chrome/browser/first_run/first_run.cc
+++ b/chrome/browser/first_run/first_run.cc
@@ -26,7 +26,6 @@
 #include "chrome/browser/extensions/updater/extension_updater.h"
 #include "chrome/browser/first_run/first_run_internal.h"
 #include "chrome/browser/google/google_brand.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/importer/external_process_importer_host.h"
 #include "chrome/browser/importer/importer_list.h"
 #include "chrome/browser/importer/importer_progress_observer.h"
@@ -125,8 +124,6 @@
   ExternalProcessImporterHost* importer_host =
       new ExternalProcessImporterHost;
   // Don't show the warning dialog if import fails.
-  importer_host->set_headless();
-
   ImportEndedObserver observer;
   importer_host->set_observer(&observer);
   importer_host->StartImportSettings(source_profile,
@@ -405,10 +402,7 @@
   DCHECK(!user_data_dir.empty());
 
   if (initial_prefs.get()) {
-    // Don't show EULA when running in headless mode since this would
-    // effectively block the UI because there is no one to accept it.
-    if (!headless::IsHeadlessMode() &&
-        !internal::ShowPostInstallEULAIfNeeded(initial_prefs.get())) {
+    if (!internal::ShowPostInstallEULAIfNeeded(initial_prefs.get())) {
       return EULA_EXIT_NOW;
     }
 
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -147,7 +147,6 @@
 #include "chrome/browser/web_applications/policy/web_app_settings_policy_handler.h"
 #include "components/enterprise/connectors/connectors_prefs.h"
 #include "components/enterprise/connectors/enterprise_connectors_policy_handler.h"
-#include "components/headless/policy/headless_mode_policy_handler.h"
 #include "components/lens/lens_overlay_permission_utils.h"
 #include "components/media_router/common/pref_names.h"
 #endif  // BUILDFLAG(IS_ANDROID)
@@ -2367,7 +2366,6 @@
                                             base::Value::Type::BOOLEAN)));
 
   handlers->AddHandler(std::make_unique<GuestModePolicyHandler>());
-  handlers->AddHandler(std::make_unique<headless::HeadlessModePolicyHandler>());
   handlers->AddHandler(std::make_unique<DeveloperToolsPolicyHandler>());
   handlers->AddHandler(
       std::make_unique<DownloadAutoOpenPolicyHandler>(chrome_schema));
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -303,7 +303,6 @@
 #include "chrome/browser/ui/webui/side_panel/read_anything/read_anything_prefs.h"
 #include "chrome/browser/ui/webui/tab_search/tab_search_prefs.h"
 #include "chrome/browser/upgrade_detector/upgrade_detector.h"
-#include "components/headless/policy/headless_mode_prefs.h"
 #include "components/lens/lens_overlay_permission_utils.h"
 #include "components/live_caption/live_caption_controller.h"
 #include "components/live_caption/live_translate_controller.h"
@@ -1544,7 +1543,6 @@
 #else   // BUILDFLAG(IS_ANDROID)
   enterprise_connectors::RegisterLocalStatePrefs(registry);
   gcm::RegisterPrefs(registry);
-  headless::RegisterPrefs(registry);
   IntranetRedirectDetector::RegisterPrefs(registry);
   media_router::RegisterLocalStatePrefs(registry);
   metrics::TabStatsTracker::RegisterPrefs(registry);
--- a/chrome/browser/printing/printing_init.cc
+++ b/chrome/browser/printing/printing_init.cc
@@ -4,9 +4,7 @@
 
 #include "chrome/browser/printing/printing_init.h"
 
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "components/embedder_support/user_agent_utils.h"
-#include "components/printing/browser/headless/headless_print_manager.h"
 #include "components/printing/browser/print_manager_utils.h"
 #include "content/public/browser/web_contents.h"
 #include "printing/buildflags/buildflags.h"
@@ -35,19 +33,12 @@
 #endif
 
 void InitializePrintingForWebContents(content::WebContents* web_contents) {
-  // Headless mode uses a minimalistic Print Manager implementation that
-  // shortcuts most of the callbacks providing only print to PDF
-  // functionality.
-  if (headless::IsHeadlessMode()) {
-    headless::HeadlessPrintManager::CreateForWebContents(web_contents);
-  } else {
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
-    PrintViewManager::CreateForWebContents(web_contents);
-    PdfNupConverterClient::CreateForWebContents(web_contents);
+  PrintViewManager::CreateForWebContents(web_contents);
+  PdfNupConverterClient::CreateForWebContents(web_contents);
 #else
-    PrintViewManagerBasic::CreateForWebContents(web_contents);
+  PrintViewManagerBasic::CreateForWebContents(web_contents);
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
-  }
   CreateCompositeClientIfNeeded(web_contents, embedder_support::GetUserAgent());
 }
 
--- a/chrome/browser/ui/startup/startup_browser_creator.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator.cc
@@ -139,9 +139,11 @@
 #endif  // BUILDFLAG(IS_WIN)
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
 #include "chrome/browser/headless/headless_mode_util.h"
-#include "chrome/browser/ui/startup/web_app_info_recorder_utils.h"
 #include "components/headless/policy/headless_mode_policy.h"
+#endif  // if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+#include "chrome/browser/ui/startup/web_app_info_recorder_utils.h"
 #endif
 
 #if !BUILDFLAG(IS_CHROMEOS)
@@ -967,7 +969,7 @@
   TRACE_EVENT0("startup", "StartupBrowserCreator::ProcessCmdLineImpl");
   ComputeAndRecordLaunchMode(command_line);
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
   if (headless::IsHeadlessMode() &&
       headless::HeadlessModePolicy::IsHeadlessModeDisabled(
           g_browser_process->local_state())) {
--- a/chrome/browser/ui/startup/startup_browser_creator_impl.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator_impl.cc
@@ -22,7 +22,6 @@
 #include "chrome/browser/custom_handlers/protocol_handler_registry_factory.h"
 #include "chrome/browser/defaults.h"
 #include "chrome/browser/first_run/first_run.h"
-#include "chrome/browser/headless/headless_command_processor.h"
 #include "chrome/browser/prefs/session_startup_pref.h"
 #include "chrome/browser/privacy_sandbox/privacy_sandbox_service.h"
 #include "chrome/browser/privacy_sandbox/privacy_sandbox_service_factory.h"
@@ -251,7 +250,7 @@
   CHECK(profile_);
 
   bool first_tab = true;
-  bool process_headless_commands = headless::ShouldProcessHeadlessCommands();
+  bool process_headless_commands = false;
   custom_handlers::ProtocolHandlerRegistry* registry =
       ProtocolHandlerRegistryFactory::GetForBrowserContext(profile_);
   for (auto& tab : tabs) {
@@ -278,35 +277,6 @@
     }
 #endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
 
-    // Headless mode is restricted to only one url in the command line, so
-    // just grab the first one assuming it's the target.
-    if (first_tab && process_headless_commands) {
-      std::unique_ptr<ScopedProfileKeepAlive> profile_keepalive;
-      if (!profile_->IsOffTheRecord()) {
-        profile_keepalive = std::make_unique<ScopedProfileKeepAlive>(
-            profile_, ProfileKeepAliveOrigin::kHeadlessCommand);
-      }
-      headless::ProcessHeadlessCommands(
-          profile_, tab.url,
-          base::BindOnce(
-              [](base::WeakPtr<Browser> browser,
-                 std::unique_ptr<ScopedProfileKeepAlive> profile_keepalive,
-                 headless::HeadlessCommandHandler::Result result) {
-                if (browser && browser->window()) {
-#if BUILDFLAG(IS_MAC)
-                  // On Macs Chrome keeps running after the last browser
-                  // window is closed which is not expected for headless
-                  // command execution, so explicitly allow application
-                  // to terminate after the browser window is closed.
-                  app_controller_mac::AllowApplicationToTerminate();
-#endif
-                  browser->window()->Close();
-                }
-              },
-              browser->AsWeakPtr(), std::move(profile_keepalive)));
-      continue;
-    }
-
     int add_types = first_tab ? AddTabTypes::ADD_ACTIVE : AddTabTypes::ADD_NONE;
     add_types |= AddTabTypes::ADD_FORCE_INDEX;
     if (tab.type == StartupTab::Type::kPinned)
--- a/chrome/browser/ui/startup/startup_tab_provider.cc
+++ b/chrome/browser/ui/startup/startup_tab_provider.cc
@@ -61,7 +61,7 @@
 #include "extensions/browser/extension_registry.h"
 #endif  // !BUILDFLAG(IS_ANDROID)
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
 #include "chrome/browser/headless/headless_mode_util.h"
 #endif
 
@@ -105,7 +105,7 @@
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
   // In ChromeOS, allow any URL pattern that matches chrome:// scheme.
   url_scheme_is_chrome = url.SchemeIs(content::kChromeUIScheme);
-#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
   // In Headless mode, allow any URL pattern that matches chrome:// scheme if
   // the user explicitly allowed it.
   if (headless::IsHeadlessMode() && url.SchemeIs(content::kChromeUIScheme)) {
--- a/chrome/browser/ui/views/frame/browser_frame.cc
+++ b/chrome/browser/ui/views/frame/browser_frame.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/app_mode/app_mode_utils.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/themes/custom_theme_supplier.h"
 #include "chrome/browser/themes/theme_service.h"
@@ -133,7 +132,7 @@
   views::Widget::InitParams params = native_browser_frame_->GetWidgetParams();
   params.name = "BrowserFrame";
   params.delegate = browser_view_;
-  params.headless_mode = headless::IsHeadlessMode();
+  params.headless_mode = false;
 
   Browser* browser = browser_view_->browser();
   if (browser->is_type_picture_in_picture()) {
--- a/chrome/browser/ui/views/policy/enterprise_startup_dialog_view.cc
+++ b/chrome/browser/ui/views/policy/enterprise_startup_dialog_view.cc
@@ -14,7 +14,6 @@
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "chrome/app/vector_icons/vector_icons.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/ui/views/chrome_layout_provider.h"
 #include "chrome/grit/branded_strings.h"
 #include "chrome/grit/theme_resources.h"
@@ -96,55 +95,6 @@
 END_METADATA
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 
-// Alternate implementation of the EnterpriseStartupDialog which is used when
-// the headless mode is in effect. It does not display anything and when error
-// is set immediately calls back with not accepted condition.
-class HeadlessEnterpriseStartupDialogImpl : public EnterpriseStartupDialog {
- public:
-  explicit HeadlessEnterpriseStartupDialogImpl(DialogResultCallback callback)
-      : callback_(std::move(callback)) {}
-
-  HeadlessEnterpriseStartupDialogImpl(
-      const HeadlessEnterpriseStartupDialogImpl&) = delete;
-  HeadlessEnterpriseStartupDialogImpl& operator=(
-      const HeadlessEnterpriseStartupDialogImpl&) = delete;
-
-  ~HeadlessEnterpriseStartupDialogImpl() override {
-    if (callback_) {
-      // ChromeBrowserCloudManagementRegisterWatcher dismisses the dialog
-      // without displaying an error messgae (in which case we would not
-      // have the outstanding callback) in case of successful enrollment,
-      // so allow it to show the browser window using the callback.
-      std::move(callback_).Run(/*was_accepted=*/false,
-                               /*can_show_browser_window_=*/true);
-    }
-  }
-
-  // Override EnterpriseStartupDialog
-  void DisplayLaunchingInformationWithThrobber(
-      const std::u16string& information) override {}
-
-  void DisplayErrorMessage(
-      const std::u16string& error_message,
-      const std::optional<std::u16string>& accept_button) override {
-    if (callback_) {
-      // In headless mode the dialog is invisible, therefore there is
-      // no one to accept or dismiss it. So just dismiss the dialog
-      // right away without accepting the prompt and not allowing
-      // browser to show its window.
-      base::SingleThreadTaskRunner::GetCurrentDefault()->PostTask(
-          FROM_HERE,
-          base::BindOnce(std::move(callback_), /*was_accepted=*/false,
-                         /*can_show_browser_window_=*/false));
-    }
-  }
-
-  bool IsShowing() override { return true; }
-
- private:
-  DialogResultCallback callback_;
-};
-
 }  // namespace
 
 EnterpriseStartupDialogView::EnterpriseStartupDialogView(
@@ -335,13 +285,6 @@
 // static
 std::unique_ptr<EnterpriseStartupDialog>
 EnterpriseStartupDialog::CreateAndShowDialog(DialogResultCallback callback) {
-  // If running in headless mode use an alternate version of the enterprise
-  // startup dialog.
-  if (headless::IsHeadlessMode()) {
-    return std::make_unique<HeadlessEnterpriseStartupDialogImpl>(
-        std::move(callback));
-  }
-
   return std::make_unique<EnterpriseStartupDialogImpl>(std::move(callback));
 }
 
--- a/chrome/browser/user_education/user_education_service_factory.cc
+++ b/chrome/browser/user_education/user_education_service_factory.cc
@@ -9,7 +9,6 @@
 
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
-#include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profiles_state.h"
 #include "chrome/browser/user_education/browser_feature_promo_storage_service.h"
@@ -129,9 +128,6 @@
     return false;
   }
 #endif
-  if (headless::IsHeadlessMode()) {
-    return false;
-  }
   return true;
 #endif  // BUILDFLAG(CHROME_FOR_TESTING)
 }
--- a/components/BUILD.gn
+++ b/components/BUILD.gn
@@ -118,7 +118,6 @@
       "test/data/explore_sites/",
       "test/data/feed/",
       "test/data/fenced_frames/",
-      "test/data/headless/",
       "test/data/history/",
       "test/data/html_viewer/",
       "test/data/json_schema/",
@@ -569,7 +568,6 @@
       "//components/content_settings/browser/ui:unit_tests",
       "//components/facilitated_payments/content/renderer:unit_tests",
       "//components/fingerprinting_protection_filter/browser:unit_tests",
-      "//components/headless/test:unit_tests",
       "//components/media_router/browser:unit_tests",
       "//components/media_router/common:unit_tests",
       "//components/media_router/common/providers/cast/channel:unit_tests",
