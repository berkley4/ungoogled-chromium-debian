From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Mon, 21 Feb 2022 01:24:11 +0100
Subject: Allow building without supervised users

License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 chrome/android/BUILD.gn                                     | 1 -
 chrome/android/chrome_java_sources.gni                      | 1 -
 .../chrome/browser/feed/FeedSurfaceCoordinator.java         | 5 +----
 chrome/browser/BUILD.gn                                     | 6 ------
 chrome/browser/about_flags.cc                               | 2 ++
 .../browser/extensions/api/settings_private/prefs_util.cc   | 2 ++
 chrome/browser/profiles/profile_impl.cc                     | 4 ++++
 chrome/browser/profiles/profile_manager.cc                  | 4 ++++
 chrome/browser/ui/webui/managed_ui_handler.cc               | 2 ++
 chrome/browser/ui/webui/management/management_ui_handler.cc | 2 ++
 components/supervised_user/buildflags.gni                   | 6 +-----
 .../core/browser/supervised_user_pref_store.cc              | 1 +
 .../core/browser/supervised_user_preferences.cc             | 2 +-
 .../supervised_user/core/browser/supervised_user_utils.cc   | 4 ++++
 components/supervised_user/core/common/pref_names.h         | 4 ++++
 .../core/common/supervised_user_constants.cc                | 2 ++
 16 files changed, 30 insertions(+), 18 deletions(-)

--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -7895,6 +7895,7 @@
 #endif
 
 #if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
     {"enable-family-link-extensions-permissions",
      flag_descriptions::
          kEnableExtensionsPermissionsForSupervisedUsersOnDesktopName,
@@ -7905,6 +7906,7 @@
          supervised_user::
              kEnableExtensionsPermissionsForSupervisedUsersOnDesktop)},
 #endif
+#endif
 
     {"notification-scheduler", flag_descriptions::kNotificationSchedulerName,
      flag_descriptions::kNotificationSchedulerDescription, kOsAndroid,
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -1027,9 +1027,11 @@
       settings_api::PrefType::kBoolean;
 #endif
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   // Supervised Users.  This setting is queried in our Tast tests (b/241943380).
   (*s_allowlist)[::prefs::kSupervisedUserExtensionsMayRequestPermissions] =
       settings_api::PrefType::kBoolean;
+#endif
 
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
   (*s_allowlist)[::prefs::kUseAshProxy] = settings_api::PrefType::kBoolean;
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -679,10 +679,12 @@
     prefs->SetTime(prefs::kProfileCreationTime, path_creation_time_);
 
   pref_change_registrar_.Init(prefs);
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   pref_change_registrar_.Add(
       prefs::kSupervisedUserId,
       base::BindRepeating(&ProfileImpl::UpdateSupervisedUserIdInStorage,
                           base::Unretained(this)));
+#endif
 
   // Changes in the profile avatar.
   pref_change_registrar_.Add(
@@ -1624,11 +1626,13 @@
 }
 
 void ProfileImpl::UpdateSupervisedUserIdInStorage() {
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   ProfileManager* profile_manager = g_browser_process->profile_manager();
   ProfileAttributesEntry* entry = profile_manager->GetProfileAttributesStorage()
                                       .GetProfileAttributesWithPath(GetPath());
   if (entry)
     entry->SetSupervisedUserId(GetPrefs()->GetString(prefs::kSupervisedUserId));
+#endif
 }
 
 void ProfileImpl::UpdateNameInStorage() {
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -1208,6 +1208,7 @@
     profile->GetPrefs()->SetString(prefs::kProfileName, profile_name);
   }
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   bool force_supervised_user_id =
 #if BUILDFLAG(IS_CHROMEOS_ASH)
@@ -1225,6 +1226,7 @@
     profile->GetPrefs()->SetString(prefs::kSupervisedUserId,
                                    supervised_user_id);
   }
+#endif
 #if !BUILDFLAG(IS_ANDROID)
   if (profile->IsNewProfile()) {
     profile->GetPrefs()->SetBoolean(prefs::kHasSeenWelcomePage, false);
@@ -2010,8 +2012,10 @@
   init_params.icon_index =
       profile->GetPrefs()->GetInteger(prefs::kProfileAvatarIndex);
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   init_params.supervised_user_id =
       profile->GetPrefs()->GetString(prefs::kSupervisedUserId);
+#endif
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   user_manager::User* user =
--- a/chrome/browser/ui/webui/managed_ui_handler.cc
+++ b/chrome/browser/ui/webui/managed_ui_handler.cc
@@ -90,9 +90,11 @@
     policy_service->AddObserver(domain, this);
   }
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   pref_registrar_.Add(prefs::kSupervisedUserId,
                       base::BindRepeating(&ManagedUIHandler::NotifyIfChanged,
                                           base::Unretained(this)));
+#endif
 }
 
 void ManagedUIHandler::RemoveObservers() {
--- a/chrome/browser/ui/webui/management/management_ui_handler.cc
+++ b/chrome/browser/ui/webui/management/management_ui_handler.cc
@@ -1500,10 +1500,12 @@
 
   pref_registrar_.Init(profile->GetPrefs());
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   pref_registrar_.Add(
       prefs::kSupervisedUserId,
       base::BindRepeating(&ManagementUIHandler::UpdateManagedState,
                           base::Unretained(this)));
+#endif
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   pref_registrar_.Add(
--- a/components/supervised_user/core/browser/supervised_user_pref_store.cc
+++ b/components/supervised_user/core/browser/supervised_user_pref_store.cc
@@ -117,6 +117,7 @@
 
 void SupervisedUserPrefStore::OnNewSettingsAvailable(
     const base::Value::Dict& settings) {
+  if ((true)) return;
   std::unique_ptr<PrefValueMap> old_prefs = std::move(prefs_);
   prefs_ = std::make_unique<PrefValueMap>();
   if (!settings.empty()) {
--- a/components/supervised_user/core/browser/supervised_user_preferences.cc
+++ b/components/supervised_user/core/browser/supervised_user_preferences.cc
@@ -187,7 +187,7 @@
 }
 
 bool IsSubjectToParentalControls(const PrefService& pref_service) {
-  return pref_service.GetString(prefs::kSupervisedUserId) == kChildAccountSUID;
+  return false;
 }
 
 bool AreExtensionsPermissionsEnabled(const PrefService& pref_service) {
--- a/components/supervised_user/core/browser/supervised_user_utils.cc
+++ b/components/supervised_user/core/browser/supervised_user_utils.cc
@@ -97,11 +97,15 @@
 }
 
 bool AreWebFilterPrefsDefault(const PrefService& pref_service) {
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   return pref_service
              .FindPreference(prefs::kDefaultSupervisedUserFilteringBehavior)
              ->IsDefaultValue() ||
          pref_service.FindPreference(prefs::kSupervisedUserSafeSites)
              ->IsDefaultValue();
+#else
+  return true;
+#endif
 }
 
 bool EmitLogRecordHistograms(
--- a/components/supervised_user/core/common/pref_names.h
+++ b/components/supervised_user/core/common/pref_names.h
@@ -5,8 +5,10 @@
 #ifndef COMPONENTS_SUPERVISED_USER_CORE_COMMON_PREF_NAMES_H_
 #define COMPONENTS_SUPERVISED_USER_CORE_COMMON_PREF_NAMES_H_
 
+#include "components/supervised_user/core/common/buildflags.h"
 #include "extensions/buildflags/buildflags.h"
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
 namespace prefs {
 
 // A bool pref that keeps whether the child status for this profile was already
@@ -151,4 +153,6 @@
 
 }  // namespace prefs
 
+#endif // BUILDFLAG(ENABLE_SUPERVISED_USERS)
+
 #endif  // COMPONENTS_SUPERVISED_USER_CORE_COMMON_PREF_NAMES_H_
--- a/components/supervised_user/core/common/supervised_user_constants.cc
+++ b/components/supervised_user/core/common/supervised_user_constants.cc
@@ -69,6 +69,7 @@
 
 const char kChromeOSPasswordData[] = "chromeos-password-data";
 
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
 const char* const kCustodianInfoPrefs[] = {
     prefs::kSupervisedUserCustodianName,
     prefs::kSupervisedUserCustodianEmail,
@@ -81,6 +82,7 @@
     prefs::kSupervisedUserSecondCustodianProfileURL,
     prefs::kSupervisedUserSecondCustodianProfileImageURL,
 };
+#endif
 
 const base::FilePath::CharType kSupervisedUserSettingsFilename[] =
     FILE_PATH_LITERAL("Managed Mode Settings");
