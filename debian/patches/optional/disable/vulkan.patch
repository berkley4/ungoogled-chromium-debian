--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -27,6 +27,7 @@
 import("//gpu/vulkan/features.gni")
 import("//media/media_options.gni")
 import("//ppapi/buildflags/buildflags.gni")
+import("//third_party/angle/gni/angle.gni")
 import("//third_party/blink/public/public_features.gni")
 import("//third_party/widevine/cdm/widevine.gni")
 import("//tools/resources/generate_resource_allowlist.gni")
@@ -1742,7 +1743,7 @@
       if (is_linux && enable_swiftshader_vulkan) {
         deps += [ ":swiftshader_vk_symbols" ]
       }
-      if (!is_chromeos) {
+      if (!is_chromeos && angle_enable_vulkan) {
         deps += [ ":angle_libvulkan_symbols" ]
       }
       if (build_with_internal_optimization_guide) {
@@ -1813,7 +1814,7 @@
 
       deps = [ "//third_party/angle:libGLESv2" ]
     }
-    if (!is_chromeos) {
+    if (!is_chromeos && angle_enable_vulkan) {
       extract_symbols("angle_libvulkan_symbols") {
         binary = "$root_out_dir/libvulkan.so.1"
 
--- a/components/exo/wayland/BUILD.gn
+++ b/components/exo/wayland/BUILD.gn
@@ -398,12 +398,17 @@
 
   deps = [
     "//base",
-    "//gpu/vulkan:vulkan",
-    "//gpu/vulkan/init:init",
     "//ui/gl",
     "//ui/gl/init",
   ]
 
+  if (enable_vulkan) {
+    deps += [
+      "//gpu/vulkan:vulkan",
+      "//gpu/vulkan/init:init",
+    ]
+  }
+
   public_deps = [
     "//components/exo/wayland/protocol:aura_output_management_protocol",
     "//components/exo/wayland/protocol:aura_shell_protocol",
--- a/ui/gl/gl_switches.cc
+++ b/ui/gl/gl_switches.cc
@@ -13,6 +13,7 @@
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
 #include <vulkan/vulkan_core.h>
+#include "gpu/vulkan/buildflags.h"
 #include "third_party/angle/src/gpu_info_util/SystemInfo.h"  // nogncheck
 #endif
 
@@ -278,6 +279,7 @@
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 bool IsDefaultANGLEVulkan() {
+#if BUILDFLAG(ENABLE_VULKAN)
 #if defined(MEMORY_SANITIZER)
   return false;
 #else  // !defined(MEMORY_SANITIZER)
@@ -319,6 +321,9 @@
 #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
   return base::FeatureList::IsEnabled(kDefaultANGLEVulkan);
 #endif  // !defined(MEMORY_SANITIZER)
+#else   // !BUILDFLAG(ENABLE_VULKAN)
+  return false;
+#endif  // BUILDFLAG(ENABLE_VULKAN)
 }
 
 // Use waitable swap chain on Windows to reduce display latency.
