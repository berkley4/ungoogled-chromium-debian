--- a/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ b/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -41,7 +41,6 @@
 #include "media/gpu/gpu_video_encode_accelerator_helpers.h"
 #include "media/gpu/h264_dpb.h"
 #include "media/gpu/macros.h"
-#include "media/gpu/vaapi/av1_vaapi_video_encoder_delegate.h"
 #include "media/gpu/vaapi/h264_vaapi_video_encoder_delegate.h"
 #include "media/gpu/vaapi/va_surface.h"
 #include "media/gpu/vaapi/vaapi_common.h"
@@ -203,7 +202,7 @@
 
   const VideoCodec codec = VideoCodecProfileToVideoCodec(config.output_profile);
   if (codec != VideoCodec::kH264 && codec != VideoCodec::kVP8 &&
-      codec != VideoCodec::kVP9 && codec != VideoCodec::kAV1) {
+      codec != VideoCodec::kVP9) {
     MEDIA_LOG(ERROR, media_log.get())
         << "Unsupported profile: " << GetProfileName(config.output_profile);
     return false;
@@ -296,7 +295,6 @@
         break;
       case VideoCodec::kVP8:
       case VideoCodec::kVP9:
-      case VideoCodec::kAV1:
         mode = VaapiWrapper::kEncodeConstantQuantizationParameter;
         break;
       default:
@@ -359,12 +357,6 @@
             vaapi_wrapper_, error_cb);
       }
       break;
-    case VideoCodec::kAV1:
-      if (!IsConfiguredForTesting()) {
-        encoder_ = std::make_unique<AV1VaapiVideoEncoderDelegate>(
-            vaapi_wrapper_, error_cb);
-      }
-      break;
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(output_codec_);
       return;
@@ -836,10 +828,6 @@
     case VideoCodec::kVP9:
       picture = new VaapiVP9Picture(std::move(reconstructed_surface));
       break;
-    case VideoCodec::kAV1:
-      picture = new VaapiAV1Picture(/*display_va_surface=*/nullptr,
-                                    std::move(reconstructed_surface));
-      break;
     default:
       return nullptr;
   }
--- a/media/gpu/BUILD.gn
+++ b/media/gpu/BUILD.gn
@@ -391,10 +391,7 @@
       "vp9_svc_layers_stateful.h",
     ]
     configs += [ "//third_party/libvpx:libvpx_config" ]
-    deps += [
-      "//third_party/libaom:libaomrc",
-      "//third_party/libvpx:libvpxrc",
-    ]
+    deps += [ "//third_party/libvpx:libvpxrc" ]
   }
   if (use_libgav1_parser) {
     sources += [
--- a/media/gpu/vaapi/BUILD.gn
+++ b/media/gpu/vaapi/BUILD.gn
@@ -34,8 +34,6 @@
   sources = [
     "av1_vaapi_video_decoder_delegate.cc",
     "av1_vaapi_video_decoder_delegate.h",
-    "av1_vaapi_video_encoder_delegate.cc",
-    "av1_vaapi_video_encoder_delegate.h",
     "h264_vaapi_video_decoder_delegate.cc",
     "h264_vaapi_video_decoder_delegate.h",
     "h264_vaapi_video_encoder_delegate.cc",
@@ -97,7 +95,6 @@
     "//media/gpu/chromeos:common",
     "//media/parsers",
     "//mojo/public/cpp/bindings",
-    "//third_party/libaom:libaomrc",
     "//third_party/libvpx:libvpxrc",
     "//third_party/libyuv",
     "//ui/gfx",
