From bb3e54790c076e1131bc59ba8b92b64cf8453ef3 Mon Sep 17 00:00:00 2001
From: Owen Min <zmin@chromium.org>
Date: Fri, 4 Mar 2022 21:10:15 +0000
Subject: [PATCH] Merge Using legacy JSON parser option for policy loading on
 Linux

Merge into M99 Stable.

With crrev.com/c/3289910, the default json parser rule has been set to
RFC 8259 without Chromium exceptions. However, this broke the policy
loader on Linux as we used to support those non-standard rules as policy
input.

Add JSON_PARSE_CHROMIUM_EXTENSIONS option to revert back to the old
policy loading behavior on Linux.

(cherry picked from commit 400cf6c51ffc961f430ace0433afa365d532cb4c)

Bug: 1302287
Change-Id: I2a53b599f5d737909eda69da098c0c506498d2cf
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3497513
Reviewed-by: Julian Pastarmov <pastarmovj@chromium.org>
Commit-Queue: Owen Min <zmin@chromium.org>
Cr-Original-Commit-Position: refs/heads/main@{#976749}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3503276
Auto-Submit: Owen Min <zmin@chromium.org>
Commit-Queue: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Cr-Commit-Position: refs/branch-heads/4844@{#974}
Cr-Branched-From: 007241ce2e6c8e5a7b306cc36c730cd07cd38825-refs/heads/main@{#961656}
---
 .../core/common/config_dir_policy_loader.cc   |  5 +--
 .../config_dir_policy_loader_unittest.cc      | 35 +++++++++++++++++--
 2 files changed, 35 insertions(+), 5 deletions(-)

--- a/components/policy/core/common/config_dir_policy_loader.cc
+++ b/components/policy/core/common/config_dir_policy_loader.cc
@@ -138,8 +138,9 @@
   // to existing keys, but the ConfigDirPolicyProvider gives priority to the
   // last file in lexicographic order.
   for (const base::FilePath& config_file : base::Reversed(files)) {
-    JSONFileValueDeserializer deserializer(config_file,
-                                           base::JSON_ALLOW_TRAILING_COMMAS);
+    JSONFileValueDeserializer deserializer(
+        config_file, base::JSON_PARSE_CHROMIUM_EXTENSIONS |
+                         base::JSON_ALLOW_TRAILING_COMMAS);
     int error_code = 0;
     std::string error_msg;
     std::unique_ptr<base::Value> value =
--- a/components/policy/core/common/config_dir_policy_loader_unittest.cc
+++ b/components/policy/core/common/config_dir_policy_loader_unittest.cc
@@ -19,7 +19,9 @@
 #include "components/policy/core/common/configuration_policy_provider_test.h"
 #include "components/policy/core/common/policy_bundle.h"
 #include "components/policy/core/common/policy_map.h"
+#include "components/policy/core/common/policy_namespace.h"
 #include "components/policy/core/common/policy_types.h"
+#include "components/policy/policy_constants.h"
 #include "components/strings/grit/components_strings.h"
 
 namespace policy {
@@ -28,6 +30,12 @@
 
 // Subdirectory of the config dir that contains mandatory policies.
 const base::FilePath::CharType kMandatoryPath[] = FILE_PATH_LITERAL("managed");
+// The policy input supports trailing comma and c++ styled comments.
+const char PolicyWithQuirks[] = R"({
+  // Some comments here.
+  "HomepageIsNewTabPage": true,
+  /* Some more comments here */
+})";
 
 class TestHarness : public PolicyProviderTestHarness {
  public:
@@ -60,9 +68,10 @@
   // JSON-encode a dictionary and write it to a file.
   void WriteConfigFile(const base::DictionaryValue& dict,
                        const std::string& file_name);
+  void WriteConfigFile(const std::string& data, const std::string& file_name);
 
-  // Returns a unique name for a policy file. Each subsequent call returns a new
-  // name that comes lexicographically after the previous one.
+  // Returns a unique name for a policy file. Each subsequent call returns a
+  // new name that comes lexicographically after the previous one.
   std::string NextConfigFileName();
 
   static PolicyProviderTestHarness* Create();
@@ -143,10 +152,15 @@
   std::string data;
   JSONStringValueSerializer serializer(&data);
   serializer.Serialize(dict);
+  WriteConfigFile(data, file_name);
+}
+
+void TestHarness::WriteConfigFile(const std::string& data,
+                                  const std::string& file_name) {
   const base::FilePath mandatory_dir(test_dir().Append(kMandatoryPath));
   ASSERT_TRUE(base::CreateDirectory(mandatory_dir));
   const base::FilePath file_path(mandatory_dir.AppendASCII(file_name));
-  ASSERT_EQ((int) data.size(),
+  ASSERT_EQ((int)data.size(),
             base::WriteFile(file_path, data.c_str(), data.size()));
 }
 
@@ -208,6 +222,21 @@
   EXPECT_TRUE(bundle->Equals(kEmptyBundle));
 }
 
+TEST_F(ConfigDirPolicyLoaderTest, ReadPrefsWithComments) {
+  harness_.WriteConfigFile(PolicyWithQuirks, "policies.json");
+  ConfigDirPolicyLoader loader(task_environment_.GetMainThreadTaskRunner(),
+                               harness_.test_dir(), POLICY_SCOPE_MACHINE);
+  std::unique_ptr<PolicyBundle> bundle(loader.Load());
+  ASSERT_TRUE(bundle.get());
+  PolicyBundle expected_bundle;
+  expected_bundle.Get(PolicyNamespace(POLICY_DOMAIN_CHROME, std::string()))
+      .Set(key::kHomepageIsNewTabPage, POLICY_LEVEL_MANDATORY,
+           POLICY_SCOPE_MACHINE, POLICY_SOURCE_PLATFORM, base::Value(true),
+           /*external_data_fetcher=*/nullptr);
+
+  EXPECT_TRUE(bundle->Equals(expected_bundle));
+}
+
 // Test merging values from different files.
 TEST_F(ConfigDirPolicyLoaderTest, ReadPrefsMergePrefs) {
   // Write a bunch of data files in order to increase the chance to detect the
