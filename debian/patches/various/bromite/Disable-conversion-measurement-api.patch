From: uazo <uazo@users.noreply.github.com>
Date: Mon, 15 Nov 2021 09:43:29 +0000
Subject: Disable conversion measurement api

Disable Conversion Measurement API by disabling the flag and removing
support for the AttributionReporting provider. it also removes
the handling of attributions via intents between apps.
This patch enforces the deactivation by preventing the report from
being sent and being saved to disk, although it is currently in uncalled code.

Original License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 .../browser/flags/android/chrome_feature_list.cc  |  4 ++--
 .../embedder_support/origin_trials/features.cc    |  8 ++++----
 .../render_view_context_menu_base.cc              |  3 ---
 .../aggregatable_report_sender.cc                 | 15 +++++++--------
 .../attribution_reporting/attribution_host.cc     |  1 +
 .../attribution_report_network_sender.cc          | 15 ++++++++-------
 content/browser/storage_partition_impl.cc         |  7 +------
 content/public/browser/navigation_controller.cc   |  1 -
 third_party/blink/common/features.cc              |  4 ++--
 .../platform/runtime_enabled_features.json5       |  7 +++++++
 10 files changed, 32 insertions(+), 33 deletions(-)

--- a/chrome/browser/flags/android/chrome_feature_list.cc
+++ b/chrome/browser/flags/android/chrome_feature_list.cc
@@ -519,8 +519,8 @@
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kAppToWebAttribution,
-             "AppToWebAttribution",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AppToWebAttribution",               // must be disabled
+             base::FEATURE_DISABLED_BY_DEFAULT);  // in Bromite
 
 BASE_FEATURE(kBackgroundThreadPool,
              "BackgroundThreadPool",
--- a/components/embedder_support/origin_trials/features.cc
+++ b/components/embedder_support/origin_trials/features.cc
@@ -14,11 +14,11 @@
 // Users from control group will have the feature disabled, excluding them
 // from the origin trial.
 BASE_FEATURE(kOriginTrialsSampleAPIThirdPartyAlternativeUsage,
-             "OriginTrialsSampleAPIThirdPartyAlternativeUsage",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "OriginTrialsSampleAPIThirdPartyAlternativeUsage",   // must be disabled
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Bromite
 
 BASE_FEATURE(kConversionMeasurementAPIAlternativeUsage,
-             "ConversionMeasurementAPIAlternativeUsage",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ConversionMeasurementAPIAlternativeUsage",          // must be disabled
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Bromite
 
 }  // namespace embedder_support
--- a/components/renderer_context_menu/render_view_context_menu_base.cc
+++ b/components/renderer_context_menu/render_view_context_menu_base.cc
@@ -486,9 +486,6 @@
 
   open_url_params.source_site_instance = site_instance_;
 
-  if (disposition != WindowOpenDisposition::OFF_THE_RECORD)
-    open_url_params.impression = params_.impression;
-
   source_web_contents_->OpenURL(open_url_params);
 }
 
--- a/content/browser/aggregation_service/aggregatable_report_sender.cc
+++ b/content/browser/aggregation_service/aggregatable_report_sender.cc
@@ -136,19 +136,18 @@
   // Allow bodies of non-2xx responses to be returned.
   simple_url_loader_ptr->SetAllowHttpErrorResults(true);
 
-  // Unretained is safe because the URLLoader is owned by `this` and will be
-  // deleted before `this`.
-  simple_url_loader_ptr->DownloadHeadersOnly(
-      url_loader_factory_.get(),
-      base::BindOnce(&AggregatableReportSender::OnReportSent,
-                     base::Unretained(this), std::move(it),
-                     std::move(callback)));
+  // this is never called on Bromite but nothing would be sent if it were
+  OnReportSent(std::move(it), std::move(callback), nullptr);
 }
 
 void AggregatableReportSender::OnReportSent(
     UrlLoaderList::iterator it,
     ReportSentCallback callback,
-    scoped_refptr<net::HttpResponseHeaders> headers) {
+    scoped_refptr<net::HttpResponseHeaders> headers) { // disable in Bromite
+  if ((true)) {
+    std::move(callback).Run(RequestStatus::kOk);
+    return;
+  }
   RequestStatus status;
 
   absl::optional<int> http_response_code;
--- a/content/browser/attribution_reporting/attribution_host.cc
+++ b/content/browser/attribution_reporting/attribution_host.cc
@@ -124,6 +124,7 @@
     return;
   }
 
+  if ((true)) return;
   AttributionManager* attribution_manager =
       AttributionManager::FromWebContents(web_contents());
   if (!attribution_manager)
--- a/content/browser/attribution_reporting/attribution_report_network_sender.cc
+++ b/content/browser/attribution_reporting/attribution_report_network_sender.cc
@@ -110,13 +110,8 @@
                    network::SimpleURLLoader::RETRY_ON_NAME_NOT_RESOLVED;
   simple_url_loader_ptr->SetRetryOptions(/*max_retries=*/1, retry_mode);
 
-  // Unretained is safe because the URLLoader is owned by |this| and will be
-  // deleted before |this|.
-  simple_url_loader_ptr->DownloadHeadersOnly(
-      url_loader_factory_.get(),
-      base::BindOnce(&AttributionReportNetworkSender::OnReportSent,
-                     base::Unretained(this), std::move(it), std::move(report),
-                     is_debug_report, std::move(sent_callback)));
+  // this is never called on Bromite but nothing would be sent if it were
+  OnReportSent(std::move(it), report, is_debug_report, std::move(sent_callback), nullptr);
 }
 
 void AttributionReportNetworkSender::OnReportSent(
@@ -125,6 +120,12 @@
     bool is_debug_report,
     ReportSentCallback sent_callback,
     scoped_refptr<net::HttpResponseHeaders> headers) {
+  if ((true)) {
+    std::move(sent_callback)
+        .Run(std::move(report),
+           SendResult(SendResult::Status::kSent, headers ? headers->response_code() : 200));
+    return;
+  }
   network::SimpleURLLoader* loader = it->get();
 
   // Consider a non-200 HTTP code as a non-internal error.
--- a/content/browser/storage_partition_impl.cc
+++ b/content/browser/storage_partition_impl.cc
@@ -1353,12 +1353,7 @@
 
   bucket_manager_ = std::make_unique<BucketManager>(this);
 
-  // The Conversion Measurement API is not available in Incognito mode.
-  if (!is_in_memory() &&
-      base::FeatureList::IsEnabled(blink::features::kConversionMeasurement)) {
-    attribution_manager_ = std::make_unique<AttributionManagerImpl>(
-        this, path, special_storage_policy_);
-  }
+  // The Conversion Measurement API is not available in Bromite.
 
   if (base::FeatureList::IsEnabled(blink::features::kInterestGroupStorage)) {
     // Auction worklets on non-Android use dedicated processes; on Android due
--- a/content/public/browser/navigation_controller.cc
+++ b/content/public/browser/navigation_controller.cc
@@ -39,7 +39,6 @@
       blob_url_loader_factory(input.blob_url_loader_factory),
       href_translate(input.href_translate),
       reload_type(input.reload_type),
-      impression(input.impression),
       is_pdf(input.is_pdf) {
 #if DCHECK_IS_ON()
   DCHECK(input.Valid());
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -177,6 +177,13 @@
 
   data: [
     {
+      // disable by default features by marking as
+      // depends_on: ["DisabledForBromite"]
+      // to work is needed to remove "origin_trial_feature_name"
+      // and "origin_trial_allows_third_party"
+      name: "DisabledForBromite",
+    },
+    {
       name: "AbortSignalThrowIfAborted",
       status: "stable",
     },
