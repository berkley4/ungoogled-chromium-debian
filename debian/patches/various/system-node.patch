description: call system nodejs
author: Michael Gilbert <mgilbert@debian.org>

--- a/tools/typescript/tsconfig_base.json
+++ b/tools/typescript/tsconfig_base.json
@@ -3,7 +3,7 @@
     "module": "ESNext",
     "target": "ESNext",
 
-    "noEmitOnError": true,
+    "noEmitOnError": false,
     "pretty": true,
 
     "incremental": true,
--- a/third_party/devtools-frontend/src/scripts/devtools_paths.py
+++ b/third_party/devtools-frontend/src/scripts/devtools_paths.py
@@ -37,13 +37,7 @@ def third_party_path():
 
 # This points to the node binary downloaded as part of the checkout.
 def node_path():
-    try:
-        old_sys_path = sys.path[:]
-        sys.path.append(path.join(third_party_path(), 'node'))
-        import node
-    finally:
-        sys.path = old_sys_path
-    return node.GetBinaryPath()
+    return '/usr/bin/nodejs'
 
 
 def devtools_root_path():
--- a/third_party/lottie/minify_lottie.py
+++ b/third_party/lottie/minify_lottie.py
@@ -12,16 +12,14 @@ _SRC_PATH = os.path.normpath(os.path.join(_HERE_PATH, '..', '..'))
 
 sys.path.append(os.path.join(_SRC_PATH, 'third_party', 'node'))
 import node
-import node_modules
 
 def main(argv):
   parser = argparse.ArgumentParser()
   parser.add_argument('--out_folder', required=True)
   args = parser.parse_args(argv)
 
-  node.RunNode([node_modules.PathToTerser(),
+  node.RunNode(['/usr/bin/uglifyjs.terser',
           os.path.join(_HERE_PATH, 'lottie_worker.js'),
-          '--ascii_only=true',
           '-b', 'beautify=false',
           '--compress',
           '--mangle', 'reserved=[\'$\',\'onmessage\',\'postMessage\']',
--- a/third_party/node/node.py
+++ b/third_party/node/node.py
@@ -11,17 +11,7 @@
 
 
 def GetBinaryPath():
-  # TODO: Node 16.0 will likely ship with an official universal node binary
-  # on macOS. Once node 16.0 is released, remove this special case here
-  # and use node-darwin-universal in the dict in the main return statement.
-  if platform.system() == 'Darwin' and platform.machine() == 'arm64':
-      return os.path.join(os_path.join(os_path.dirname(__file__), 'mac',
-                          'node-darwin-arm64', 'bin', 'node'))
-  return os_path.join(os_path.dirname(__file__), *{
-    'Darwin': ('mac', 'node-darwin-x64', 'bin', 'node'),
-    'Linux': ('linux', 'node-linux-x64', 'bin', 'node'),
-    'Windows': ('win', 'node.exe'),
-  }[platform.system()])
+  return '/usr/bin/nodejs'
 
 def RunNode(cmd_parts, stdout=None):
   cmd = [GetBinaryPath()] + cmd_parts
