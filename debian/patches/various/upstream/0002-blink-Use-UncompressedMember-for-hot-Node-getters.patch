From 3bb447b874cee6417918ea5ee35e04697f2846d9 Mon Sep 17 00:00:00 2001
From: Anton Bikineev <bikineev@chromium.org>
Date: Tue, 31 Jan 2023 10:41:39 +0000
Subject: [PATCH] blink: Use UncompressedMember for hot Node getters.

Some of the getters in blink::Node are extremely hot. Decompression
of them can contribute to up to 1.2% of overall CPU cycles on some
benchmarks. To speed up the getters, the CL changes
Node::parent_or_shadow_host_node_ and Node::tree_scope_ to regular
uncompressed pointers.

This increases sizeof(Node) by a word (40B -> 48B), but at the same
time improves Speedometer2 by ~1.3% on M1.

We don't expect the PMF regression to be significant. However, if this
becomes a problem, we can conditionally use compressed pointers on
memory critical platforms.

Bug: 1410145

Change-Id: I393415c2dea0979996dab770c66d43e9d12a8752
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4192127
Reviewed-by: Michael Lippautz <mlippautz@chromium.org>
Reviewed-by: Kentaro Hara <haraken@chromium.org>
Commit-Queue: Anton Bikineev <bikineev@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1099168}
---
 third_party/blink/renderer/core/dom/node.cc    | 12 +++++++-----
 third_party/blink/renderer/core/dom/node.h     | 10 +++++++---
 .../blink/renderer/core/dom/tree_scope.cc      |  8 ++++----
 .../blink/renderer/core/dom/tree_scope.h       |  2 +-
 .../blink/renderer/platform/heap/member.h      |  5 +++++
 .../renderer/platform/heap/write_barrier.h     | 18 ++++++++++++------
 6 files changed, 36 insertions(+), 19 deletions(-)

--- a/third_party/blink/renderer/core/dom/node.cc
+++ b/third_party/blink/renderer/core/dom/node.cc
@@ -166,9 +166,11 @@
 using ReattachHookScope = LayoutShiftTracker::ReattachHookScope;
 
 struct SameSizeAsNode : EventTarget {
-  uint32_t node_flags_;
-  Member<void*> willbe_member_[4];
+  subtle::UncompressedMember<int> first_uncompressed;
+  subtle::UncompressedMember<int> second_uncompressed;
+  Member<void*> willbe_member_[2];
   Member<NodeData> member_;
+  uint32_t node_flags_;
   // Increasing size of Member increases size of Node.
   static_assert(kBlinkMemberGCHasDebugChecks ||
                     sizeof(Member<NodeData>) <= sizeof(void*),
@@ -315,12 +317,12 @@
 #endif
 
 Node::Node(TreeScope* tree_scope, ConstructionType type)
-    : node_flags_(type),
-      parent_or_shadow_host_node_(nullptr),
+    : parent_or_shadow_host_node_(nullptr),
       tree_scope_(tree_scope),
       previous_(nullptr),
       next_(nullptr),
-      data_(&NodeData::SharedEmptyData()) {
+      data_(&NodeData::SharedEmptyData()),
+      node_flags_(type) {
   DCHECK(tree_scope_ || type == kCreateDocument || type == kCreateShadowRoot);
 #if DUMP_NODE_STATISTICS
   LiveNodeSet().insert(this);
--- a/third_party/blink/renderer/core/dom/node.h
+++ b/third_party/blink/renderer/core/dom/node.h
@@ -1194,13 +1194,17 @@
 
   void AddCandidateDirectionalityForSlot();
 
-  uint32_t node_flags_;
-  Member<Node> parent_or_shadow_host_node_;
-  Member<TreeScope> tree_scope_;
+  // Both parent and tree_scope are hot accessed members. Keep them uncompressed
+  // for performance reasons.
+  subtle::UncompressedMember<Node> parent_or_shadow_host_node_;
+  subtle::UncompressedMember<TreeScope> tree_scope_;
+  // Compressed members and flags are after uncompressed members to minimize
+  // padding.
   Member<Node> previous_;
   Member<Node> next_;
   // When a node has rare data we move the layoutObject into the rare data.
   Member<NodeData> data_;
+  uint32_t node_flags_;
 };
 
 inline void Node::SetParentOrShadowHostNode(ContainerNode* parent) {
--- a/third_party/blink/renderer/core/dom/tree_scope.cc
+++ b/third_party/blink/renderer/core/dom/tree_scope.cc
@@ -64,8 +64,8 @@
                          adopted_style_sheets_set_callback,
                      V8ObservableArrayCSSStyleSheet::DeleteAlgorithmCallback
                          adopted_style_sheets_delete_callback)
-    : root_node_(&root_node),
-      document_(&document),
+    : document_(&document),
+      root_node_(&root_node),
       parent_tree_scope_(&document),
       id_target_observer_registry_(
           MakeGarbageCollected<IdTargetObserverRegistry>()),
@@ -83,8 +83,8 @@
                          adopted_style_sheets_set_callback,
                      V8ObservableArrayCSSStyleSheet::DeleteAlgorithmCallback
                          adopted_style_sheets_delete_callback)
-    : root_node_(document),
-      document_(&document),
+    : document_(&document),
+      root_node_(document),
       parent_tree_scope_(nullptr),
       id_target_observer_registry_(
           MakeGarbageCollected<IdTargetObserverRegistry>()),
--- a/third_party/blink/renderer/core/dom/tree_scope.h
+++ b/third_party/blink/renderer/core/dom/tree_scope.h
@@ -183,8 +183,8 @@
   void StyleSheetWasAdded(CSSStyleSheet* sheet);
   void StyleSheetWasRemoved(CSSStyleSheet* sheet);
 
+  subtle::UncompressedMember<Document> document_;
   Member<ContainerNode> root_node_;
-  Member<Document> document_;
   Member<TreeScope> parent_tree_scope_;
 
   Member<TreeOrderedMap> elements_by_id_;
--- a/third_party/blink/renderer/platform/heap/member.h
+++ b/third_party/blink/renderer/platform/heap/member.h
@@ -25,6 +25,11 @@
 template <typename T>
 using UntracedMember = cppgc::UntracedMember<T>;
 
+namespace subtle {
+template <typename T>
+using UncompressedMember = cppgc::subtle::UncompressedMember<T>;
+}
+
 template <typename T>
 inline bool IsHashTableDeletedValue(const Member<T>& m) {
   return m == cppgc::kSentinelPointer;
--- a/third_party/blink/renderer/platform/heap/write_barrier.h
+++ b/third_party/blink/renderer/platform/heap/write_barrier.h
@@ -40,12 +40,15 @@
   // Cannot refer to blink::Member and friends here due to cyclic includes.
   template <typename T,
             typename WeaknessTag,
+            typename StorageType,
             typename WriteBarrierPolicy,
             typename CheckingPolicy>
   ALWAYS_INLINE static void DispatchForObject(
-      cppgc::internal::
-          BasicMember<T, WeaknessTag, WriteBarrierPolicy, CheckingPolicy>*
-              element) {
+      cppgc::internal::BasicMember<T,
+                                   WeaknessTag,
+                                   StorageType,
+                                   WriteBarrierPolicy,
+                                   CheckingPolicy>* element) {
     HeapConsistency::WriteBarrierParams params;
     switch (HeapConsistency::GetWriteBarrierType(*element, params)) {
       case HeapConsistency::WriteBarrierType::kMarking:
@@ -62,12 +65,15 @@
   // Cannot refer to blink::Member and friends here due to cyclic includes.
   template <typename T,
             typename WeaknessTag,
+            typename StorageType,
             typename WriteBarrierPolicy,
             typename CheckingPolicy>
   ALWAYS_INLINE static bool IsWriteBarrierNeeded(
-      cppgc::internal::
-          BasicMember<T, WeaknessTag, WriteBarrierPolicy, CheckingPolicy>*
-              element) {
+      cppgc::internal::BasicMember<T,
+                                   WeaknessTag,
+                                   StorageType,
+                                   WriteBarrierPolicy,
+                                   CheckingPolicy>* element) {
     HeapConsistency::WriteBarrierParams params;
     return HeapConsistency::GetWriteBarrierType(*element, params) !=
            HeapConsistency::WriteBarrierType::kNone;
