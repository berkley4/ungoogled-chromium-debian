From a23c6b06ac4c3ca1415266568fd18da188640a8a Mon Sep 17 00:00:00 2001
From: Nathan Memmott <memmott@chromium.org>
Date: Wed, 21 Aug 2024 17:16:59 +0000
Subject: [PATCH] Change Observer: Fix RequestPermission crash

Now that FileSystemAccessObserverObservation observes permission status
changes, there is the potential to destroy itself on the status change
in the grant's RequestPermission and access member variables after
they've been freed.

This fixes it by not accessing any member variables after `SetStatus`
has been called.

Bug: 360401213
Change-Id: Ia38839a85e17223636778e0e710fb3c03c97d3d8
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5794140
Commit-Queue: Nathan Memmott <memmott@chromium.org>
Reviewed-by: Daseul Lee <dslee@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1344892}
---

--- a/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc
+++ b/chrome/browser/file_system_access/chrome_file_system_access_permission_context.cc
@@ -527,42 +527,50 @@
 
       // Content setting grants write permission without asking.
       if (content_setting == CONTENT_SETTING_ALLOW) {
+        PermissionRequestOutcome outcome =
+            PermissionRequestOutcome::kGrantedByContentSetting;
+        RecordPermissionRequestOutcome(outcome);
+        // May destroy `this`.
         SetStatus(PermissionStatus::GRANTED,
                   PersistedPermissionOptions::kDoNotUpdatePersistedPermission);
-        RunCallbackAndRecordPermissionRequestOutcome(
-            std::move(callback),
-            PermissionRequestOutcome::kGrantedByContentSetting);
+        std::move(callback).Run(outcome);
         return;
       }
 
       // Content setting blocks write permission.
       if (content_setting == CONTENT_SETTING_BLOCK) {
+        PermissionRequestOutcome outcome =
+            PermissionRequestOutcome::kBlockedByContentSetting;
+        RecordPermissionRequestOutcome(outcome);
+        // May destroy `this`.
         SetStatus(PermissionStatus::DENIED,
                   PersistedPermissionOptions::kDoNotUpdatePersistedPermission);
-        RunCallbackAndRecordPermissionRequestOutcome(
-            std::move(callback),
-            PermissionRequestOutcome::kBlockedByContentSetting);
+        std::move(callback).Run(outcome);
         return;
       }
     }
 
     if (context_->CanAutoGrantViaPersistentPermission(origin_, path_,
                                                       handle_type_, type_)) {
+      PermissionRequestOutcome outcome =
+          PermissionRequestOutcome::kGrantedByPersistentPermission;
+      RecordPermissionRequestOutcome(outcome);
+      // May destroy `this`.
       SetStatus(PermissionStatus::GRANTED,
                 PersistedPermissionOptions::kUpdatePersistedPermission);
-      RunCallbackAndRecordPermissionRequestOutcome(
-          std::move(callback),
-          PermissionRequestOutcome::kGrantedByPersistentPermission);
+      std::move(callback).Run(outcome);
       return;
     }
 
     if (context_->CanAutoGrantViaAncestorPersistentPermission(origin_, path_,
                                                               type_)) {
+      PermissionRequestOutcome outcome =
+          PermissionRequestOutcome::kGrantedByAncestorPersistentPermission;
+      RecordPermissionRequestOutcome(outcome);
+      // May destroy `this`.
       SetStatus(PermissionStatus::GRANTED,
                 PersistedPermissionOptions::kUpdatePersistedPermission);
-      RunCallbackAndRecordPermissionRequestOutcome(
-          std::move(callback),
-          PermissionRequestOutcome::kGrantedByAncestorPersistentPermission);
+      std::move(callback).Run(outcome);
       return;
     }
 
@@ -684,6 +692,8 @@
     return type_;
   }
 
+  // `this` may be destroyed. A `FileSystemAccessPermissionGrant::Observer` may
+  // destroy `this` when notified of this the status change.
   void SetStatus(PermissionStatus new_status,
                  PersistedPermissionOptions update_options) {
     DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
@@ -745,6 +755,7 @@
     }
 
     if (permission_changed) {
+      // May destroy `this`.
       NotifyPermissionStatusChanged();
     }
   }
@@ -808,18 +819,26 @@
     }
 
     switch (result) {
-      case PermissionAction::GRANTED:
+      case PermissionAction::GRANTED: {
+        PermissionRequestOutcome outcome =
+            PermissionRequestOutcome::kUserGranted;
+        RecordPermissionRequestOutcome(outcome);
+        // May destroy `this`.
         SetStatus(PermissionStatus::GRANTED,
                   PersistedPermissionOptions::kUpdatePersistedPermission);
-        RunCallbackAndRecordPermissionRequestOutcome(
-            std::move(callback), PermissionRequestOutcome::kUserGranted);
+        std::move(callback).Run(outcome);
         break;
-      case PermissionAction::DENIED:
+      }
+      case PermissionAction::DENIED: {
+        PermissionRequestOutcome outcome =
+            PermissionRequestOutcome::kUserDenied;
+        RecordPermissionRequestOutcome(outcome);
+        // May destroy `this`.
         SetStatus(PermissionStatus::DENIED,
                   PersistedPermissionOptions::kUpdatePersistedPermission);
-        RunCallbackAndRecordPermissionRequestOutcome(
-            std::move(callback), PermissionRequestOutcome::kUserDenied);
+        std::move(callback).Run(outcome);
         break;
+      }
       case PermissionAction::DISMISSED:
       case PermissionAction::IGNORED:
         RunCallbackAndRecordPermissionRequestOutcome(
@@ -907,9 +926,7 @@
     }
   }
 
-  void RunCallbackAndRecordPermissionRequestOutcome(
-      base::OnceCallback<void(PermissionRequestOutcome)> callback,
-      PermissionRequestOutcome outcome) {
+  void RecordPermissionRequestOutcome(PermissionRequestOutcome outcome) {
     DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
     if (context_ &&
         (outcome ==
@@ -943,6 +960,12 @@
             outcome);
       }
     }
+  }
+
+  void RunCallbackAndRecordPermissionRequestOutcome(
+      base::OnceCallback<void(PermissionRequestOutcome)> callback,
+      PermissionRequestOutcome outcome) {
+    RecordPermissionRequestOutcome(outcome);
 
     std::move(callback).Run(outcome);
   }
@@ -973,6 +996,7 @@
       }
     }
 
+    // May destroy `this`.
     NotifyPermissionStatusChanged();
   }
 
--- a/chrome/browser/file_system_access/chrome_file_system_access_permission_context_unittest.cc
+++ b/chrome/browser/file_system_access/chrome_file_system_access_permission_context_unittest.cc
@@ -129,6 +129,10 @@
     grant_->RemoveObserver(this);
   }
 
+  scoped_refptr<content::FileSystemAccessPermissionGrant>& grant() {
+    return grant_;
+  }
+
  private:
   explicit SelfDestructingPermissionGrantObserver(
       scoped_refptr<content::FileSystemAccessPermissionGrant> grant)
@@ -2902,6 +2906,92 @@
       kTestOrigin, new_path, HandleType::kFile, GrantType::kWrite));
 }
 
+TEST_F(ChromeFileSystemAccessPermissionContextTest,
+       ReadGrantDestroyedOnRevokeActiveGrants) {
+  auto grant = permission_context()->GetReadPermissionGrant(
+      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
+  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
+
+  auto observer =
+      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
+
+  // `observer` destroys itself when the permission gets revoked. `observer` is
+  // the only holder of `grant`, so `grant` is destroyed as well. This should
+  // work without crashing.
+  permission_context()->RevokeActiveGrantsForTesting(kTestOrigin, kTestPath);
+  EXPECT_FALSE(observer);
+}
+
+TEST_F(ChromeFileSystemAccessPermissionContextTest,
+       WriteGrantDestroyedOnRevokeActiveGrants) {
+  auto grant = permission_context()->GetWritePermissionGrant(
+      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
+  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
+
+  auto observer =
+      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
+
+  // `observer` destroys itself when the permission gets revoked. `observer` is
+  // the only holder of `grant`, so `grant` is destroyed as well. This should
+  // work without crashing.
+  permission_context()->RevokeActiveGrantsForTesting(kTestOrigin, kTestPath);
+  EXPECT_FALSE(observer);
+}
+
+TEST_F(ChromeFileSystemAccessPermissionContextTest,
+       ReadGrantDestroyedOnRevokeAllActiveGrants) {
+  auto grant = permission_context()->GetWritePermissionGrant(
+      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
+  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
+
+  auto observer =
+      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
+
+  // `observer` destroys itself when the permission gets revoked. `observer` is
+  // the only holder of `grant`, so `grant` is destroyed as well. This should
+  // work without crashing.
+  permission_context()->RevokeAllActiveGrants();
+  EXPECT_FALSE(observer);
+}
+
+TEST_F(ChromeFileSystemAccessPermissionContextTest,
+       WriteGrantDestroyedOnRevokeAllActiveGrants) {
+  auto grant = permission_context()->GetWritePermissionGrant(
+      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
+  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
+
+  auto observer =
+      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
+
+  // `observer` destroys itself when the permission gets revoked. `observer` is
+  // the only holder of `grant`, so `grant` is destroyed as well. This should
+  // work without crashing.
+  permission_context()->RevokeAllActiveGrants();
+  EXPECT_FALSE(observer);
+}
+
+TEST_F(ChromeFileSystemAccessPermissionContextTest,
+       GrantDestroyedOnRequestingPermission) {
+  auto grant = permission_context()->GetWritePermissionGrant(
+      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kNone);
+  EXPECT_EQ(grant->GetStatus(), PermissionStatus::ASK);
+
+  SetDefaultContentSettingValue(ContentSettingsType::FILE_SYSTEM_WRITE_GUARD,
+                                CONTENT_SETTING_BLOCK);
+
+  auto observer =
+      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
+
+  // `observer` destroys itself when the permission gets revoked. `observer` is
+  // the only holder of `grant`, so `grant` is destroyed as well. This should
+  // work without crashing.
+  base::test::TestFuture<PermissionRequestOutcome> future;
+  observer->grant()->RequestPermission(
+      frame_id(), UserActivationState::kNotRequired, future.GetCallback());
+  EXPECT_EQ(future.Get(), PermissionRequestOutcome::kBlockedByContentSetting);
+  EXPECT_FALSE(observer);
+}
+
 #if BUILDFLAG(ENTERPRISE_CLOUD_CONTENT_ANALYSIS)
 
 TEST_F(ChromeFileSystemAccessPermissionContextTest,
@@ -3060,70 +3150,6 @@
   EXPECT_EQ(future.Get<0>()[0].path, path_foo);
 }
 
-TEST_F(ChromeFileSystemAccessPermissionContextTest,
-       ReadGrantDestroyedOnRevokeActiveGrants) {
-  auto grant = permission_context()->GetReadPermissionGrant(
-      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
-  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
-
-  auto observer =
-      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
-
-  // `observer` destroys itself when the permission gets revoked. `observer` is
-  // the only holder of `grant`, so `grant` is destroyed as well. This should
-  // work without crashing.
-  permission_context()->RevokeActiveGrantsForTesting(kTestOrigin, kTestPath);
-  EXPECT_FALSE(observer);
-}
-
-TEST_F(ChromeFileSystemAccessPermissionContextTest,
-       WriteGrantDestroyedOnRevokeActiveGrants) {
-  auto grant = permission_context()->GetWritePermissionGrant(
-      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
-  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
-
-  auto observer =
-      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
-
-  // `observer` destroys itself when the permission gets revoked. `observer` is
-  // the only holder of `grant`, so `grant` is destroyed as well. This should
-  // work without crashing.
-  permission_context()->RevokeActiveGrantsForTesting(kTestOrigin, kTestPath);
-  EXPECT_FALSE(observer);
-}
-
-TEST_F(ChromeFileSystemAccessPermissionContextTest,
-       ReadGrantDestroyedOnRevokeAllActiveGrants) {
-  auto grant = permission_context()->GetWritePermissionGrant(
-      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
-  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
-
-  auto observer =
-      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
-
-  // `observer` destroys itself when the permission gets revoked. `observer` is
-  // the only holder of `grant`, so `grant` is destroyed as well. This should
-  // work without crashing.
-  permission_context()->RevokeAllActiveGrants();
-  EXPECT_FALSE(observer);
-}
-
-TEST_F(ChromeFileSystemAccessPermissionContextTest,
-       WriteGrantDestroyedOnRevokeAllActiveGrants) {
-  auto grant = permission_context()->GetWritePermissionGrant(
-      kTestOrigin, kTestPath, HandleType::kFile, UserAction::kSave);
-  EXPECT_EQ(grant->GetStatus(), PermissionStatus::GRANTED);
-
-  auto observer =
-      SelfDestructingPermissionGrantObserver::Create(std::move(grant));
-
-  // `observer` destroys itself when the permission gets revoked. `observer` is
-  // the only holder of `grant`, so `grant` is destroyed as well. This should
-  // work without crashing.
-  permission_context()->RevokeAllActiveGrants();
-  EXPECT_FALSE(observer);
-}
-
 #endif  // BUILDFLAG(ENTERPRISE_CLOUD_CONTENT_ANALYSIS)
 
 #endif  // !BUILDFLAG(IS_ANDROID)
