From c39bb5225d771e130468d5d75a9988944950e95e Mon Sep 17 00:00:00 2001
From: Daniel Lehmann <dlehmann@chromium.org>
Date: Wed, 06 Dec 2023 23:21:41 +0100
Subject: [PATCH] [utils] Lower default size for ZoneUnorderedMap/Set

...down to the same value that is used in the underlying
`std::unordered_map` and `std::unordered_set` (namely 0), see
https://github.com/llvm/llvm-project/blob/fb62a18615d28694f1a16a3e23915190703a2e98/libcxx/include/unordered_map#L1191
This should reduce surprises and over-allocation.

When eagerly compiling a large Wasm module (PSWeb, ~50MB of code) with
Turboshaft, this reduces total zone memory usage as reported by
--turbo-stats-wasm by ~2.5%. It also reduces total CPU cycles as
reported by perf stat by ~1% (N=20, x64 workstation).

On JetStream2, there is no statistically significant change in terms of
CPU cycles, but total zone memory usage reduces by ~1% (N=10).

Change-Id: I8493051151b8bc632bae77586f51732016272f1b
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5097543
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Reviewed-by: Clemens Backes <clemensb@chromium.org>
Auto-Submit: Daniel Lehmann <dlehmann@chromium.org>
Cr-Commit-Position: refs/heads/main@{#91397}
---

--- a/v8/src/zone/zone-containers.h
+++ b/v8/src/zone/zone-containers.h
@@ -709,7 +709,7 @@
                                 ZoneAllocator<std::pair<const K, V>>> {
  public:
   // Constructs an empty map.
-  explicit ZoneUnorderedMap(Zone* zone, size_t bucket_count = 100)
+  explicit ZoneUnorderedMap(Zone* zone, size_t bucket_count = 0)
       : std::unordered_map<K, V, Hash, KeyEqual,
                            ZoneAllocator<std::pair<const K, V>>>(
             bucket_count, Hash(), KeyEqual(),
@@ -724,7 +724,7 @@
     : public std::unordered_set<K, Hash, KeyEqual, ZoneAllocator<K>> {
  public:
   // Constructs an empty set.
-  explicit ZoneUnorderedSet(Zone* zone, size_t bucket_count = 100)
+  explicit ZoneUnorderedSet(Zone* zone, size_t bucket_count = 0)
       : std::unordered_set<K, Hash, KeyEqual, ZoneAllocator<K>>(
             bucket_count, Hash(), KeyEqual(), ZoneAllocator<K>(zone)) {}
 };
