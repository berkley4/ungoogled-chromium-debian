From a244f583179e13ac804a65077534026ac43eaf61 Mon Sep 17 00:00:00 2001
From: Koji Ishii <kojii@chromium.org>
Date: Thu, 04 Jul 2024 22:19:40 +0000
Subject: [PATCH] Reland "[text-decorations] Fix a crash for `::first-line`"

This is a reland of commit c9d2271396f178e2c0747f2ef2ac727d8a02f9d1

The original CL hits a `DCHECK` in the
`linux-autofill-captured-sites-rel` bots. This CL changes to
push 2 decoration boxes only when the conditions are known,
and to fall back to 1 decoration box in other cases.

This CL also puts the changes under a runtime flag.

Original change's description:
> [text-decorations] Fix a crash for `::first-line`
>
> This patch fixes a crash when `text-decoration` is applied to
> `::first-line`.
>
> Fixed: 345562934
> Change-Id: If26564ca3dcb913236771ef4a634928485b68eca
> Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5677308
> Reviewed-by: Kent Tamura <tkent@chromium.org>
> Auto-Submit: Koji Ishii <kojii@chromium.org>
> Commit-Queue: Koji Ishii <kojii@chromium.org>
> Cr-Commit-Position: refs/heads/main@{#1323270}

Change-Id: Ifb27df1bfd8e9d0a9dc37a1f18d27a6c9488cc29
Fixed: 345562934
Cq-Include-Trybots: luci.chrome.try:linux-autofill-captured-sites-rel
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5678276
Reviewed-by: Kent Tamura <tkent@chromium.org>
Auto-Submit: Koji Ishii <kojii@chromium.org>
Commit-Queue: Kent Tamura <tkent@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1323484}
---

--- a/third_party/blink/renderer/core/paint/decorating_box.h
+++ b/third_party/blink/renderer/core/paint/decorating_box.h
@@ -26,7 +26,6 @@
         style_(&style),
         decorations_(decorations ? decorations
                                  : &style.AppliedTextDecorations()) {
-    DCHECK_EQ(&style.AppliedTextDecorations(), decorations_);
   }
   DecoratingBox(const FragmentItem& item,
                 const ComputedStyle& style,
--- a/third_party/blink/renderer/core/paint/inline_paint_context.cc
+++ b/third_party/blink/renderer/core/paint/inline_paint_context.cc
@@ -89,10 +89,6 @@
         if (decorations != &parent_decorations) {
           // It's a decorating box if it has more decorations than its parent.
           if (decorations->size() > parent_decorations.size()) {
-            DCHECK_EQ(decorations->size(), parent_decorations.size() + 1);
-            DCHECK_NE(style->GetTextDecorationLine(),
-                      TextDecorationLine::kNone);
-
             // Ensure the parent is in sync. Ancestors are pushed first.
             wtf_size_t num_pushes = 0;
             if (&parent_decorations != stop_at_) {
@@ -100,8 +96,9 @@
                                 &parent_decorations);
             }
 
-            PushDecoratingBox(item, *layout_object, *style, *decorations);
-            return num_pushes + 1;
+            num_pushes += PushDecoratingBoxesUntilParent(
+                item, *layout_object, *style, *decorations, parent_decorations);
+            return num_pushes;
           }
 
           // Rare but sometimes |AppliedTextDecorations| is duplicated instead
@@ -190,6 +187,40 @@
       }
     }
 
+    wtf_size_t PushDecoratingBoxesUntilParent(
+        const FragmentItem* item,
+        const LayoutObject& layout_object,
+        const ComputedStyle& style,
+        const Vector<AppliedTextDecoration, 1>& decorations,
+        const Vector<AppliedTextDecoration, 1>& parent_decorations) {
+      const Vector<AppliedTextDecoration, 1>* base_decorations =
+          style.BaseAppliedTextDecorations();
+      if (base_decorations == &parent_decorations ||
+          !RuntimeEnabledFeatures::CssDecoratingBoxFirstLineEnabled()) {
+        DCHECK_EQ(decorations.size(), parent_decorations.size() + 1);
+        DCHECK_NE(style.GetTextDecorationLine(), TextDecorationLine::kNone);
+        PushDecoratingBox(item, layout_object, style, decorations);
+        return 1;
+      }
+
+      if (base_decorations && base_decorations != &decorations &&
+          decorations.size() == parent_decorations.size() + 2) {
+        // When the normal style and `::first-line` have different decorations,
+        // the normal style inherits from the parent, and the `:first-line`
+        // inherits from the normal style, resulting two decorating boxes.
+        DCHECK_NE(style.GetTextDecorationLine(), TextDecorationLine::kNone);
+        PushDecoratingBox(item, layout_object, style, *base_decorations);
+        PushDecoratingBox(item, layout_object, style, decorations);
+        return 2;
+      }
+
+      // The style engine may create a clone, not an inherited decorations,
+      // such as a `<span>` in `::first-line`.
+      DCHECK_EQ(decorations.size(), parent_decorations.size() + 1);
+      PushDecoratingBox(item, layout_object, style, decorations);
+      return 1;
+    }
+
     void PushDecoratingBox(
         const FragmentItem* item,
         const LayoutObject& layout_object,
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -853,6 +853,11 @@
       status: "stable",
     },
     {
+      // crbug.com/345562934
+      name: "CssDecoratingBoxFirstLine",
+      status: "stable",
+    },
+    {
       name: "CSSDisplayModePictureInPicture",
       status: "stable",
     },
--- /dev/null
+++ b/third_party/blink/web_tests/external/wpt/css/css-text-decor/crashtests/text-decoration-first-line-multi-crash.html
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<link rel="help" href="https://crbug.com/345562934">
+<link rel="help" href="https://drafts.csswg.org/css-text-decor-3/#text-decoration-line-property">
+<style>
+.c7 {
+  text-decoration: underline;
+  appearance: button;
+}
+
+.c7::first-line {
+  text-decoration: overline;
+}
+
+.c15 {
+  text-decoration: line-through;
+}
+</style>
+<dfn class="c7"><strong class="c15">test</strong></dfn>
