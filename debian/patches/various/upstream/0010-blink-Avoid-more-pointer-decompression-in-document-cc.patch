From 8c9eca4053c660b57185c6c43300a21713b7e70e Mon Sep 17 00:00:00 2001
From: Camillo Bruni <cbruni@chromium.org>
Date: Thu, 9 Feb 2023 17:05:16 +0000
Subject: [PATCH] [blink] Avoid more pointer decompression in document.cc

Clang seems to be a bit random when it deduplicates pointer
decompression and when not. Trying to do this manually starting from
functions seen in speedometer profiles and in less important
surrounding code.

Change-Id: I85097c83b6320e5913681b8bbd175115a6982500
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4232093
Reviewed-by: Jeremy Roman <jbroman@chromium.org>
Commit-Queue: Camillo Bruni <cbruni@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1103312}
---
 .../blink/renderer/core/dom/document.cc       | 70 +++++++++++--------
 .../blink/renderer/core/dom/element.cc        | 38 +++++-----
 2 files changed, 59 insertions(+), 49 deletions(-)

--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -2009,12 +2009,13 @@
 void Document::UpdateStyleInvalidationIfNeeded() {
   DCHECK(IsActive());
   ScriptForbiddenScope forbid_script;
-
-  if (!GetStyleEngine().NeedsStyleInvalidation())
+  StyleEngine& style_engine = GetStyleEngine();
+  if (!style_engine.NeedsStyleInvalidation()) {
     return;
+  }
   TRACE_EVENT0("blink", "Document::updateStyleInvalidationIfNeeded");
   SCOPED_BLINK_UMA_HISTOGRAM_TIMER_HIGHRES("Style.InvalidationTime");
-  GetStyleEngine().InvalidateStyle();
+  style_engine.InvalidateStyle();
 }
 
 #if DCHECK_IS_ON()
@@ -2144,13 +2145,14 @@
 #endif  // EXPENSIVE_DCHECKS_ARE_ON()
 
   auto advance_to_style_clean = [this]() {
-    if (Lifecycle().GetState() < DocumentLifecycle::kStyleClean) {
+    DocumentLifecycle& lifecycle = Lifecycle();
+    if (lifecycle.GetState() < DocumentLifecycle::kStyleClean) {
       // NeedsLayoutTreeUpdateForThisDocument may change to false without any
       // actual layout tree update.  For example, NeedsAnimationTimingUpdate
       // may change to false when time elapses.  Advance lifecycle to
       // StyleClean because style is actually clean now.
-      Lifecycle().AdvanceTo(DocumentLifecycle::kInStyleRecalc);
-      Lifecycle().AdvanceTo(DocumentLifecycle::kStyleClean);
+      lifecycle.AdvanceTo(DocumentLifecycle::kInStyleRecalc);
+      lifecycle.AdvanceTo(DocumentLifecycle::kStyleClean);
     }
     // If we insert <object> elements into display:none subtrees, we might not
     // need a layout tree update, but need to make sure they are not blocking
@@ -2223,7 +2225,8 @@
                            std::move(context), GetFrame());
                      });
 
-  unsigned start_element_count = GetStyleEngine().StyleForElementCount();
+  StyleEngine& style_engine = GetStyleEngine();
+  unsigned start_element_count = style_engine.StyleForElementCount();
 
   probe::RecalculateStyle recalculate_style_scope(this);
 
@@ -2231,15 +2234,16 @@
   EvaluateMediaQueryListIfNeeded();
   UpdateUseShadowTreesIfNeeded();
 
-  GetStyleEngine().UpdateActiveStyle();
-  GetStyleEngine().UpdateCounterStyles();
-  GetStyleEngine().InvalidatePositionFallbackStyles();
-  GetStyleEngine().InvalidateViewportUnitStylesIfNeeded();
+  style_engine.UpdateActiveStyle();
+  style_engine.UpdateCounterStyles();
+  style_engine.InvalidatePositionFallbackStyles();
+  style_engine.InvalidateViewportUnitStylesIfNeeded();
   InvalidateStyleAndLayoutForFontUpdates();
   UpdateStyleInvalidationIfNeeded();
   UpdateStyle();
-  if (GetStyleResolver().WasViewportResized()) {
-    GetStyleResolver().ClearResizedForViewportUnits();
+  StyleResolver& style_resolver = GetStyleResolver();
+  if (style_resolver.WasViewportResized()) {
+    style_resolver.ClearResizedForViewportUnits();
     View()->MarkOrthogonalWritingModeRootsForLayout();
   }
 
@@ -2286,7 +2290,8 @@
   RUNTIME_CALL_TIMER_SCOPE(V8PerIsolateData::MainThreadIsolate(),
                            RuntimeCallStats::CounterId::kUpdateStyle);
 
-  unsigned initial_element_count = GetStyleEngine().StyleForElementCount();
+  StyleEngine& style_engine = GetStyleEngine();
+  unsigned initial_element_count = style_engine.StyleForElementCount();
 
   lifecycle_.AdvanceTo(DocumentLifecycle::kInStyleRecalc);
 
@@ -2295,12 +2300,13 @@
 
   bool should_record_stats;
   TRACE_EVENT_CATEGORY_GROUP_ENABLED("blink,blink_style", &should_record_stats);
-  GetStyleEngine().SetStatsEnabled(should_record_stats);
 
-  GetStyleEngine().UpdateStyleAndLayoutTree();
+  style_engine.SetStatsEnabled(should_record_stats);
+  style_engine.UpdateStyleAndLayoutTree();
 
-  GetLayoutView()->UpdateMarkersAndCountersAfterStyleChange();
-  GetLayoutView()->RecalcLayoutOverflow();
+  LayoutView* layout_view = GetLayoutView();
+  layout_view->UpdateMarkersAndCountersAfterStyleChange();
+  layout_view->RecalcLayoutOverflow();
 
 #if DCHECK_IS_ON()
   AssertNodeClean(*this);
@@ -2310,12 +2316,12 @@
   if (should_record_stats) {
     TRACE_EVENT_END2(
         "blink,blink_style", "Document::updateStyle", "resolverAccessCount",
-        GetStyleEngine().StyleForElementCount() - initial_element_count,
-        "counters", GetStyleEngine().Stats()->ToTracedValue());
+        style_engine.StyleForElementCount() - initial_element_count, "counters",
+        GetStyleEngine().Stats()->ToTracedValue());
   } else {
     TRACE_EVENT_END1(
         "blink,blink_style", "Document::updateStyle", "resolverAccessCount",
-        GetStyleEngine().StyleForElementCount() - initial_element_count);
+        style_engine.StyleForElementCount() - initial_element_count);
   }
 }
 
@@ -2346,8 +2352,8 @@
   if (!analyze)
     analyze = !DisplayLockUtilities::IsUnlockedQuickCheck(node);
 
-  bool maybe_affected_by_layout =
-      GetStyleEngine().StyleMaybeAffectedByLayout(node);
+  StyleEngine& style_engine = GetStyleEngine();
+  bool maybe_affected_by_layout = style_engine.StyleMaybeAffectedByLayout(node);
   // Even if we don't need layout *now*, any dirty style may invalidate layout.
   bool maybe_needs_layout =
       (update != StyleAndLayoutTreeUpdate::kNone) || View()->NeedsLayout();
@@ -2362,7 +2368,7 @@
     return false;
   }
 
-  switch (GetStyleEngine().AnalyzeAncestors(node)) {
+  switch (style_engine.AnalyzeAncestors(node)) {
     case StyleEngine::AncestorAnalysis::kNone:
       return false;
     case StyleEngine::AncestorAnalysis::kInterleavingRoot:
@@ -2471,14 +2477,15 @@
   // If we're restoring a scroll position from history, that takes precedence
   // over scrolling to the anchor in the URL.
   View()->InvokeFragmentAnchor();
-
-  auto& frame_loader = GetFrame()->Loader();
+  LocalFrame* frame = GetFrame();
+  auto& frame_loader = frame->Loader();
   auto* document_loader = frame_loader.GetDocumentLoader();
   if (!document_loader)
     return;
-  if (GetFrame()->IsLoading() &&
-      !FrameLoader::NeedsHistoryItemRestore(document_loader->LoadType()))
+  if (frame->IsLoading() &&
+      !FrameLoader::NeedsHistoryItemRestore(document_loader->LoadType())) {
     return;
+  }
 
   HistoryItem* history_item = document_loader->GetHistoryItem();
 
@@ -8611,8 +8618,9 @@
 }
 
 bool Document::IsFocusAllowed() const {
-  if (!GetFrame() || GetFrame()->IsMainFrame() ||
-      LocalFrame::HasTransientUserActivation(GetFrame())) {
+  LocalFrame* frame = GetFrame();
+  if (!frame || frame->IsMainFrame() ||
+      LocalFrame::HasTransientUserActivation(frame)) {
     // 'autofocus' runs Element::focus asynchronously at which point the
     // document might not have a frame (see https://crbug.com/960224).
     return true;
@@ -8621,7 +8629,7 @@
   WebFeature uma_type;
   bool sandboxed = dom_window_->IsSandboxed(
       network::mojom::blink::WebSandboxFlags::kNavigation);
-  bool ad = GetFrame()->IsAdFrame();
+  bool ad = frame->IsAdFrame();
   if (sandboxed) {
     uma_type = ad ? WebFeature::kFocusWithoutUserActivationSandboxedAdFrame
                   : WebFeature::kFocusWithoutUserActivationSandboxedNotAdFrame;
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -2762,16 +2762,17 @@
               false);
     }
   }
-
-  if (GetDocument().GetPage()) {
-    GetDocument().GetPage()->GetPointerLockController().ElementRemoved(this);
+  Document& document = GetDocument();
+  Page* page = document.GetPage();
+  if (page) {
+    page->GetPointerLockController().ElementRemoved(this);
   }
 
-  GetDocument().UnobserveForIntrinsicSize(this);
+  document.UnobserveForIntrinsicSize(this);
 
   SetSavedLayerScrollOffset(ScrollOffset());
 
-  if (insertion_point.IsInTreeScope() && GetTreeScope() == GetDocument()) {
+  if (insertion_point.IsInTreeScope() && GetTreeScope() == document) {
     const AtomicString& id_value = GetIdAttribute();
     if (!id_value.IsNull()) {
       UpdateId(insertion_point.GetTreeScope(), id_value, g_null_atom);
@@ -2786,8 +2787,8 @@
   ContainerNode::RemovedFrom(insertion_point);
 
   if (was_in_document) {
-    if (this == GetDocument().CssTarget()) {
-      GetDocument().SetCSSTarget(nullptr);
+    if (this == document.CssTarget()) {
+      document.SetCSSTarget(nullptr);
     }
 
     if (GetCustomElementState() == CustomElementState::kCustom) {
@@ -2795,11 +2796,11 @@
     }
   }
 
-  GetDocument().GetRootScrollerController().ElementRemoved(*this);
+  document.GetRootScrollerController().ElementRemoved(*this);
 
   if (IsInTopLayer()) {
     Fullscreen::ElementRemoved(*this);
-    GetDocument().RemoveFromTopLayer(this);
+    document.RemoveFromTopLayer(this);
   }
 
   ClearElementFlag(ElementFlags::kIsInCanvasSubtree);
@@ -2816,14 +2817,15 @@
 
     NodeRareData* node_data = RareData();
     node_data->InvalidateAssociatedAnimationEffects();
-
-    if (was_in_document && data->IntersectionObserverData()) {
-      data->IntersectionObserverData()->ComputeIntersectionsForTarget(
-          IntersectionObservation::kExplicitRootObserversNeedUpdate |
-          IntersectionObservation::kImplicitRootObserversNeedUpdate |
-          IntersectionObservation::kIgnoreDelay);
-      data->IntersectionObserverData()->StopTrackingWithController(
-          GetDocument().EnsureIntersectionObserverController());
+    if (was_in_document) {
+      if (auto* observer_data = data->IntersectionObserverData()) {
+        observer_data->ComputeIntersectionsForTarget(
+            IntersectionObservation::kExplicitRootObserversNeedUpdate |
+            IntersectionObservation::kImplicitRootObserversNeedUpdate |
+            IntersectionObservation::kIgnoreDelay);
+        observer_data->StopTrackingWithController(
+            document.EnsureIntersectionObserverController());
+      }
     }
 
     if (auto* context = data->GetDisplayLockContext()) {
@@ -2838,7 +2840,7 @@
     }
   }
 
-  if (auto* const frame = GetDocument().GetFrame()) {
+  if (auto* const frame = document.GetFrame()) {
     if (UNLIKELY(HasUndoStack())) {
       frame->GetEditor().GetUndoStack().ElementRemoved(this);
     }
