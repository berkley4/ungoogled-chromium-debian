From 5e56d672faa0308184551d9233ed0e728105758d Mon Sep 17 00:00:00 2001
From: Thomas Lukaszewicz <tluk@chromium.org>
Date: Wed, 08 May 2024 05:52:07 +0000
Subject: [PATCH] [spellcheck] Read hunspell dict into memory before verifying

Currently there are a number of crashes reporting SIGBUS errors
when reading and verifying the memory mapped hunspell dictionary.

There is no truncation of the file during read and it is suspected
SIGBUS errors may be the result of platform IO errors while
processing the memory mapped file (see b/321039043#comment12).

This CL ensures the file is completely read into memory before
performing verification which should help mitigate the impact
of platform IO errors.

Bug: 321039043
Change-Id: I60c9eeff5b55b35d02fa63c5786f44c4f622d00f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5522177
Reviewed-by: Basia Zimirska <basiaz@google.com>
Commit-Queue: Thomas Lukaszewicz <tluk@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1297960}
---

--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -361,21 +361,22 @@
   dictionary.path = path;
 #endif  // BUILDFLAG(IS_WIN)
 
-  // Read the dictionary file and scan its data to check for corruption. The
-  // scoping closes the memory-mapped file before it is opened or deleted.
-  bool bdict_is_valid = false;
+  // Open the dictionary file and verify there is no corruption. If verification
+  // fails the file must be deleted.
 
-  {
-    base::MemoryMappedFile map;
-    bdict_is_valid = base::PathExists(dictionary.path) &&
-                     map.Initialize(dictionary.path) &&
-                     hunspell::BDict::Verify(map.bytes());
+  dictionary.file.Initialize(dictionary.path,
+                             base::File::FLAG_READ | base::File::FLAG_OPEN);
+  if (!dictionary.file.IsValid()) {
+    dictionary.file.Close();
+    base::DeleteFile(dictionary.path);
+    return dictionary;
   }
 
-  if (bdict_is_valid) {
-    dictionary.file.Initialize(dictionary.path,
-                               base::File::FLAG_READ | base::File::FLAG_OPEN);
-  } else {
+  std::vector<uint8_t> data;
+  data.resize(dictionary.file.GetLength());
+  if (!dictionary.file.ReadAndCheck(0, data) ||
+      !hunspell::BDict::Verify(data)) {
+    dictionary.file.Close();
     base::DeleteFile(dictionary.path);
   }
 
