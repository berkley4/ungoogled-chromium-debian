From 609320fa5c2a109bd60fc79e55b266c2af949c84 Mon Sep 17 00:00:00 2001
From: Alan Cutter <alancutter@chromium.org>
Date: Wed, 22 May 2024 15:42:48 +0000
Subject: [PATCH] DevTools: Fix crash when manifest icon has no sizes field

This CL replaces a custom string joining implemenation with a common
one to avoid an edge case failure when the input list is empty.

Bug: 341319146
Change-Id: Ib984c1f57d7e9276431fcb2ea72b057dd8281395
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5553005
Auto-Submit: Alan Cutter <alancutter@chromium.org>
Commit-Queue: Dmitry Gozman <dgozman@chromium.org>
Reviewed-by: Dmitry Gozman <dgozman@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1304459}
---

--- a/chrome/browser/devtools/protocol/devtools_pwa_browsertest.cc
+++ b/chrome/browser/devtools/protocol/devtools_pwa_browsertest.cc
@@ -322,6 +322,26 @@
   ASSERT_EQ(*result->FindString("id"), InstallableWebAppUrl().spec());
 }
 
+IN_PROC_BROWSER_TEST_F(PWAProtocolTest, GetProcessedManifest_IconWithNoSizes) {
+  ReattachToWebContents(embedded_test_server()->GetURL(
+      "/web_apps/get_manifest.html?icon_with_no_sizes.json"));
+  const base::Value::Dict* result =
+      SendCommandSync("Page.getAppManifest",
+                      base::Value::Dict{}.Set(
+                          "manifestId", InstallableWebAppManifestId().spec()));
+  ASSERT_TRUE(result);
+  auto* manifest = result->FindDict("manifest");
+  ASSERT_TRUE(manifest);
+  auto* icons = manifest->FindList("icons");
+  ASSERT_TRUE(icons);
+  ASSERT_EQ(icons->size(), 1u);
+  auto* icon = (*icons)[0].GetIfDict();
+  ASSERT_TRUE(icon);
+  auto* sizes = icon->FindString("sizes");
+  ASSERT_TRUE(sizes);
+  EXPECT_EQ(*sizes, "");
+}
+
 IN_PROC_BROWSER_TEST_F(PWAProtocolTest, GetProcessedManifest_MismatchId) {
   ReattachToWebContents(InstallableWebAppUrl());
   ASSERT_FALSE(SendCommandSync(
--- /dev/null
+++ b/chrome/test/data/web_apps/icon_with_no_sizes.json
@@ -0,0 +1,11 @@
+{
+  "name": "Icon with no sizes",
+  "icons": [
+    {
+      "src": "basic-48.png",
+      "type": "image/png"
+    }
+  ],
+  "start_url": "basic.html",
+  "display": "standalone"
+}
--- a/content/browser/devtools/protocol/page_handler.cc
+++ b/content/browser/devtools/protocol/page_handler.cc
@@ -18,8 +18,10 @@
 #include "base/memory/ref_counted_memory.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/process/process_handle.h"
+#include "base/ranges/algorithm.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/to_string.h"
+#include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/task/thread_pool.h"
@@ -250,13 +252,10 @@
   auto convert_icon = [](const blink::Manifest::ImageResource& input_icon)
       -> std::unique_ptr<Page::ImageResource> {
     auto icon = Page::ImageResource::Create();
-    std::string sizes;
-    for (const auto& size : input_icon.sizes) {
-      sizes += gfx::Size(size.width(), size.height()).ToString();
-      sizes += ' ';
-    }
-    sizes.pop_back();
-    icon.SetSizes(sizes);
+    std::vector<std::string> size_strings;
+    base::ranges::transform(input_icon.sizes, std::back_inserter(size_strings),
+                            &gfx::Size::ToString);
+    icon.SetSizes(base::JoinString(size_strings, " "));
     icon.SetType(base::UTF16ToUTF8(input_icon.type));
     return icon.SetUrl(input_icon.src.possibly_invalid_spec()).Build();
   };
