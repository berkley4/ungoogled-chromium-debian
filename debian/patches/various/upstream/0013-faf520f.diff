From faf520fe3bbd3a23afee9ef9a0c734643dd1f0fe Mon Sep 17 00:00:00 2001
From: Greg Thompson <grt@chromium.org>
Date: Thu, 28 Mar 2024 02:35:55 +0000
Subject: [PATCH] [histograms] Fix crash in WriteAsciiBucketGraph

Properly handle a negative x_count in WriteAsciiBucketGraph.

Fixed: 331095130
Change-Id: I5f27a26e1ead267e44bb9e8dc04022bbe21c1499
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5398224
Auto-Submit: Greg Thompson <grt@chromium.org>
Commit-Queue: Alexei Svitkine <asvitkine@chromium.org>
Reviewed-by: Alexei Svitkine <asvitkine@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1279415}
---

--- a/base/metrics/histogram_samples.cc
+++ b/base/metrics/histogram_samples.cc
@@ -11,6 +11,7 @@
 #include "base/memory/raw_ptr.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
+#include "base/numerics/clamped_math.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/numerics/safe_math.h"
 #include "base/pickle.h"
@@ -420,15 +421,18 @@
   return output;
 }
 
+// static
 void HistogramSamples::WriteAsciiBucketGraph(double x_count,
                                              int line_length,
-                                             std::string* output) const {
-  int x_remainder = std::max(line_length - x_count, 0.0);
+                                             std::string* output) {
+  output->reserve(ClampAdd(output->size(), ClampAdd(line_length, 1)));
 
-  output->reserve(output->size() + x_count + 1 + x_remainder);
-  output->append(x_count, '-');
+  const size_t count = ClampRound<size_t>(x_count);
+  output->append(count, '-');
   output->append(1, 'O');
-  output->append(saturated_cast<size_t>(x_remainder), ' ');
+  if (const auto len = as_unsigned(line_length); count < len) {
+    output->append(len - count, ' ');
+  }
 }
 
 void HistogramSamples::WriteAsciiBucketValue(HistogramBase::Count current,
--- a/base/metrics/histogram_samples.h
+++ b/base/metrics/histogram_samples.h
@@ -14,6 +14,7 @@
 
 #include "base/atomicops.h"
 #include "base/base_export.h"
+#include "base/gtest_prod_util.h"
 #include "base/memory/raw_ptr.h"
 #include "base/metrics/histogram_base.h"
 
@@ -243,9 +244,9 @@
   }
 
   // Produces an actual graph (set of blank vs non blank char's) for a bucket.
-  void WriteAsciiBucketGraph(double x_count,
-                             int line_length,
-                             std::string* output) const;
+  static void WriteAsciiBucketGraph(double x_count,
+                                    int line_length,
+                                    std::string* output);
 
   // Writes textual description of the bucket contents (relative to histogram).
   // Output is the count in the buckets, as well as the percentage.
@@ -267,6 +268,8 @@
   Metadata* meta() { return meta_; }
 
  private:
+  FRIEND_TEST_ALL_PREFIXES(HistogramSamplesTest, WriteAsciiBucketGraph);
+
   // Depending on derived class `meta_` can come from:
   // - Local storage: Then `meta_owned_` is set and meta_ points to it.
   // - External storage: Then `meta_owned_` is null, and `meta_` point toward an
--- a/base/metrics/histogram_samples_unittest.cc
+++ b/base/metrics/histogram_samples_unittest.cc
@@ -93,4 +93,32 @@
   EXPECT_EQ(std::numeric_limits<uint16_t>::max(), sample.Extract().count);
 }
 
+TEST(HistogramSamplesTest, WriteAsciiBucketGraph) {
+  constexpr int kLineLength = 72;
+  constexpr size_t kOutputSize = kLineLength + 1;
+
+  std::string output;
+
+  HistogramSamples::WriteAsciiBucketGraph(0.0, kLineLength, &output);
+  ASSERT_EQ(output.size(), kOutputSize);
+  output.clear();
+
+  HistogramSamples::WriteAsciiBucketGraph(-1.0, kLineLength, &output);
+  ASSERT_EQ(output.size(), kOutputSize);
+  output.clear();
+
+  HistogramSamples::WriteAsciiBucketGraph(kLineLength - 1, kLineLength,
+                                          &output);
+  ASSERT_EQ(output.size(), kOutputSize);
+  output.clear();
+
+  HistogramSamples::WriteAsciiBucketGraph(kLineLength, kLineLength, &output);
+  ASSERT_EQ(output.size(), kOutputSize);
+  output.clear();
+
+  HistogramSamples::WriteAsciiBucketGraph(kLineLength + 1, kLineLength,
+                                          &output);
+  ASSERT_EQ(output.size(), kOutputSize + 1);
+}
+
 }  // namespace base
