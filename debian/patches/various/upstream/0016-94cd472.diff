From 94cd472546d8c9efd20219f025989a77eb96f939 Mon Sep 17 00:00:00 2001
From: Michael Lippautz <mlippautz@chromium.org>
Date: Mon, 13 May 2024 15:19:12 +0200
Subject: [PATCH] [cppgc] Fix registering on-stack movable slots

We assume that there's no on-stack slots for movable references as
compaction doesn't run when finalizing GC with stack. Unfortunately,
it is possible to trigger write barrier for on-stack slots. It's
expensive to filter those out generically (as that would require an
on-stack check for each slot) and marking does work with such slots.
As a result, filter them specifically before storing movable
references.

Bug: 339967265
Change-Id: I2449a47c4df92a4d117789ce7b93e6ef8075dc93
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5534767
Reviewed-by: Omer Katz <omerkatz@chromium.org>
Commit-Queue: Michael Lippautz <mlippautz@chromium.org>
Cr-Commit-Position: refs/heads/main@{#93858}
---

--- a/v8/src/heap/cppgc/marking-state.h
+++ b/v8/src/heap/cppgc/marking-state.h
@@ -10,6 +10,8 @@
 #include "include/cppgc/trace-trait.h"
 #include "include/cppgc/visitor.h"
 #include "src/base/logging.h"
+#include "src/base/macros.h"
+#include "src/heap/base/stack.h"
 #include "src/heap/cppgc/compaction-worklists.h"
 #include "src/heap/cppgc/globals.h"
 #include "src/heap/cppgc/heap-object-header.h"
@@ -120,7 +122,13 @@
   inline void RegisterWeakCustomCallback(WeakCallback, const void*);
 
   void RegisterMovableReference(const void** slot) {
-    if (!movable_slots_worklist_) return;
+    if (V8_LIKELY(!movable_slots_worklist_)) return;
+#if defined(CPPGC_CAGED_HEAP)
+    if (V8_UNLIKELY(!CagedHeapBase::IsWithinCage(slot))) return;
+#else   // !defined(CPPGC_CAGED_HEAP)
+    if (V8_UNLIKELY(heap::base::Stack::IsOnStack(slot))) return;
+#endif  // !defined(CPPGC_CAGED_HEAP)
+
     movable_slots_worklist_->Push(slot);
   }
 
--- a/v8/test/unittests/heap/cppgc/compactor-unittest.cc
+++ b/v8/test/unittests/heap/cppgc/compactor-unittest.cc
@@ -245,5 +245,13 @@
   EXPECT_EQ(references[1], holder->objects[1]->other);
 }
 
+TEST_F(CompactorTest, OnStackSlotShouldBeFiltered) {
+  StartGC();
+  const CompactableGCed* compactable_object =
+      MakeGarbageCollected<CompactableGCed>(GetAllocationHandle());
+  heap()->marker()->Visitor().RegisterMovableReference(&compactable_object);
+  EndGC();
+}
+
 }  // namespace internal
 }  // namespace cppgc
