From 2d23c2728a17e790cb5afb1894598b16468f277e Mon Sep 17 00:00:00 2001
From: Dominic Farolino <dom@chromium.org>
Date: Mon, 19 Aug 2024 19:57:52 +0000
Subject: [PATCH] Image: Don't GC lazyload-deferred images with decode requests

Before this CL, Blink would allow lazyload-deferred images that were
disconnected from the DOM to be garbage collected. This is because they
didn't technically have a load in progress, and therefore it wasn't
observable to the web whether they were kept around in memory or not.

However, `blink::ScriptPromiseResolver::Dispose()` does not actually
permit disposal if the pending promise associated with it has not been
resolved properly. This caused a crash specifically for
lazyload-deferred images that were disconnected from the DOM (and
therefore garbage collectable), *but* had an unresolved `decode()`
promise out somewhere. When the image was garbage collected,
the ScriptPromiseResolver associated with the underlying ImageLoader
would crash upon disposal.

This CL fixes this problem by amending the
`ImageLoader::HasPendingEvent()` logic to extend the lifetime of the
image if there are pending decode requests. See
https://issues.chromium.org/issues/40071424#comment15 for an analysis.

R=jbroman@chromium.org

Bug: 40071424
Change-Id: Ib2db546ffd578cd5e71e0964a40d41dfe69b17dc
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5792476
Reviewed-by: Jeremy Roman <jbroman@chromium.org>
Commit-Queue: Dominic Farolino <dom@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1343698}
---

--- a/third_party/blink/renderer/core/html/lazy_load_image_observer_test.cc
+++ b/third_party/blink/renderer/core/html/lazy_load_image_observer_test.cc
@@ -703,6 +703,49 @@
   EXPECT_EQ(nullptr, image);
 }
 
+// This is a regression test added for https://crbug.com/40071424, which was
+// filed as a result of outstanding decode promises *not* keeping an underlying
+// lazyload-deferred image alive, even after removal from the DOM. Images of
+// this sort must kept alive for the underlying decode request promise's sake.
+TEST_F(LazyLoadImagesTest, DeferredLazyLoadImagesKeptAliveForDecodeRequest) {
+  SimRequest main_resource("https://example.com/", "text/html");
+  LoadURL("https://example.com/");
+  main_resource.Complete(String::Format(
+      R"HTML(
+        <body>
+        <div style='height: %dpx;'></div>
+        <img src='https://example.com/image.png' loading='lazy'>
+        </body>)HTML",
+      kViewportHeight + kLoadingDistanceThreshold + 100));
+
+  Compositor().BeginFrame();
+  test::RunPendingTasks();
+
+  WeakPersistent<HTMLImageElement> image =
+      To<HTMLImageElement>(GetDocument().QuerySelector(AtomicString("img")));
+
+  ScriptState* script_state =
+      ToScriptStateForMainWorld(GetDocument().GetFrame());
+  v8::HandleScope handle_scope(script_state->GetIsolate());
+  // This creates an outstanding decode request for the underlying image, which
+  // keeps it alive solely for the sake of the promise's existence.
+  image->decode(script_state, ASSERT_NO_EXCEPTION);
+
+  EXPECT_FALSE(image->complete());
+  image->remove();
+  EXPECT_FALSE(image->isConnected());
+  EXPECT_FALSE(image->complete());
+  EXPECT_NE(image, nullptr);
+
+  GetDocument().View()->UpdateAllLifecyclePhasesForTest();
+  test::RunPendingTasks();
+  ThreadState::Current()->CollectAllGarbageForTesting();
+
+  // After GC, the image is still non-null, since it is kept alive due to the
+  // outstanding decode request.
+  EXPECT_NE(image, nullptr);
+}
+
 }  // namespace
 
 }  // namespace blink
--- a/third_party/blink/renderer/core/loader/image_loader.cc
+++ b/third_party/blink/renderer/core/loader/image_loader.cc
@@ -886,8 +886,10 @@
     return true;
   }
 
-  if (pending_load_event_.IsActive() || pending_error_event_.IsActive())
+  if (pending_load_event_.IsActive() || pending_error_event_.IsActive() ||
+      !decode_requests_.empty()) {
     return true;
+  }
 
   return false;
 }
