From e07a271333e02114224eb593a834d4f410c7458a Mon Sep 17 00:00:00 2001
From: Elly <ellyjones@chromium.org>
Date: Tue, 28 May 2024 15:42:34 +0000
Subject: [PATCH] views: don't crash when traversing empty TableViews

If a Views client creates an empty TableView which then receives arrow
key events, TableView::AdvanceSelection can attempt to select "the first
row", which doesn't exist. To avoid that, have AdvanceSelection check
whether the table is non-empty before trying to select the first row.

This change also promotes two DCHECKs that these indexes are in bounds
to CHECKs, since if they are in fact out of bounds, that creates OOB
reads in the browser process. Bad times!

Fixed: 342341277, 329965258
Change-Id: I4c51c223d37bd65f23dee2ec8f4295681e3ab952
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5563409
Auto-Submit: Elly FJ <ellyjones@chromium.org>
Commit-Queue: Joseph Park <josephjoopark@chromium.org>
Reviewed-by: Wez <wez@chromium.org>
Reviewed-by: Joseph Park <josephjoopark@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1306784}
---

--- a/ui/views/controls/table/table_view.cc
+++ b/ui/views/controls/table/table_view.cc
@@ -458,13 +458,13 @@
 size_t TableView::ModelToView(size_t model_index) const {
   if (!GetIsSorted())
     return model_index;
-  DCHECK_LT(model_index, model_to_view_.size())
+  CHECK_LT(model_index, model_to_view_.size())
       << " out of bounds model_index " << model_index;
   return model_to_view_[model_index];
 }
 
 size_t TableView::ViewToModel(size_t view_index) const {
-  DCHECK_LT(view_index, GetRowCount());
+  CHECK_LT(view_index, GetRowCount());
   if (!GetIsSorted())
     return view_index;
   DCHECK_LT(view_index, view_to_model_.size())
@@ -788,8 +788,9 @@
     case ax::mojom::Action::kFocus:
       RequestFocus();
       // Setting focus should not affect the current selection.
-      if (selection_model_.empty())
+      if (selection_model_.empty() && GetRowCount() > 0) {
         SelectByViewIndex(size_t{0});
+      }
       break;
 
     case ax::mojom::Action::kScrollRight: {
@@ -1329,8 +1330,10 @@
   }
 
   if (!active_visible_column_index_.has_value()) {
-    if (!selection_model_.active().has_value() && !header_row_is_active_)
+    if (!selection_model_.active().has_value() && !header_row_is_active_ &&
+        GetRowCount()) {
       SelectByViewIndex(size_t{0});
+    }
     SetActiveVisibleColumnIndex(size_t{0});
     return;
   }
@@ -1373,6 +1376,7 @@
 void TableView::SelectByViewIndex(std::optional<size_t> view_index) {
   ui::ListSelectionModel new_selection;
   if (view_index.has_value()) {
+    CHECK_LE(view_index.value(), GetRowCount());
     SelectRowsInRangeFrom(view_index.value(), true, &new_selection);
     new_selection.set_anchor(ViewToModel(view_index.value()));
     new_selection.set_active(ViewToModel(view_index.value()));
@@ -1417,8 +1421,11 @@
     bool make_header_active =
         header_ && direction == AdvanceDirection::kDecrement;
     header_row_is_active_ = make_header_active;
-    SelectByViewIndex(make_header_active ? std::nullopt
-                                         : std::make_optional(size_t{0}));
+    if (make_header_active) {
+      SelectByViewIndex(std::nullopt);
+    } else if (GetRowCount() > 0) {
+      SelectByViewIndex(std::make_optional(size_t{0}));
+    }
     UpdateFocusRings();
     ScheduleUpdateAccessibilityFocusIfNeeded();
     return;
--- a/ui/views/controls/table/table_view_unittest.cc
+++ b/ui/views/controls/table/table_view_unittest.cc
@@ -183,6 +183,9 @@
   TestTableModel2(const TestTableModel2&) = delete;
   TestTableModel2& operator=(const TestTableModel2&) = delete;
 
+  // Clears the model entirely, leaving it empty.
+  void Clear();
+
   // Adds a new row at index |row| with values |c1_value| and |c2_value|.
   void AddRow(size_t row, int c1_value, int c2_value);
 
@@ -229,6 +232,10 @@
   AddRow(3, 3, 0);
 }
 
+void TestTableModel2::Clear() {
+  RemoveRows(0, rows_.size());
+}
+
 void TestTableModel2::AddRow(size_t row, int c1_value, int c2_value) {
   DCHECK(row <= rows_.size());
   std::vector<int> new_row;
@@ -650,6 +657,17 @@
     testing::Combine(/*use_default_construction=*/testing::Bool(),
                      /*use_rtl=*/testing::Bool()));
 
+// Using one of the arrow keys (which normally change selection) with an empty
+// table must leave the selection state empty.
+// Regression test for https://issues.chromium.org/issues/342341277
+TEST_P(TableViewTest, SelectedIndexWithNoRows) {
+  model_->Clear();
+  table_->RequestFocus();
+  EXPECT_TRUE(table_->selection_model().empty());
+  table_->OnKeyPressed(ui::KeyEvent(ui::ET_KEY_PRESSED, ui::VKEY_DOWN, 0));
+  EXPECT_TRUE(table_->selection_model().empty());
+}
+
 // Verifies GetPaintRegion.
 TEST_P(TableViewTest, GetPaintRegion) {
   // Two columns should be visible.
