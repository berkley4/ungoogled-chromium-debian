From 4e0a213db74d9a3bf893842a393a848394f102a7 Mon Sep 17 00:00:00 2001
From: David Benjamin <davidben@chromium.org>
Date: Fri, 13 Sep 2024 02:16:58 +0000
Subject: [PATCH] Fix overflow for OptimizationTypes that are out of range

This proto recently exceeded a size limit that this code had been
relying on. It's not ideal, but the best we can do is probably to not
record the larger ones in UKM.

See this UBSan failure:
https://ci.chromium.org/ui/labs/p/chromium/inv/build-8736972671094486241/test/ninja%3A%2F%2Fchrome%2Ftest%3Abrowser_tests%2FUserAnnotationsServiceExplicitAllowlistBrowserTest.OnAllowlist%2FAll.1/variant/ddb4f966843f3bd4?resultIndex=0

Bug: 40248746
Change-Id: I53c9791f8bc59106b9c38e3ba4e660502f599b86
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5858286
Commit-Queue: David Benjamin <davidben@chromium.org>
Auto-Submit: David Benjamin <davidben@chromium.org>
Reviewed-by: Sophie Chang <sophiechang@chromium.org>
Commit-Queue: Sophie Chang <sophiechang@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1354951}
---

--- a/components/optimization_guide/core/optimization_guide_navigation_data.cc
+++ b/components/optimization_guide/core/optimization_guide_navigation_data.cc
@@ -52,7 +52,11 @@
   if (!registered_optimization_types_.empty()) {
     int64_t types_bitmask = 0;
     for (const auto& optimization_type : registered_optimization_types_) {
-      types_bitmask |= (int64_t{1} << static_cast<int>(optimization_type));
+      // Optimization types that are out of range cannot be represented in this
+      // bitmask.
+      if (0 <= optimization_type && optimization_type < 64) {
+        types_bitmask |= (int64_t{1} << static_cast<int>(optimization_type));
+      }
     }
     builder.SetRegisteredOptimizationTypes(types_bitmask);
     did_record_metric = true;
