From 5fa3207532053564923a24f8e3fb2ddbc9452fc4 Mon Sep 17 00:00:00 2001
From: Juan Mojica <juanmojica@google.com>
Date: Fri, 26 Jul 2024 23:05:56 +0000
Subject: [PATCH] [lensoverlay] Do not show overlay when web contents is crashed.

Change-Id: I96e868bf8ff489f59e9c0f0c938c0a507a544833
Bug: b:353858769
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5743432
Reviewed-by: Ali Stanfield <stanfield@google.com>
Commit-Queue: Juan Mojica <juanmojica@google.com>
Cr-Commit-Position: refs/heads/main@{#1333825}
---

--- a/chrome/browser/ui/lens/lens_overlay_controller.cc
+++ b/chrome/browser/ui/lens/lens_overlay_controller.cc
@@ -352,8 +352,9 @@
     return;
   }
 
-  // The UI should only show if the tab is in the foreground.
-  if (!tab_->IsInForeground()) {
+  // The UI should only show if the tab is in the foreground or if the tab web
+  // contents is not in a crash state.
+  if (!tab_->IsInForeground() || tab_->GetContents()->IsCrashed()) {
     return;
   }
 
--- a/chrome/browser/ui/lens/lens_overlay_controller_browsertest.cc
+++ b/chrome/browser/ui/lens/lens_overlay_controller_browsertest.cc
@@ -68,6 +68,7 @@
 #include "content/public/browser/render_widget_host_view.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/referrer.h"
+#include "content/public/common/result_codes.h"
 #include "content/public/test/browser_test.h"
 #include "content/public/test/browser_test_utils.h"
 #include "content/public/test/hit_test_region_observer.h"
@@ -943,6 +944,33 @@
   EXPECT_FALSE(screenshot_bitmap.empty());
 }
 
+IN_PROC_BROWSER_TEST_F(LensOverlayControllerBrowserTest,
+                       DoesNotOpenOnCrashedWebContents) {
+  WaitForPaint();
+  // State should start in off.
+  auto* controller = browser()
+                         ->tab_strip_model()
+                         ->GetActiveTab()
+                         ->tab_features()
+                         ->lens_overlay_controller();
+  ASSERT_EQ(controller->state(), State::kOff);
+
+  // Force the live page renderer to terminate.
+  content::WebContents* tab_contents =
+      browser()->tab_strip_model()->GetActiveWebContents();
+  content::RenderProcessHost* process =
+      tab_contents->GetPrimaryMainFrame()->GetProcess();
+  content::ScopedAllowRendererCrashes allow_renderer_crashes(process);
+  process->Shutdown(content::RESULT_CODE_KILLED);
+
+  EXPECT_TRUE(
+      base::test::RunUntil([&]() { return tab_contents->IsCrashed(); }));
+
+  // Showing UI should be a no-op and remain in state off.
+  controller->ShowUI(LensOverlayInvocationSource::kAppMenu);
+  ASSERT_EQ(controller->state(), State::kOff);
+}
+
 IN_PROC_BROWSER_TEST_F(LensOverlayControllerBrowserTest, CaptureScreenshot) {
   WaitForPaint();
   // State should start in off.
