From 5a9dd8612f696455578a8b1213801a712d1454f0 Mon Sep 17 00:00:00 2001
From: Dan McArdle <dmcardle@chromium.org>
Date: Mon, 03 Jun 2024 15:24:31 +0000
Subject: [PATCH] AggregationServiceStorageSql: Only poison when db is open to avoid crash

This prevents a DCHECK crash in sql::Database::Poison(). It's unclear
whether Poison() should be so strict (see linked bug), but let's appease
it for the time being.

sql::Database::Poison() enforces that the only reason its internal `db_`
pointer could be null is when the database has been poisoned. However,
it turns out that attempting to open a directory as a database produces
exactly this scenario. As a workaround, we can change our database error
callback to not poison a database that is already closed.

Bug: 341947669
Change-Id: I2a214d5842cfde50242734dec1ae8ca61c264fcf
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5564404
Commit-Queue: Nan Lin <linnan@chromium.org>
Reviewed-by: Nan Lin <linnan@chromium.org>
Auto-Submit: Dan McArdle <dmcardle@chromium.org>
Reviewed-by: Evan Stade <estade@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1309335}
---

--- a/content/browser/aggregation_service/aggregation_service_storage_sql.cc
+++ b/content/browser/aggregation_service/aggregation_service_storage_sql.cc
@@ -1087,7 +1087,9 @@
 
   // Prevent future uses of `db_` from having any effect until we unpoison it
   // with `db_.Close()`.
-  db_.Poison();
+  if (db_.is_open()) {
+    db_.Poison();
+  }
 
   base::UmaHistogramEnumeration(
       "PrivacySandbox.AggregationService.Storage.Sql.Error",
--- a/content/browser/aggregation_service/aggregation_service_storage_sql_unittest.cc
+++ b/content/browser/aggregation_service/aggregation_service_storage_sql_unittest.cc
@@ -152,6 +152,21 @@
       AggregationServiceStorageSql::InitStatus::kSuccess, 1);
 }
 
+TEST_F(AggregationServiceStorageSqlTest, CantOpenDb_HistogramRecorded) {
+  ASSERT_TRUE(base::CreateDirectory(db_path()));
+
+  OpenDatabase();
+  GURL url(kExampleUrl);
+  PublicKeyset keyset(kExampleKeys, /*fetch_time=*/clock_.Now(),
+                      /*expiry_time=*/base::Time::Max());
+  storage_->SetPublicKeys(url, keyset);
+  CloseDatabase();
+
+  histograms_.ExpectUniqueSample(
+      "PrivacySandbox.AggregationService.Storage.Sql.InitStatus",
+      AggregationServiceStorageSql::InitStatus::kFailedToOpenDbFile, 1);
+}
+
 TEST_F(AggregationServiceStorageSqlTest,
        DatabaseInitialized_TablesAndIndexesLazilyInitialized) {
   OpenDatabase();
