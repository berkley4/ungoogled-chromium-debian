From 5ac602c2b535665f8cbee961cb6abcf99bfbea68 Mon Sep 17 00:00:00 2001
From: Sunny Sachanandani <sunnyps@chromium.org>
Date: Tue, 06 Aug 2024 14:23:42 +0000
Subject: [PATCH] graphite: Make Graphite Metal backend not crash

Graphite Metal (non-Dawn) backend is still available for debugging in
developer builds, so make it functional again by fixing the crash in
SharedContextState::GetMaxTextureSize(). Also remove the unnecessary
INT32_MAX clamping since the variable is already an int32_t.

Bug: None
Change-Id: I1ec3afbeea5f33c77b93aa78ec9caae53f62ea6f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5760502
Reviewed-by: Saifuddin Hitawala <hitawala@chromium.org>
Commit-Queue: Saifuddin Hitawala <hitawala@chromium.org>
Auto-Submit: Sunny Sachanandani <sunnyps@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1337843}
---

--- a/gpu/command_buffer/service/shared_context_state.cc
+++ b/gpu/command_buffer/service/shared_context_state.cc
@@ -102,15 +102,6 @@
   return context->makeRecorder(options);
 }
 
-#if BUILDFLAG(SKIA_USE_DAWN)
-int32_t GetDawnMaxTextureSize(gpu::DawnContextProvider* context_provider) {
-  wgpu::SupportedLimits limits = {};
-  auto succeded = context_provider->GetDevice().GetLimits(&limits);
-  CHECK(succeded);
-  return limits.limits.maxTextureDimension2D;
-}
-#endif  // BUILDFLAG(SKIA_USE_DAWN)
-
 // Used to represent Skia backend type for UMA.
 // These values are persisted to logs. Entries should not be renumbered and
 // numeric values should never be reused.
@@ -1299,24 +1290,23 @@
     NOTREACHED_NORETURN();
 #endif
   } else {
-    max_texture_size = 8192;
 #if BUILDFLAG(SKIA_USE_DAWN)
-#if BUILDFLAG(IS_IOS)
-    // Note: We currently run tests against the Graphite-Metal backend on iOS;
-    // in these contexts the Dawn context provider is not created.
     if (dawn_context_provider()) {
-      max_texture_size = GetDawnMaxTextureSize(dawn_context_provider());
+      wgpu::SupportedLimits limits = {};
+      auto succeded = dawn_context_provider()->GetDevice().GetLimits(&limits);
+      CHECK(succeded);
+      max_texture_size = limits.limits.maxTextureDimension2D;
     }
-#else
-    CHECK(dawn_context_provider());
-    max_texture_size = GetDawnMaxTextureSize(dawn_context_provider());
-#endif  // BUILDFLAG(IS_IOS)
 #endif  // BUILDFLAG(SKIA_USE_DAWN)
+#if BUILDFLAG(SKIA_USE_METAL)
+    if (metal_context_provider()) {
+      // This is a development only code path, so just assume 16K since that
+      // should be supported on non-ancient HW and ARM Macs in particular.
+      max_texture_size = 16384;
+    }
+#endif  // BUILDFLAG(SKIA_USE_METAL)
   }
-  // Ensure max_texture_size_ is less than INT_MAX so that gfx::Rect and friends
-  // can be used to accurately represent all valid sub-rects, with overflow
-  // cases, clamped to INT_MAX, always invalid.
-  max_texture_size = std::min(max_texture_size, INT32_MAX - 1);
+  CHECK_GT(max_texture_size, 0);
   return max_texture_size;
 }
 
