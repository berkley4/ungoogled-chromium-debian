From c32b60a15ecd1db875d8b1738e0b6d92a5ff2755 Mon Sep 17 00:00:00 2001
From: Samuel Maddock <samuelmaddock@electronjs.org>
Date: Thu, 30 May 2024 19:16:54 +0000
Subject: [PATCH] Fix crash with unhandled promise rejections in worker Shadow Realms

Worker thread JS contexts have a promise rejection handler, but expect
the execution context to be a worker or worklet. Shadow realms are
initialized from these contexts. A method is added to
ShadowRealmGlobalScope to access this initiator context so the existing
logic can be reused.

Bug: 339990616
Change-Id: I8951082ec566eaae4d68e551a0d70a2b0caf8e85
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5552840
Reviewed-by: Weizhong Xia <weizhong@google.com>
Reviewed-by: Nate Chapin <japhet@chromium.org>
Commit-Queue: Jeremy Rose <jeremya@chromium.org>
Reviewed-by: Yuki Shiino <yukishiino@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1308190}
---

--- a/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
+++ b/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
@@ -74,6 +74,7 @@
 #include "third_party/blink/renderer/core/inspector/main_thread_debugger.h"
 #include "third_party/blink/renderer/core/page/page.h"
 #include "third_party/blink/renderer/core/script/modulator.h"
+#include "third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.h"
 #include "third_party/blink/renderer/core/trustedtypes/trusted_types_util.h"
 #include "third_party/blink/renderer/core/workers/worker_global_scope.h"
 #include "third_party/blink/renderer/core/workers/worklet_global_scope.h"
@@ -342,10 +343,15 @@
   if (!execution_context)
     return;
 
+  ExecutionContext* root_worker_context =
+      execution_context->IsShadowRealmGlobalScope()
+          ? To<ShadowRealmGlobalScope>(execution_context)
+                ->GetRootInitiatorExecutionContext()
+          : execution_context;
+  DCHECK(root_worker_context->IsWorkerOrWorkletGlobalScope());
+
   auto* script_controller =
-      execution_context->IsWorkerGlobalScope()
-          ? To<WorkerGlobalScope>(execution_context)->ScriptController()
-          : To<WorkletGlobalScope>(execution_context)->ScriptController();
+      To<WorkerOrWorkletGlobalScope>(root_worker_context)->ScriptController();
   DCHECK(script_controller);
 
   PromiseRejectHandler(data, *script_controller->GetRejectedPromises(),
--- a/third_party/blink/renderer/core/inspector/worker_thread_debugger.cc
+++ b/third_party/blink/renderer/core/inspector/worker_thread_debugger.cc
@@ -38,6 +38,7 @@
 #include "third_party/blink/renderer/core/inspector/identifiers_factory.h"
 #include "third_party/blink/renderer/core/inspector/v8_inspector_string.h"
 #include "third_party/blink/renderer/core/inspector/worker_inspector_controller.h"
+#include "third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.h"
 #include "third_party/blink/renderer/core/workers/dedicated_worker_global_scope.h"
 #include "third_party/blink/renderer/core/workers/worker_global_scope.h"
 #include "third_party/blink/renderer/core/workers/worker_reporting_proxy.h"
@@ -80,7 +81,14 @@
     SourceLocation* location) {
   if (!context)
     return;
-  To<WorkerOrWorkletGlobalScope>(context)
+
+  ExecutionContext* root_worker_context =
+      context->IsShadowRealmGlobalScope()
+          ? To<ShadowRealmGlobalScope>(context)
+                ->GetRootInitiatorExecutionContext()
+          : context;
+
+  To<WorkerOrWorkletGlobalScope>(root_worker_context)
       ->GetThread()
       ->GetWorkerReportingProxy()
       .ReportConsoleMessage(source, level, message, location);
--- a/third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.cc
+++ b/third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.cc
@@ -17,6 +17,14 @@
                        initiator_execution_context->GetAgent()),
       initiator_execution_context_(initiator_execution_context) {}
 
+ExecutionContext* ShadowRealmGlobalScope::GetRootInitiatorExecutionContext()
+    const {
+  return initiator_execution_context_->IsShadowRealmGlobalScope()
+             ? To<ShadowRealmGlobalScope>(initiator_execution_context_.Get())
+                   ->GetRootInitiatorExecutionContext()
+             : initiator_execution_context_.Get();
+}
+
 void ShadowRealmGlobalScope::Trace(Visitor* visitor) const {
   visitor->Trace(initiator_execution_context_);
   EventTarget::Trace(visitor);
@@ -54,8 +62,7 @@
 }
 
 const KURL& ShadowRealmGlobalScope::Url() const {
-  NOTREACHED();
-  return url_;
+  return GetRootInitiatorExecutionContext()->Url();
 }
 
 const KURL& ShadowRealmGlobalScope::BaseURL() const {
@@ -100,7 +107,6 @@
 }
 
 EventTarget* ShadowRealmGlobalScope::ErrorEventTarget() {
-  NOTREACHED();
   return nullptr;
 }
 
--- a/third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.h
+++ b/third_party/blink/renderer/core/shadow_realm/shadow_realm_global_scope.h
@@ -9,6 +9,7 @@
 #include "third_party/blink/renderer/core/dom/events/event_target.h"
 #include "third_party/blink/renderer/core/execution_context/execution_context.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
+#include "third_party/blink/renderer/platform/wtf/casting.h"
 
 namespace blink {
 
@@ -20,6 +21,10 @@
   explicit ShadowRealmGlobalScope(
       ExecutionContext* initiator_execution_context);
 
+  // Get the root execution context where the outermost shadow realm was
+  // initialized.
+  ExecutionContext* GetRootInitiatorExecutionContext() const;
+
   void Trace(Visitor* visitor) const override;
 
   // EventTarget:
@@ -65,6 +70,13 @@
   ShadowRealmToken token_;
 };
 
+template <>
+struct DowncastTraits<ShadowRealmGlobalScope> {
+  static bool AllowFrom(const ExecutionContext& context) {
+    return context.IsShadowRealmGlobalScope();
+  }
+};
+
 }  // namespace blink
 
 #endif  // THIRD_PARTY_BLINK_RENDERER_CORE_SHADOW_REALM_SHADOW_REALM_GLOBAL_SCOPE_H_
--- a/third_party/blink/web_tests/VirtualTestSuites
+++ b/third_party/blink/web_tests/VirtualTestSuites
@@ -2987,5 +2987,19 @@
       "--enable-blink-features=KeyboardFocusableScrollersOptOut"
     ],
     "expires": "May 1, 2025"
+  },
+  {
+    "prefix": "shadow-realm-enabled",
+    "platforms": ["Linux", "Mac", "Win"],
+    "bases": [
+      "external/wpt/service-workers/service-worker/shadowrealm-promise-rejection.https.html"
+    ],
+    "exclusive_tests": "ALL",
+    "args": ["--js-flags=--harmony-shadow-realm"],
+    "expires": "May 23, 2026",
+    "owners": [
+      "syg@chromium.org",
+      "samuelmaddock@electronjs.org"
+    ]
   }
 ]
--- /dev/null
+++ b/third_party/blink/web_tests/external/wpt/service-workers/service-worker/resources/shadowrealm-promise-rejection-test-worker.js
@@ -0,0 +1,11 @@
+var realm = new ShadowRealm();
+
+// Promise rejection from ShadowRealm should be handled within service
+// worker thread.
+realm.evaluate('Promise.reject("foo"); () => {}');
+
+// Nested ShadowRealms are also possible.
+realm.evaluate(`
+const innerRealm = new ShadowRealm();
+innerRealm.evaluate('Promise.reject("foo"); () => {}');
+`);
--- /dev/null
+++ b/third_party/blink/web_tests/external/wpt/service-workers/service-worker/shadowrealm-promise-rejection.https.html
@@ -0,0 +1,21 @@
+<!DOCTYPE html>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="resources/test-helpers.sub.js"></script>
+<body>
+<script>
+const worker = 'resources/shadowrealm-promise-rejection-test-worker.js';
+
+promise_test(async (t) => {
+  assert_not_equals(
+              self.ShadowRealm, undefined,
+              'ShadowRealm should be defined.');
+  const scope = 'resources/';
+  const reg = await service_worker_unregister_and_register(t, worker, scope);
+  await wait_for_state(t, reg.installing, 'activated');
+  await reg.unregister();
+}, 'Promise rejections within worker thread ShadowRealms are handled');
+
+</script>
+</body>
+</html>
--- /dev/null
+++ b/third_party/blink/web_tests/virtual/shadow-realm-enabled/README.md
@@ -0,0 +1,6 @@
+ShadowRealm is a TC39 proposal ongoing the standardization process.
+This test suite is used for any tests requiring
+`--harmony-shadow-realm` until the proposal is finalized. Once it's
+finalized, this test suite can be removed.
+
+See https://github.com/tc39/proposal-shadowrealm/
\ No newline at end of file
