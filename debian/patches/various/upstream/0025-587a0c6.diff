From 587a0c6ad98a4f9e819590ab599f33ae691f94e4 Mon Sep 17 00:00:00 2001
From: Devon Loehr <dloehr@google.com>
Date: Tue, 20 Aug 2024 15:01:28 +0000
Subject: [PATCH] Replace variable-length arrays with FixedArrays

Variable-length arrays are not part of the C++ standard, and are
dangerous to use because they allocate a potentially-unbounded
amount of data on the stack. In addition, they trigger a clang warning
(-Wvla-extension) which is currently suppressed in Chromium builds.

This change replaces VLAs with base::FixedArray, which has similar
performance but does not risk overflowing the stack (arrays which are
too large will be allocated on the heap instead).

Bug: 349656479
Change-Id: Ic0ff49d35334b93644bb15e02a54cf7ceb34158e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5749861
Reviewed-by: Rob Schonberger <robsc@chromium.org>
Commit-Queue: Devon Loehr <dloehr@google.com>
Reviewed-by: Harry Cutts <hcutts@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1344145}
---

--- a/ui/events/ozone/evdev/event_device_info.cc
+++ b/ui/events/ozone/evdev/event_device_info.cc
@@ -16,6 +16,7 @@
 #include "base/no_destructor.h"
 #include "base/notreached.h"
 #include "base/threading/thread_restrictions.h"
+#include "base/types/fixed_array.h"
 #include "ui/events/devices/device_util_linux.h"
 #include "ui/events/ozone/evdev/keyboard_mouse_combo_device_metrics.h"
 #include "ui/events/ozone/features.h"
@@ -499,19 +500,18 @@
   int max_num_slots = GetAbsMtSlotCount();
 
   // |request| is MT code + slots.
-  int32_t request[max_num_slots + 1];
-  int32_t* request_code = &request[0];
-  int32_t* request_slots = &request[1];
+  base::FixedArray<int32_t> request(max_num_slots + 1);
+  int32_t& request_code = request.front();
   for (unsigned int i = EVDEV_ABS_MT_FIRST; i <= EVDEV_ABS_MT_LAST; ++i) {
     if (!HasAbsEvent(i))
       continue;
 
-    memset(request, 0, sizeof(request));
-    *request_code = i;
-    GetSlotValues(fd, path, request, max_num_slots + 1);
+    memset(request.data(), 0, request.memsize());
+    request_code = i;
+    GetSlotValues(fd, path, request.data(), max_num_slots + 1);
 
     std::vector<int32_t>* slots = &slot_values_[i - EVDEV_ABS_MT_FIRST];
-    slots->assign(request_slots, request_slots + max_num_slots);
+    slots->assign(request.begin() + 1, request.begin() + 1 + max_num_slots);
   }
 
   if (!GetDeviceName(fd, path, &name_))
--- a/ui/events/ozone/evdev/libgestures_glue/gesture_interpreter_libevdev_cros.cc
+++ b/ui/events/ozone/evdev/libgestures_glue/gesture_interpreter_libevdev_cros.cc
@@ -15,6 +15,7 @@
 #include "base/strings/stringprintf.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
+#include "base/types/fixed_array.h"
 #include "ui/events/base_event_utils.h"
 #include "ui/events/event.h"
 #include "ui/events/event_utils.h"
@@ -262,8 +263,8 @@
   }
 
   // Touch.
-  FingerState fingers[Event_Get_Slot_Count(evdev)];
-  memset(&fingers, 0, sizeof(fingers));
+  base::FixedArray<FingerState> fingers(Event_Get_Slot_Count(evdev));
+  memset(fingers.data(), 0, fingers.memsize());
   int current_finger = 0;
   for (int i = 0; i < evstate->slot_count; i++) {
     MtSlotPtr slot = &evstate->slots[i];
@@ -282,7 +283,7 @@
   }
   hwstate.touch_cnt = Event_Get_Touch_Count(evdev);
   hwstate.finger_cnt = current_finger;
-  hwstate.fingers = fingers;
+  hwstate.fingers = fingers.data();
 
   // Buttons.
   if (Event_Get_Button_Left(evdev))
