From 64b99f283e66a9f982d4bdaa4ee6b5fc77c853c2 Mon Sep 17 00:00:00 2001
From: Matt Giuca <mgiuca@chromium.org>
Date: Thu, 23 May 2024 01:40:43 +0000
Subject: [PATCH] Fix UAF in ContainerQueryParser.

Adds a test case that used to cause an ASAN crash.

Added comments to CSSTokenizer::TokenizeToEOF and CSSParserToken on
their proper usage.

Bug: b/341640868
Bug: b/341607464
Change-Id: I38c9186ef620c268b37e5ecefebfb73a96accf4f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5554455
Commit-Queue: Matt Giuca <mgiuca@chromium.org>
Reviewed-by: Steinar H Gunderson <sesse@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1304815}
---

--- a/third_party/blink/renderer/core/css/parser/container_query_parser.cc
+++ b/third_party/blink/renderer/core/css/parser/container_query_parser.cc
@@ -132,7 +132,8 @@
                           MediaQueryParser::SyntaxLevel::kLevel4) {}
 
 const MediaQueryExpNode* ContainerQueryParser::ParseCondition(String value) {
-  auto [tokens, raw_offsets] = CSSTokenizer(value).TokenizeToEOFWithOffsets();
+  CSSTokenizer tokenizer(value);
+  auto [tokens, raw_offsets] = tokenizer.TokenizeToEOFWithOffsets();
   CSSParserTokenRange range(tokens);
   CSSParserTokenOffsets offsets(tokens, std::move(raw_offsets), value);
   return ParseCondition(range, offsets);
--- a/third_party/blink/renderer/core/css/parser/container_query_parser_test.cc
+++ b/third_party/blink/renderer/core/css/parser/container_query_parser_test.cc
@@ -86,6 +86,11 @@
     EXPECT_EQ(String(test), ParseQuery(test));
   }
 
+  // Escaped (unnecessarily but validly) characters in the identifier.
+  EXPECT_EQ("(width)", ParseQuery("(\\77 idth)"));
+  // Repro case for b/341640868
+  EXPECT_EQ("(min-width: 100px)", ParseQuery("(min\\2d width: 100px)"));
+
   // Invalid:
   EXPECT_EQ("<unknown>", ParseQuery("(min-width)"));
   EXPECT_EQ("<unknown>", ParseQuery("((width) or (width) and (width))"));
--- a/third_party/blink/renderer/core/css/parser/css_parser_token.h
+++ b/third_party/blink/renderer/core/css/parser/css_parser_token.h
@@ -95,6 +95,8 @@
         value_is_8bit_(false),  // Don't care.
         padding_(0)             // Don't care.
   {}
+
+  // The resulting CSSParserToken may hold a reference to the data in value.
   CSSParserToken(CSSParserTokenType type,
                  StringView value,
                  BlockType block_type = kNotBlock)
--- a/third_party/blink/renderer/core/css/parser/css_tokenizer.h
+++ b/third_party/blink/renderer/core/css/parser/css_tokenizer.h
@@ -31,6 +31,9 @@
   CSSTokenizer(const CSSTokenizer&) = delete;
   CSSTokenizer& operator=(const CSSTokenizer&) = delete;
 
+  // The CSSParserTokens in the result may hold references to the CSSTokenizer
+  // object, or the string data referenced by the CSSTokenizer. Do not use the
+  // tokens after the CSSTokenizer or its underlying String goes out of scope.
   Vector<CSSParserToken, 32> TokenizeToEOF();
   wtf_size_t TokenCount();
 
@@ -38,6 +41,8 @@
   // There's an extra offset at the very end that returns the end byte
   // of the last token, i.e., the length of the input string.
   // This matches the convention CSSParserTokenOffsets expects.
+  //
+  // See the warning about holding a reference in TokenizeToEOF().
   std::pair<Vector<CSSParserToken, 32>, Vector<wtf_size_t, 32>>
   TokenizeToEOFWithOffsets();
 
@@ -45,6 +50,8 @@
   // to solve a design mistake in CSS.
   //
   // https://drafts.csswg.org/css-syntax/#consume-unicode-range-value
+  //
+  // See the warning about holding a reference in TokenizeToEOF().
   Vector<CSSParserToken, 32> TokenizeToEOFWithUnicodeRanges();
 
   wtf_size_t Offset() const { return input_.Offset(); }
