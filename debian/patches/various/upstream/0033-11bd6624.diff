From 11bd6624c7b6221847bf3f2cb69869f9743b8b22 Mon Sep 17 00:00:00 2001
From: vikas soni <vikassoni@chromium.org>
Date: Mon, 24 Jun 2024 19:44:35 +0000
Subject: [PATCH] Clear GrShader disk cache on invalid cache key prefix.

Currently shader disk cache is only cleared on a GPU process crash but
is never cleared when chrome version, driver version, android version
etc changes. This results in stale cache entries lying around in disk
cache which in turn reduces space for valid newer entries.

This CL implements a finch feature to clear the GrShader disk cache
whenever an invalid cache key prefix is seen.

Bug: 348707692
Change-Id: I8e9edee6176af41e7339f9861098b033e594d019
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5647966
Commit-Queue: Ken Buchanan <kenrb@chromium.org>
Auto-Submit: vikas soni <vikassoni@chromium.org>
Reviewed-by: Vasiliy Telezhnikov <vasilyt@chromium.org>
Reviewed-by: Ken Buchanan <kenrb@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1318740}
---

--- a/components/viz/host/gpu_host_impl.cc
+++ b/components/viz/host/gpu_host_impl.cc
@@ -705,6 +705,22 @@
   delegate_->RecordLogMessage(severity, header, message);
 }
 
+void GpuHostImpl::ClearGrShaderDiskCache() {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+
+  auto* gpu_disk_cache_factory = delegate_->GetGpuDiskCacheFactory();
+  for (auto& [client_id, cache] : client_id_to_caches_) {
+    // This call will temporarily extend the lifetime of the cache (kept
+    // alive in the factory), and may drop loads of cached shader binaries if
+    // it takes a while to complete. As we are intentionally dropping all
+    // binaries, this behavior is fine.
+    if (client_id == gpu::kGrShaderCacheClientId) {
+      gpu_disk_cache_factory->ClearByCache(
+          cache, base::Time(), base::Time::Max(), base::DoNothing());
+    }
+  }
+}
+
 #if BUILDFLAG(USE_VIZ_DEBUGGER)
 void GpuHostImpl::LogFrame(base::Value frame_data) {
   if (!viz_debug_output_callback_.is_null())
--- a/components/viz/host/gpu_host_impl.h
+++ b/components/viz/host/gpu_host_impl.h
@@ -277,6 +277,7 @@
   void RecordLogMessage(int32_t severity,
                         const std::string& header,
                         const std::string& message) override;
+  void ClearGrShaderDiskCache() override;
 
   // Implements mojom::VizDebugOutput and is called by VizDebugger.
 #if BUILDFLAG(USE_VIZ_DEBUGGER)
--- a/components/viz/service/gl/gpu_service_impl.cc
+++ b/components/viz/service/gl/gpu_service_impl.cc
@@ -1086,6 +1086,14 @@
       // Remove the prefix from the key before load.
       no_prefix_key = key.substr(prefix.length() + 1);
     } else {
+      // If the prefix is not ok, its likely that all the other entries in the
+      // cache will have prefix that does not matches. Clear the whole disk
+      // cache in that case to remove all stale entries and make room for newer
+      // entries.
+      if (base::FeatureList::IsEnabled(
+              features::kClearGrShaderDiskCacheOnInvalidPrefix)) {
+        gpu_host_->ClearGrShaderDiskCache();
+      }
       return;
     }
   }
--- a/gpu/config/gpu_finch_features.cc
+++ b/gpu/config/gpu_finch_features.cc
@@ -217,6 +217,13 @@
              "GenGpuDiskCacheKeyPrefixInGpuService",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+// When enabled, Grshader disk cache will be cleared on startup if any cache
+// entry prefix does not match with the current prefix. prefix is made up of
+// various parameters like chrome version, driver version etc.
+BASE_FEATURE(kClearGrShaderDiskCacheOnInvalidPrefix,
+             "ClearGrShaderDiskCacheOnInvalidPrefix",
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
 // Controls the decode acceleration of JPEG images (as opposed to camera
 // captures) in Chrome OS using the VA-API.
 // TODO(andrescj): remove or enable by default in Chrome OS once
--- a/gpu/config/gpu_finch_features.h
+++ b/gpu/config/gpu_finch_features.h
@@ -66,6 +66,8 @@
 
 GPU_EXPORT BASE_DECLARE_FEATURE(kGenGpuDiskCacheKeyPrefixInGpuService);
 
+GPU_EXPORT BASE_DECLARE_FEATURE(kClearGrShaderDiskCacheOnInvalidPrefix);
+
 GPU_EXPORT BASE_DECLARE_FEATURE(kVaapiJpegImageDecodeAcceleration);
 
 GPU_EXPORT BASE_DECLARE_FEATURE(kVaapiWebPImageDecodeAcceleration);
--- a/services/viz/privileged/mojom/gl/gpu_host.mojom
+++ b/services/viz/privileged/mojom/gl/gpu_host.mojom
@@ -74,4 +74,7 @@
                   mojo_base.mojom.ByteString blob);
 
   RecordLogMessage(int32 severity, string header, string message);
+
+  // Tells the GPU host to clear the shader disk cache.
+  ClearGrShaderDiskCache();
 };
