From f61f79d4cc73285091aff908a0bcddabb6f27bac Mon Sep 17 00:00:00 2001
From: Monica Basta <msalama@chromium.org>
Date: Thu, 23 May 2024 08:32:34 +0000
Subject: [PATCH] Fix crash due to Access token request during signout

`policy::UserPolicySigninService::OnPrimaryAccountChanged` triggers the
flow to
`invalidation::PerUserTopicSubscriptionManager::RequestAccessToken()`,
which relies on the `IdentityProvider` to request an access token with
the active account.

`ProfileIdentityProvider` relies on the same notification to update the
primary account. This code behaves incorrectly and relies on the order
of calling the observer in such `ProfileIdentityProvider` might not have
yet been notified of the primary account change if it comes later in the
observer list.

This CL:
- Removes caching of the primary account from `ProfileIdentityProvider`.
- Uses `PrimaryAccountAccessTokenFetcher` which handles gracefully if
  the primary account is empty.
- Remove redundant code.

Bug: 341839832, b/321900823
Change-Id: I710f3fa721d79e3d18e36178223831f6ff703331
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5554493
Reviewed-by: Roland Bock <rbock@google.com>
Commit-Queue: Monica Basta <msalama@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1304919}
---

--- a/components/invalidation/impl/profile_identity_provider.cc
+++ b/components/invalidation/impl/profile_identity_provider.cc
@@ -5,18 +5,20 @@
 #include "components/invalidation/impl/profile_identity_provider.h"
 
 #include "base/functional/bind.h"
+#include "components/signin/public/base/consent_level.h"
 #include "components/signin/public/identity_manager/access_token_info.h"
+#include "components/signin/public/identity_manager/account_info.h"
+#include "components/signin/public/identity_manager/primary_account_access_token_fetcher.h"
 
 namespace invalidation {
 
 namespace {
 
-// ActiveAccountAccessTokenFetcher implementation that is backed by
-// IdentityManager and wraps an AccessTokenFetcher internally.
+// `ActiveAccountAccessTokenFetcher` implementation that is backed by
+// `IdentityManager` and wraps an `PrimaryAccountAccessTokenFetcher` internally.
 class AccessTokenFetcherAdaptor : public ActiveAccountAccessTokenFetcher {
  public:
-  AccessTokenFetcherAdaptor(const CoreAccountId& active_account_id,
-                            const std::string& oauth_consumer_name,
+  AccessTokenFetcherAdaptor(const std::string& oauth_consumer_name,
                             signin::IdentityManager* identity_manager,
                             const signin::ScopeSet& scopes,
                             ActiveAccountAccessTokenCallback callback);
@@ -31,27 +33,32 @@
                                     signin::AccessTokenInfo access_token_info);
 
   ActiveAccountAccessTokenCallback callback_;
-  std::unique_ptr<signin::AccessTokenFetcher> access_token_fetcher_;
+  std::unique_ptr<signin::PrimaryAccountAccessTokenFetcher>
+      primary_account_access_token_fetcher_;
 };
 
 AccessTokenFetcherAdaptor::AccessTokenFetcherAdaptor(
-    const CoreAccountId& active_account_id,
     const std::string& oauth_consumer_name,
     signin::IdentityManager* identity_manager,
     const signin::ScopeSet& scopes,
     ActiveAccountAccessTokenCallback callback)
     : callback_(std::move(callback)) {
-  access_token_fetcher_ = identity_manager->CreateAccessTokenFetcherForAccount(
-      active_account_id, oauth_consumer_name, scopes,
-      base::BindOnce(&AccessTokenFetcherAdaptor::HandleTokenRequestCompletion,
-                     base::Unretained(this)),
-      signin::AccessTokenFetcher::Mode::kImmediate);
+  primary_account_access_token_fetcher_ =
+      std::make_unique<signin::PrimaryAccountAccessTokenFetcher>(
+          oauth_consumer_name, identity_manager, scopes,
+          base::BindOnce(
+              &AccessTokenFetcherAdaptor::HandleTokenRequestCompletion,
+              // It is safe to use base::Unretained as
+              // |this| owns |access_token_fetcher_|.
+              base::Unretained(this)),
+          signin::PrimaryAccountAccessTokenFetcher::Mode::kImmediate,
+          signin::ConsentLevel::kSignin);
 }
 
 void AccessTokenFetcherAdaptor::HandleTokenRequestCompletion(
     GoogleServiceAuthError error,
     signin::AccessTokenInfo access_token_info) {
-  access_token_fetcher_.reset();
+  primary_account_access_token_fetcher_.reset();
 
   std::move(callback_).Run(error, access_token_info.token);
 }
@@ -62,9 +69,6 @@
     signin::IdentityManager* identity_manager)
     : identity_manager_(identity_manager) {
   identity_manager_->AddObserver(this);
-
-  active_account_id_ =
-      identity_manager_->GetPrimaryAccountId(signin::ConsentLevel::kSignin);
 }
 
 ProfileIdentityProvider::~ProfileIdentityProvider() {
@@ -72,12 +76,13 @@
 }
 
 CoreAccountId ProfileIdentityProvider::GetActiveAccountId() {
-  return active_account_id_;
+  return identity_manager_->GetPrimaryAccountId(signin::ConsentLevel::kSignin);
 }
 
 bool ProfileIdentityProvider::IsActiveAccountWithRefreshToken() {
-  if (GetActiveAccountId().empty() || !identity_manager_ ||
-      !identity_manager_->HasAccountWithRefreshToken(GetActiveAccountId())) {
+  if (GetActiveAccountId().empty() ||
+      !identity_manager_->HasPrimaryAccountWithRefreshToken(
+          signin::ConsentLevel::kSignin)) {
     return false;
   }
 
@@ -90,8 +95,7 @@
     const signin::ScopeSet& scopes,
     ActiveAccountAccessTokenCallback callback) {
   return std::make_unique<AccessTokenFetcherAdaptor>(
-      GetActiveAccountId(), oauth_consumer_name, identity_manager_, scopes,
-      std::move(callback));
+      oauth_consumer_name, identity_manager_, scopes, std::move(callback));
 }
 
 void ProfileIdentityProvider::InvalidateAccessToken(
@@ -103,19 +107,21 @@
 
 void ProfileIdentityProvider::OnPrimaryAccountChanged(
     const signin::PrimaryAccountChangeEvent& event_details) {
-  CoreAccountId account_id =
-      event_details.GetCurrentState().primary_account.account_id;
-
-  if (account_id == active_account_id_) {
+  if (event_details.GetEventTypeFor(signin::ConsentLevel::kSignin) ==
+      signin::PrimaryAccountChangeEvent::Type::kNone) {
     return;
   }
 
-  if (!active_account_id_.empty()) {
+  const CoreAccountId& previous_account_id =
+      event_details.GetPreviousState().primary_account.account_id;
+  const CoreAccountId& current_account_id =
+      event_details.GetCurrentState().primary_account.account_id;
+
+  if (!previous_account_id.empty()) {
     FireOnActiveAccountLogout();
   }
 
-  active_account_id_ = account_id;
-  if (!active_account_id_.empty()) {
+  if (!current_account_id.empty()) {
     FireOnActiveAccountLogin();
   }
 }
@@ -125,9 +131,4 @@
   ProcessRefreshTokenUpdateForAccount(account_info.account_id);
 }
 
-void ProfileIdentityProvider::OnRefreshTokenRemovedForAccount(
-    const CoreAccountId& account_id) {
-  ProcessRefreshTokenRemovalForAccount(account_id);
-}
-
 }  // namespace invalidation
--- a/components/invalidation/impl/profile_identity_provider.h
+++ b/components/invalidation/impl/profile_identity_provider.h
@@ -37,13 +37,9 @@
       const signin::PrimaryAccountChangeEvent& event_details) override;
   void OnRefreshTokenUpdatedForAccount(
       const CoreAccountInfo& account_info) override;
-  void OnRefreshTokenRemovedForAccount(
-      const CoreAccountId& account_id) override;
 
  private:
   const raw_ptr<signin::IdentityManager> identity_manager_;
-
-  CoreAccountId active_account_id_;
 };
 
 }  // namespace invalidation
--- a/components/invalidation/public/identity_provider.cc
+++ b/components/invalidation/public/identity_provider.cc
@@ -29,13 +29,6 @@
     observer.OnActiveAccountRefreshTokenUpdated();
 }
 
-void IdentityProvider::ProcessRefreshTokenRemovalForAccount(
-    const CoreAccountId& account_id) {
-  if (account_id != GetActiveAccountId()) {
-    return;
-  }
-}
-
 void IdentityProvider::FireOnActiveAccountLogin() {
   for (auto& observer : observers_)
     observer.OnActiveAccountLogin();
--- a/components/invalidation/public/identity_provider.h
+++ b/components/invalidation/public/identity_provider.h
@@ -98,10 +98,6 @@
   // |account_id| is the active account.
   void ProcessRefreshTokenUpdateForAccount(const CoreAccountId& account_id);
 
-  // Processes a refresh token removal, firing the observer callback if
-  // |account_id| is the active account.
-  void ProcessRefreshTokenRemovalForAccount(const CoreAccountId& account_id);
-
   // Fires an OnActiveAccountLogin notification.
   void FireOnActiveAccountLogin();
 
