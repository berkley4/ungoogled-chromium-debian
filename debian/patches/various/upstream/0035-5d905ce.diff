From 5d905ceb2b287a2843e88426d6fbb0acf67848a7 Mon Sep 17 00:00:00 2001
From: Sunny Sachanandani <sunnyps@chromium.org>
Date: Wed, 28 Aug 2024 00:15:01 +0000
Subject: [PATCH] gpu: Cache max texture size in SharedContextState

If GetMaxTextureSize() is called after context loss (or destruction),
the value returned by GL_MAX_TEXTURE_SIZE may be 0 which trips a CHECK.
Cache the max texture size in SharedContextState on the first call so
that we avoid triggering this CHECK. Also, make it a DCHECK to avoid
crashes on the first call.

Bug: 359127346
Change-Id: I370abb49589d1fae045ad5169e22f2f32cc5758f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5809919
Reviewed-by: Saifuddin Hitawala <hitawala@chromium.org>
Auto-Submit: Sunny Sachanandani <sunnyps@chromium.org>
Commit-Queue: Sunny Sachanandani <sunnyps@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1347731}
---

--- a/gpu/command_buffer/service/shared_context_state.cc
+++ b/gpu/command_buffer/service/shared_context_state.cc
@@ -1275,7 +1275,10 @@
   }
 }
 
-int32_t SharedContextState::GetMaxTextureSize() const {
+int32_t SharedContextState::GetMaxTextureSize() {
+  if (max_texture_size_.has_value()) {
+    return max_texture_size_.value();
+  }
   int32_t max_texture_size = 0;
   if (IsUsingGL()) {
     gl::GLApi* const api = gl::g_current_gl_context;
@@ -1306,7 +1309,8 @@
     }
 #endif  // BUILDFLAG(SKIA_USE_METAL)
   }
-  CHECK_GT(max_texture_size, 0);
+  DCHECK_GT(max_texture_size, 0);
+  max_texture_size_ = max_texture_size;
   return max_texture_size;
 }
 
--- a/gpu/command_buffer/service/shared_context_state.h
+++ b/gpu/command_buffer/service/shared_context_state.h
@@ -273,7 +273,7 @@
 
   void ScheduleSkiaCleanup();
 
-  int32_t GetMaxTextureSize() const;
+  int32_t GetMaxTextureSize();
 
 #if BUILDFLAG(IS_WIN)
   // Get the D3D11 device used for the compositing.
@@ -437,6 +437,8 @@
   scoped_refptr<raster::GraphiteCacheController>
       gpu_main_graphite_cache_controller_;
 
+  std::optional<int> max_texture_size_;
+
   base::WeakPtrFactory<SharedContextState> weak_ptr_factory_{this};
 };
 
