From 69e4bbf0128dfdaa67f5aa32a055e2479cde7a1f Mon Sep 17 00:00:00 2001
From: Peter Boström <pbos@chromium.org>
Date: Fri, 30 Aug 2024 06:26:16 +0000
Subject: [PATCH] Exclude top of NOTREACHED tail still hit in stable

This includes the top ~30 in M128 and ~20 in M127 on ChromeOS.
... except the few ones I can't find due to ICF, or ones that have
already been fixed or removed as erroneous.

This is to further derisk NOTREACHED-fatal rollout. Per crash-reporting
volumes on Windows we should be about 1/50 as crashy as CHECK failures
after this has landed.

     40264195, 40895492, 354661907, 363109548, 361609999, 352381196,
     361612971, 362124606, 355803743, 41369768, 345232410, 346893376,
     40910294

Bug: 40580068, 332263206, 40942310, 40948203, 355803743, 362506636,
Change-Id: I56e42b3b7c8ce17d6dabb5d7edb48db925240e34
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5824114
Owners-Override: Lei Zhang <thestig@chromium.org>
Reviewed-by: Lei Zhang <thestig@chromium.org>
Code-Coverage: findit-for-me@appspot.gserviceaccount.com <findit-for-me@appspot.gserviceaccount.com>
Commit-Queue: Peter Boström <pbos@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1349061}
---

--- a/base/metrics/sample_vector.cc
+++ b/base/metrics/sample_vector.cc
@@ -370,7 +370,7 @@
       SCOPED_CRASH_KEY_NUMBER("SampleVector", "range_max",
                               bucket_ranges_->range(dest_index + 1));
 #endif  // !BUILDFLAG(IS_NACL)
-      NOTREACHED_IN_MIGRATION()
+      DUMP_WILL_BE_NOTREACHED()
           << "sample=" << min << "," << max
           << "; range=" << bucket_ranges_->range(dest_index) << ","
           << bucket_ranges_->range(dest_index + 1);
--- a/chrome/browser/ash/login/signin/token_handle_util.cc
+++ b/chrome/browser/ash/login/signin/token_handle_util.cc
@@ -252,7 +252,7 @@
   const user_manager::User* user =
       user_manager::UserManager::Get()->FindUser(account_id);
   if (!user) {
-    NOTREACHED_IN_MIGRATION() << "Invalid user";
+    DUMP_WILL_BE_NOTREACHED() << "Invalid user";
     FinishWithStatus(std::move(callback), token, account_id, status,
                      /*user_has_gaia_password=*/true);
     return;
--- a/chrome/browser/cart/cart_discount_fetcher.cc
+++ b/chrome/browser/cart/cart_discount_fetcher.cc
@@ -326,12 +326,12 @@
 
 bool ValidateResponse(const std::optional<base::Value>& response) {
   if (!response) {
-    NOTREACHED_IN_MIGRATION() << "Response is not valid";
+    DUMP_WILL_BE_NOTREACHED() << "Response is not valid";
     return false;
   }
 
   if (!response->is_dict()) {
-    NOTREACHED_IN_MIGRATION()
+    DUMP_WILL_BE_NOTREACHED()
         << "Wrong response format, response is not a dictionary. Response: "
         << response->DebugString();
     return false;
--- a/chrome/browser/download/notification/download_item_notification.cc
+++ b/chrome/browser/download/notification/download_item_notification.cc
@@ -1006,7 +1006,7 @@
     case download::DOWNLOAD_DANGER_TYPE_PROMPT_FOR_LOCAL_PASSWORD_SCANNING:
     case download::DOWNLOAD_DANGER_TYPE_ASYNC_LOCAL_PASSWORD_SCANNING: {
       // TODO(crbug.com/40074456): Implement UX for this danger type.
-      NOTREACHED_IN_MIGRATION();
+      DUMP_WILL_BE_NOTREACHED();
       break;
     }
     case download::DOWNLOAD_DANGER_TYPE_BLOCKED_SCAN_FAILED: {
--- a/chrome/browser/extensions/extension_context_menu_model.cc
+++ b/chrome/browser/extensions/extension_context_menu_model.cc
@@ -165,7 +165,7 @@
     default:
       break;
   }
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return ContextMenuAction::kNoAction;
 }
 
--- a/chrome/browser/first_run/upgrade_util_win.cc
+++ b/chrome/browser/first_run/upgrade_util_win.cc
@@ -371,7 +371,7 @@
   // At this point the chrome.exe has been swapped with the new one.
   if (!RelaunchChromeBrowser(command_line)) {
     // The relaunch failed. Feel free to panic now.
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
   }
   return true;
 }
--- a/chrome/browser/ui/views/permissions/chip/permission_dashboard_controller.cc
+++ b/chrome/browser/ui/views/permissions/chip/permission_dashboard_controller.cc
@@ -554,7 +554,7 @@
       return l10n_util::GetStringUTF16(IDS_MICROPHONE_NOT_ALLOWED);
     }
 
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return std::u16string();
   }
 
--- a/chrome/browser/ui/webui/ash/cloud_upload/cloud_upload_dialog.cc
+++ b/chrome/browser/ui/webui/ash/cloud_upload/cloud_upload_dialog.cc
@@ -367,7 +367,7 @@
     std::unique_ptr<ash::cloud_upload::CloudOpenMetrics> cloud_open_metrics,
     std::optional<const std::string> choice) {
   if (!IsOpenInOfficeTask(task)) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return;
   }
 
--- a/chrome/browser/web_applications/os_integration/web_app_uninstallation_via_os_settings_registration.cc
+++ b/chrome/browser/web_applications/os_integration/web_app_uninstallation_via_os_settings_registration.cc
@@ -29,7 +29,7 @@
 bool UnregisterUninstallationViaOsSettingsWithOs(
     const webapps::AppId& app_id,
     const base::FilePath& profile_path) {
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return true;
 }
 
--- a/components/autofill/core/browser/webdata/autocomplete/autocomplete_table.cc
+++ b/components/autofill/core/browser/webdata/autocomplete/autocomplete_table.cc
@@ -323,7 +323,7 @@
   s.BindInt64(1, end_time_t);
 
   if (!s.Step()) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return false;
   }
   return s.ColumnInt(0);
--- a/components/performance_manager/service_worker_context_adapter.cc
+++ b/components/performance_manager/service_worker_context_adapter.cc
@@ -403,12 +403,12 @@
   // not already a client of |version_id|.
   auto it = service_worker_clients_.find(version_id);
   if (it == service_worker_clients_.end()) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return;
   }
 
   if (it->second.find(client_uuid) == it->second.end()) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return;
   }
 
--- a/components/permissions/permission_uma_util.cc
+++ b/components/permissions/permission_uma_util.cc
@@ -1651,7 +1651,7 @@
       base::UmaHistogramEnumeration(histogram_name,
                                     PermissionChangeAction::RESET_FROM_DENIED);
     } else {
-      NOTREACHED_IN_MIGRATION();
+      DUMP_WILL_BE_NOTREACHED();
     }
   } else if (setting_before == ContentSetting::CONTENT_SETTING_ALLOW) {
     if (setting_after == ContentSetting::CONTENT_SETTING_BLOCK) {
--- a/components/policy/core/common/device_local_account_type.cc
+++ b/components/policy/core/common/device_local_account_type.cc
@@ -76,7 +76,7 @@
   }
 
   // |user_id| is a device-local account but its type is not recognized.
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return base::unexpected(GetDeviceLocalAccountTypeError::kUnknownDomain);
 }
 
--- a/components/sessions/core/session_service_commands.cc
+++ b/components/sessions/core/session_service_commands.cc
@@ -222,7 +222,7 @@
     case PERSISTED_SHOW_STATE_DOCKED_DEPRECATED:
       return ui::SHOW_STATE_NORMAL;
   }
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return ui::SHOW_STATE_NORMAL;
 }
 
--- a/components/user_manager/user_manager_base.cc
+++ b/components/user_manager/user_manager_base.cc
@@ -396,24 +396,24 @@
 void UserManagerBase::SwitchActiveUser(const AccountId& account_id) {
   User* user = FindUserAndModify(account_id);
   if (!user) {
-    NOTREACHED_IN_MIGRATION() << "Switching to a non-existing user";
+    DUMP_WILL_BE_NOTREACHED() << "Switching to a non-existing user";
     return;
   }
   if (user == active_user_) {
-    NOTREACHED_IN_MIGRATION() << "Switching to a user who is already active";
+    DUMP_WILL_BE_NOTREACHED() << "Switching to a user who is already active";
     return;
   }
   if (!user->is_logged_in()) {
-    NOTREACHED_IN_MIGRATION() << "Switching to a user that is not logged in";
+    DUMP_WILL_BE_NOTREACHED() << "Switching to a user that is not logged in";
     return;
   }
   if (!user->HasGaiaAccount()) {
-    NOTREACHED_IN_MIGRATION()
+    DUMP_WILL_BE_NOTREACHED()
         << "Switching to a user without gaia account (non-regular one)";
     return;
   }
   if (user->username_hash().empty()) {
-    NOTREACHED_IN_MIGRATION()
+    DUMP_WILL_BE_NOTREACHED()
         << "Switching to a user that doesn't have username_hash set";
     return;
   }
--- a/content/browser/indexed_db/indexed_db_leveldb_coding.cc
+++ b/content/browser/indexed_db/indexed_db_leveldb_coding.cc
@@ -896,7 +896,7 @@
       return blink::mojom::IDBKeyType::Min;
   }
 
-  NOTREACHED_IN_MIGRATION() << "Got invalid type " << type;
+  DUMP_WILL_BE_NOTREACHED() << "Got invalid type " << type;
   return blink::mojom::IDBKeyType::Invalid;
 }
 
--- a/content/browser/renderer_host/render_widget_host_view_child_frame.cc
+++ b/content/browser/renderer_host/render_widget_host_view_child_frame.cc
@@ -1049,7 +1049,7 @@
     if (gesture_event.SourceDevice() == blink::WebGestureDevice::kTouchscreen) {
       return blink::mojom::InputEventResultState::kConsumed;
     }
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
   }
 
   if (input_event.GetType() == blink::WebInputEvent::Type::kGestureFlingStart) {
--- a/content/child/child_thread_impl.cc
+++ b/content/child/child_thread_impl.cc
@@ -911,7 +911,7 @@
   // All associated interfaces are requested through RenderThreadImpl.
   LOG(ERROR) << "Receiver for unknown Channel-associated interface: "
              << interface_name;
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
 }
 
 void ChildThreadImpl::ExposeInterfacesToBrowser(mojo::BinderMap binders) {
--- a/extensions/browser/api/bluetooth/bluetooth_api_utils.cc
+++ b/extensions/browser/api/bluetooth/bluetooth_api_utils.cc
@@ -39,7 +39,7 @@
       *output = bluetooth::VendorIdSource::kUsb;
       return true;
     default:
-      NOTREACHED_IN_MIGRATION();
+      DUMP_WILL_BE_NOTREACHED();
       return false;
   }
 }
--- a/extensions/browser/api/runtime/runtime_api.cc
+++ b/extensions/browser/api/runtime/runtime_api.cc
@@ -890,7 +890,7 @@
       case mojom::ViewType::kBackgroundContents:
       case mojom::ViewType::kComponent:
       case mojom::ViewType::kExtensionBackgroundPage:
-        NOTREACHED_IN_MIGRATION();
+        DUMP_WILL_BE_NOTREACHED();
         break;
 
       case mojom::ViewType::kExtensionPopup:
--- a/extensions/browser/api/usb/usb_api.cc
+++ b/extensions/browser/api/usb/usb_api.cc
@@ -218,7 +218,7 @@
     case UsbTransferStatus::SHORT_PACKET:
       return kErrorTransferLength;
     default:
-      NOTREACHED_IN_MIGRATION();
+      DUMP_WILL_BE_NOTREACHED();
       return "";
   }
 }
--- a/extensions/browser/extension_registrar.cc
+++ b/extensions/browser/extension_registrar.cc
@@ -77,7 +77,7 @@
       // but that's caused problems. There are apparently times when this
       // happens that we aren't accounting for. We should track those down and
       // fix them, but it can be tricky.
-      NOTREACHED_IN_MIGRATION()
+      DUMP_WILL_BE_NOTREACHED()
           << "Attempted to downgrade extension." << "\nID: " << extension->id()
           << "\nOld Version: " << old->version()
           << "\nNew Version: " << extension->version()
--- a/services/network/cors/cors_url_loader.cc
+++ b/services/network/cors/cors_url_loader.cc
@@ -1204,7 +1204,7 @@
 
     // DCHECK that we never run into this scenario, but fail the request for
     // safety if this ever happens in production.
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
   }
 
   status.private_network_access_preflight_result =
--- a/storage/browser/file_system/obfuscated_file_util.cc
+++ b/storage/browser/file_system/obfuscated_file_util.cc
@@ -805,7 +805,7 @@
       -UsageForPath(file_info.name.size()) - platform_file_info.size;
   AllocateQuota(context, growth);
   if (!db->RemoveFileInfo(file_id)) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return base::File::FILE_ERROR_FAILED;
   }
   UpdateUsage(context, url, growth);
--- a/third_party/blink/renderer/core/css/css_math_expression_node.cc
+++ b/third_party/blink/renderer/core/css/css_math_expression_node.cc
@@ -863,7 +863,7 @@
   if (HasDoubleValue(ResolvedUnitType())) {
     return value_->GetDoubleValueWithoutClamping();
   }
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return 0;
 }
 
--- a/third_party/blink/renderer/core/html/forms/input_type.cc
+++ b/third_party/blink/renderer/core/html/forms/input_type.cc
@@ -563,7 +563,7 @@
 }
 
 String InputType::ValueNotEqualText(const Decimal& value) const {
-  NOTREACHED_IN_MIGRATION();
+  DUMP_WILL_BE_NOTREACHED();
   return String();
 }
 
--- a/third_party/blink/renderer/core/layout/inline/fragment_items_builder.cc
+++ b/third_party/blink/renderer/core/layout/inline/fragment_items_builder.cc
@@ -321,7 +321,7 @@
           current_items_data = items_data = &node_.ItemsData(false);
         if (UNLIKELY(
                 !current_items_data->IsValidOffset(break_token->Start()))) {
-          NOTREACHED_IN_MIGRATION();
+          DUMP_WILL_BE_NOTREACHED();
           break;
         }
 
--- a/third_party/blink/renderer/core/layout/inline/inline_caret_position.cc
+++ b/third_party/blink/renderer/core/layout/inline/inline_caret_position.cc
@@ -455,7 +455,7 @@
   if (!mapping) {
     // TODO(yosin): We should find when we reach here[1].
     // [1] http://crbug.com/1100481
-    NOTREACHED_IN_MIGRATION() << context;
+    DUMP_WILL_BE_NOTREACHED() << context;
     return InlineCaretPosition();
   }
   const std::optional<unsigned> maybe_offset =
@@ -523,7 +523,7 @@
         // TODO(yosin): We're not sure why |mapping| is |nullptr|. It seems
         // we are attempt to use destroyed/moved |FragmentItem|.
         // See http://crbug.com/1145514
-        NOTREACHED_IN_MIGRATION()
+        DUMP_WILL_BE_NOTREACHED()
             << cursor << " " << cursor.Current().GetLayoutObject();
         return PositionWithAffinity();
       }
--- a/third_party/blink/renderer/core/layout/layout_block.cc
+++ b/third_party/blink/renderer/core/layout/layout_block.cc
@@ -334,7 +334,7 @@
 
   // Avoid painting dirty objects because descendants maybe already destroyed.
   if (UNLIKELY(NeedsLayout() && !ChildLayoutBlockedByDisplayLock())) {
-    NOTREACHED_IN_MIGRATION();
+    DUMP_WILL_BE_NOTREACHED();
     return;
   }
 
--- a/third_party/blink/renderer/core/layout/layout_inline.cc
+++ b/third_party/blink/renderer/core/layout/layout_inline.cc
@@ -623,7 +623,7 @@
     // TODO(crbug.com/965976): We should fix the root cause of the missed
     // layout.
     if (UNLIKELY(NeedsLayout())) {
-      NOTREACHED_IN_MIGRATION();
+      DUMP_WILL_BE_NOTREACHED();
       return false;
     }
 
--- a/ui/base/resource/resource_bundle.cc
+++ b/ui/base/resource/resource_bundle.cc
@@ -236,9 +236,8 @@
       // TODO(oshima): Android unit_tests runs at DSF=3 with 100P assets.
       return gfx::ImageSkiaRep();
 #else
-      NOTREACHED_IN_MIGRATION() << "Unable to load bitmap image with id "
+      DUMP_WILL_BE_NOTREACHED() << "Unable to load bitmap image with id "
                                 << resource_id_ << ", scale=" << scale;
-      return gfx::ImageSkiaRep(CreateEmptyBitmap(), scale);
 #endif
     }
 
--- a/ui/gl/gl_bindings_autogen_gl.cc
+++ b/ui/gl/gl_bindings_autogen_gl.cc
@@ -14498,7 +14498,7 @@
 
 namespace {
 void NoContextHelper(const char* method_name) {
-  NOTREACHED_IN_MIGRATION()
+  DUMP_WILL_BE_NOTREACHED()
       << "Trying to call " << method_name << " without current GL context";
   LOG(ERROR) << "Trying to call " << method_name
              << " without current GL context";
