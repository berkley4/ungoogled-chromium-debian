From e0b6ba85e39496fcd240f527218aee546fda7652 Mon Sep 17 00:00:00 2001
From: "Steinar H. Gunderson" <sesse@chromium.org>
Date: Wed, 4 Jan 2023 15:45:22 +0000
Subject: [PATCH] Reorganize NodeData.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Make several reorganizations in the NodeData hierarchy, with the
goal to simplify the generated code and save memory:

 - Collapse NodeRenderingData into NodeData; most nodes will be
   rendered, so it's better to avoid having two different objects.
   (Also, this would cause odd effects when NodeRareData would
   point to NodeRenderingData, causing it to be somewhat ambiguous
   which of the NodeData base fields were canonical. Now, when
   upgrading from NodeData to NodeRareData, we move the base members
   into the new object and throw away the NodeData entirely.)

 - Move connected_frame_count_ and element_flags_, which were only
   used for NodeRareData, out of the NodeData base class.

 - Reorganize member order so that is_pseudo_element_, added in
   6e7c2ce0, can hide in the padding between other fields instead
   of creating an entirely new 8-byte group.

 - Simplify Element::GetComputedStyle(); this can now be a simple
   getter with nothing else (if we have an Element, we don't need
   to check IsElementNode()).

Speedometer2 results are very weakly positive (M1 on Pinpoint,
95% CI, lower is better, results with p>0.05 skipped):

  Angular2-TypeScript-TodoMVC               -2.3%  [ -4.2%,  -0.7%]
  Elm-TodoMVC                               -1.2%  [ -2.0%,  -0.2%]
  Flight-TodoMVC                            -0.5%  [ -1.0%,  -0.0%]
  React-Redux-TodoMVC                       -0.3%  [ -0.6%,  -0.0%]

Motionmark (same, but higher is better):

  motionmark_ramp_multiply                  +2.4%  [ +0.8%,  +4.6%]

MotionMark win-10-perf:

  motionmark_ramp_leaves                    +1.1%  [ +0.2%,  +1.9%]
  motionmark_ramp_multiply                  +2.5%  [ +1.7%,  +3.4%]

Style perftest (64-bit, LTO but no PGO, higher is better):

  Initial style (µs)     Before     After    Perf      95% CI (BCa)
  =================== ========= ========= ======= =================
  ECommerce               10527     10262   +2.6%  [ +2.1%,  +3.5%]
  Encyclopedia           100877     99228   +1.7%  [ +1.3%,  +2.1%]
  Extension              134470    132022   +1.9%  [ +1.3%,  +2.7%]
  News                    42091     41825   +0.6%  [ +0.2%,  +1.3%]
  Search                   2807      2816   -0.3%  [ -0.5%,  +0.4%]
  Social1                 24171     23957   +0.9%  [ +0.3%,  +1.9%]
  Social2                  1077      1064   +1.3%  [ +0.7%,  +2.6%]
  Sports                  35412     34808   +1.7%  [ +1.3%,  +2.5%]
  Video                   42454     42195   +0.6%  [ +0.2%,  +1.5%]
  Geometric mean                            +1.2%  [ +0.9%,  +1.8%]

  Recalc style (µs)      Before     After    Perf      95% CI (BCa)
  =================== ========= ========= ======= =================
  ECommerce               11800     11552   +2.1%  [ +1.3%,  +3.5%]
  Encyclopedia            87012     84968   +2.4%  [ +2.1%,  +2.7%]
  Extension              124582    121435   +2.6%  [ +2.3%,  +3.7%]
  News                    30395     29729   +2.2%  [ +1.6%,  +3.1%]
  Search                    234       229   +2.3%  [ +0.9%,  +3.1%]
  Social1                 16254     16022   +1.4%  [ +0.7%,  +2.1%]
  Social2                   566       551   +2.7%  [ +2.1%,  +4.2%]
  Sports                  25049     24295   +3.1%  [ +2.7%,  +4.3%]
  Video                   25339     25018   +1.3%  [ +0.9%,  +2.0%]
  Geometric mean                            +2.2%  [ +1.9%,  +3.0%]

GC memory used by the same tests:

  Video          19122 kB → 18999 kB ( -123 kB)
  Extension      12198 kB → 11972 kB ( -226 kB)
  News            7228 kB →  7261 kB (  -33 kB)
  ECommerce       1752 kB →  1672 kB (  -80 kB)
  Social1         4996 kB →  5005 kB (   +9 kB)
  Social2         1615 kB →  1639 kB (  +24 kB)
  Encyclopedia   11030 kB → 10881 kB ( -149 kB)
  Sports         10919 kB → 10883 kB (  -36 kB)
  Search          2662 kB →  2696 kB (  +30 kB)

There's always a bit of noise in these numbers, but if we force
a GC before running, it's clear that they are uniformly positive:

  Video          14278 kB → 14246 kB  ( -32 kB)
  Extension       9501 kB →  9251 kB  (-250 kB)
  News            5507 kB →  5474 kB  ( -33 kB)
  ECommerce       1384 kB →  1362 kB  ( -22 kB)
  Social1         4126 kB →  4085 kB  ( -41 kB)
  Social2         1012 kB →  1013 kB  (  +1 kB)
  Encyclopedia    9184 kB →  8945 kB  (-239 kB)
  Sports         10051 kB →  9983 kB  ( -68 kB)
  Search          1807 kB →  1808 kB  (  +1 kB)

There's a strong reduction in the amount of code generated;
e.g. content_shell on x86-64 goes down by 30,272 bytes in the
code segment. The Android APK is down ~11 kB.

Change-Id: Iefe09c315631851c88ffd6e76c67c88950ce4cbb
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4112014
Commit-Queue: Steinar H Gunderson <sesse@chromium.org>
Reviewed-by: Joey Arhar <jarhar@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1088740}
---
 third_party/blink/renderer/core/dom/element.h |   4 +
 .../renderer/core/dom/element_rare_data.cc    |   2 +-
 .../renderer/core/dom/element_rare_data.h     |   2 +-
 .../core/dom/element_rare_data_base.h         |   5 +-
 .../core/dom/element_rare_data_vector.cc      |   3 +-
 .../core/dom/element_rare_data_vector.h       |   2 +-
 .../core/dom/element_rare_data_vector_test.cc |   2 +-
 third_party/blink/renderer/core/dom/node.cc   |  61 ++++------
 third_party/blink/renderer/core/dom/node.h    |  18 +--
 .../renderer/core/dom/node_computed_style.h   |  14 ++-
 .../blink/renderer/core/dom/node_rare_data.cc |  33 ++---
 .../blink/renderer/core/dom/node_rare_data.h  | 114 ++++++++----------
 .../blink/renderer/core/dom/pseudo_element.cc |   2 +-
 13 files changed, 118 insertions(+), 144 deletions(-)

--- a/third_party/blink/renderer/core/dom/element.h
+++ b/third_party/blink/renderer/core/dom/element.h
@@ -583,6 +583,10 @@
   virtual void CloneNonAttributePropertiesFrom(const Element&,
                                                CloneChildrenFlag) {}
 
+  // NOTE: This shadows Node::GetComputedStyle().
+  // The definition is in node_computed_style.h.
+  inline const ComputedStyle* GetComputedStyle() const;
+
   void AttachLayoutTree(AttachContext&) override;
   void DetachLayoutTree(bool performing_reattach = false) override;
 
--- a/third_party/blink/renderer/core/dom/element_rare_data.cc
+++ b/third_party/blink/renderer/core/dom/element_rare_data.cc
@@ -51,7 +51,7 @@
   wtf_size_t anchored_popover_count;
 };
 
-ElementRareData::ElementRareData(NodeRenderingData* node_layout_data)
+ElementRareData::ElementRareData(NodeData* node_layout_data)
     : ElementRareDataBase(node_layout_data), class_list_(nullptr) {}
 
 ElementRareData::~ElementRareData() {
--- a/third_party/blink/renderer/core/dom/element_rare_data.h
+++ b/third_party/blink/renderer/core/dom/element_rare_data.h
@@ -63,7 +63,7 @@
 
 class ElementRareData final : public ElementRareDataBase {
  public:
-  explicit ElementRareData(NodeRenderingData*);
+  explicit ElementRareData(NodeData*);
   ~ElementRareData() override;
 
   void SetPseudoElement(
--- a/third_party/blink/renderer/core/dom/element_rare_data_base.h
+++ b/third_party/blink/renderer/core/dom/element_rare_data_base.h
@@ -42,8 +42,9 @@
 
 class ElementRareDataBase : public NodeRareData {
  public:
-  explicit ElementRareDataBase(NodeRenderingData* node_layout_data)
-      : NodeRareData(ClassType::kElementRareData, node_layout_data) {}
+  explicit ElementRareDataBase(NodeData* node_layout_data)
+      : NodeRareData(ClassType::kElementRareData,
+                     std::move(*node_layout_data)) {}
 
   virtual void SetPseudoElement(
       PseudoId,
--- a/third_party/blink/renderer/core/dom/element_rare_data_vector.cc
+++ b/third_party/blink/renderer/core/dom/element_rare_data_vector.cc
@@ -35,8 +35,7 @@
 
 namespace blink {
 
-ElementRareDataVector::ElementRareDataVector(
-    NodeRenderingData* node_layout_data)
+ElementRareDataVector::ElementRareDataVector(NodeData* node_layout_data)
     : ElementRareDataBase(node_layout_data) {}
 
 ElementRareDataVector::~ElementRareDataVector() {
--- a/third_party/blink/renderer/core/dom/element_rare_data_vector.h
+++ b/third_party/blink/renderer/core/dom/element_rare_data_vector.h
@@ -121,7 +121,7 @@
   }
 
  public:
-  explicit ElementRareDataVector(NodeRenderingData*);
+  explicit ElementRareDataVector(NodeData*);
   ~ElementRareDataVector() override;
 
   void SetPseudoElement(
--- a/third_party/blink/renderer/core/dom/element_rare_data_vector_test.cc
+++ b/third_party/blink/renderer/core/dom/element_rare_data_vector_test.cc
@@ -20,7 +20,7 @@
  public:
   void SetUp() override {
     rare_data_ = MakeGarbageCollected<ElementRareDataVector>(
-        MakeGarbageCollected<NodeRenderingData>(nullptr, nullptr));
+        MakeGarbageCollected<NodeData>(nullptr, nullptr));
   }
 
   void SetField(unsigned field_id, ElementRareDataField* field) {
--- a/third_party/blink/renderer/core/dom/node.cc
+++ b/third_party/blink/renderer/core/dom/node.cc
@@ -319,7 +319,7 @@
       tree_scope_(tree_scope),
       previous_(nullptr),
       next_(nullptr),
-      data_(&NodeRenderingData::SharedEmptyData()) {
+      data_(&NodeData::SharedEmptyData()) {
   DCHECK(tree_scope_ || type == kCreateDocument || type == kCreateShadowRoot);
 #if DUMP_NODE_STATISTICS
   LiveNodeSet().insert(this);
@@ -337,13 +337,12 @@
 NodeRareData& Node::CreateRareData() {
   if (IsElementNode()) {
     if (RuntimeEnabledFeatures::ElementSuperRareDataEnabled()) {
-      data_ = MakeGarbageCollected<ElementRareDataVector>(
-          DataAsNodeRenderingData());
+      data_ = MakeGarbageCollected<ElementRareDataVector>(data_);
     } else {
-      data_ = MakeGarbageCollected<ElementRareData>(DataAsNodeRenderingData());
+      data_ = MakeGarbageCollected<ElementRareData>(data_);
     }
   } else {
-    data_ = MakeGarbageCollected<NodeRareData>(DataAsNodeRenderingData());
+    data_ = MakeGarbageCollected<NodeRareData>(std::move(*data_));
   }
 
   DCHECK(data_);
@@ -1018,32 +1017,22 @@
 }
 
 void Node::SetLayoutObject(LayoutObject* layout_object) {
-  NodeRenderingData* node_layout_data =
-      HasRareData() ? DataAsNodeRareData()->GetNodeRenderingData()
-                    : DataAsNodeRenderingData();
-
   DCHECK(!layout_object || layout_object->GetNode() == this);
 
-  // Already pointing to a non empty NodeRenderingData so just set the pointer
+  // Already pointing to a non empty NodeData so just set the pointer
   // to the new LayoutObject.
-  if (!node_layout_data->IsSharedEmptyData()) {
-    node_layout_data->SetLayoutObject(layout_object);
+  if (!data_->IsSharedEmptyData()) {
+    data_->SetLayoutObject(layout_object);
     return;
   }
 
   if (!layout_object)
     return;
 
-  // Swap the NodeRenderingData to point to a new NodeRenderingData instead of
+  // Swap the NodeData to point to a new NodeData instead of
   // the static SharedEmptyData instance.
-  DCHECK(!node_layout_data->GetComputedStyle());
-  node_layout_data =
-      MakeGarbageCollected<NodeRenderingData>(layout_object, nullptr);
-  if (HasRareData()) {
-    DataAsNodeRareData()->SetNodeRenderingData(node_layout_data);
-  } else {
-    data_ = node_layout_data;
-  }
+  DCHECK(!data_->GetComputedStyle());
+  data_ = MakeGarbageCollected<NodeData>(layout_object, nullptr);
 }
 
 void Node::SetComputedStyle(scoped_refptr<const ComputedStyle> computed_style) {
@@ -1055,14 +1044,10 @@
         ->UpdateViewTransitionNames(*element, computed_style.get());
   }
 
-  NodeRenderingData* node_layout_data =
-      HasRareData() ? DataAsNodeRareData()->GetNodeRenderingData()
-                    : DataAsNodeRenderingData();
-
-  // Already pointing to a non empty NodeRenderingData so just set the pointer
+  // Already pointing to a non empty NodeData so just set the pointer
   // to the new LayoutObject.
-  if (!node_layout_data->IsSharedEmptyData()) {
-    node_layout_data->SetComputedStyle(computed_style);
+  if (!data_->IsSharedEmptyData()) {
+    data_->SetComputedStyle(computed_style);
     return;
   }
 
@@ -1074,16 +1059,10 @@
   DCHECK(computed_style->IsEnsuredInDisplayNone() ||
          LayoutTreeBuilderTraversal::Parent(*this));
 
-  // Swap the NodeRenderingData to point to a new NodeRenderingData instead of
+  // Swap the NodeData to point to a new NodeData instead of
   // the static SharedEmptyData instance.
-  DCHECK(!node_layout_data->GetLayoutObject());
-  node_layout_data =
-      MakeGarbageCollected<NodeRenderingData>(nullptr, computed_style);
-  if (HasRareData()) {
-    DataAsNodeRareData()->SetNodeRenderingData(node_layout_data);
-  } else {
-    data_ = node_layout_data;
-  }
+  DCHECK(!data_->GetLayoutObject());
+  data_ = MakeGarbageCollected<NodeData>(nullptr, computed_style);
 }
 
 LayoutBoxModelObject* Node::GetLayoutBoxModelObject() const {
@@ -2219,6 +2198,13 @@
                                kDocumentPositionContains | connection;
 }
 
+NodeData& Node::EnsureMutableData() {
+  if (data_->IsSharedEmptyData()) {
+    data_ = MakeGarbageCollected<NodeData>(nullptr, nullptr);
+  }
+  return *data_;
+}
+
 void Node::InvalidateIfHasEffectiveAppearance() const {
   auto* layout_object = GetLayoutObject();
   if (!layout_object)
@@ -2597,6 +2583,7 @@
     DCHECK_NE(&GetDocument(), &new_document);
   }
 #endif  // DCHECK_IS_ON()
+
   // In rare situations, this node may be the focused element of the old
   // document. In this case, we need to clear the focused element of the old
   // document, and since we are currently in an event forbidden scope, we can't
--- a/third_party/blink/renderer/core/dom/node.h
+++ b/third_party/blink/renderer/core/dom/node.h
@@ -339,10 +339,9 @@
 
   DISABLE_CFI_PERF bool IsPseudoElement() const {
 #if DCHECK_IS_ON()
-    DCHECK_EQ(HasRareData() && DataAsNodeRareData()->IsPseudoElement(),
-              GetPseudoId() != kPseudoIdNone);
+    DCHECK_EQ(data_->IsPseudoElement(), GetPseudoId() != kPseudoIdNone);
 #endif
-    return HasRareData() && DataAsNodeRareData()->IsPseudoElement();
+    return data_->IsPseudoElement();
   }
   DISABLE_CFI_PERF bool IsBeforePseudoElement() const {
     return GetPseudoId() == kPseudoIdBefore;
@@ -722,11 +721,7 @@
   // in hot code paths.
   // Note that if a Node has a layoutObject, it's parentNode is guaranteed to
   // have one as well.
-  LayoutObject* GetLayoutObject() const {
-    return HasRareData()
-               ? DataAsNodeRareData()->GetNodeRenderingData()->GetLayoutObject()
-               : DataAsNodeRenderingData()->GetLayoutObject();
-  }
+  LayoutObject* GetLayoutObject() const { return data_->GetLayoutObject(); }
   void SetLayoutObject(LayoutObject*);
   // Use these two methods with caution.
   LayoutBox* GetLayoutBox() const;
@@ -1140,6 +1135,7 @@
 
     return CreateRareData();
   }
+  NodeData& EnsureMutableData();
 
   void SetHasCustomStyleCallbacks() {
     SetFlag(true, kHasCustomStyleCallbacksFlag);
@@ -1155,6 +1151,8 @@
 
   void InvalidateIfHasEffectiveAppearance() const;
 
+  inline const ComputedStyle* GetComputedStyleAssumingElement() const;
+
  private:
   // Gets nodeName without caching AtomicStrings. Used by
   // debugName. Compositor may call debugName from the "impl" thread
@@ -1192,10 +1190,6 @@
     DCHECK(HasRareData());
     return reinterpret_cast<NodeRareData*>(data_.Get());
   }
-  NodeRenderingData* DataAsNodeRenderingData() const {
-    DCHECK(!HasRareData());
-    return reinterpret_cast<NodeRenderingData*>(data_.Get());
-  }
   ShadowRoot* GetSlotAssignmentRoot() const;
 
   void AddCandidateDirectionalityForSlot();
--- a/third_party/blink/renderer/core/dom/node_computed_style.h
+++ b/third_party/blink/renderer/core/dom/node_computed_style.h
@@ -34,10 +34,7 @@
 
 inline const ComputedStyle* Node::GetComputedStyle() const {
   if (IsElementNode()) {
-    return HasRareData() ? DataAsNodeRareData()
-                               ->GetNodeRenderingData()
-                               ->GetComputedStyle()
-                         : DataAsNodeRenderingData()->GetComputedStyle();
+    return GetComputedStyleAssumingElement();
   }
   // Text nodes and Document.
   if (LayoutObject* layout_object = GetLayoutObject())
@@ -51,5 +48,14 @@
   return *style;
 }
 
+inline const ComputedStyle* Node::GetComputedStyleAssumingElement() const {
+  DCHECK(IsElementNode());
+  return data_->GetComputedStyle();
+}
+
+inline const ComputedStyle* Element::GetComputedStyle() const {
+  return GetComputedStyleAssumingElement();
+}
+
 }  // namespace blink
 #endif  // THIRD_PARTY_BLINK_RENDERER_CORE_DOM_NODE_COMPUTED_STYLE_H_
--- a/third_party/blink/renderer/core/dom/node_rare_data.cc
+++ b/third_party/blink/renderer/core/dom/node_rare_data.cc
@@ -46,7 +46,8 @@
 namespace blink {
 
 struct SameSizeAsNodeRareData : NodeData {
-  Member<void*> member_[5];
+  uint16_t bit_fields_;
+  Member<void*> member_[4];
 };
 
 ASSERT_SIZE(NodeRareData, SameSizeAsNodeRareData);
@@ -78,30 +79,31 @@
   registry_.EraseAt(registry_.Find(registration));
 }
 
-void NodeData::Trace(Visitor* visitor) const {}
-
-NodeRenderingData::NodeRenderingData(
-    LayoutObject* layout_object,
-    scoped_refptr<const ComputedStyle> computed_style)
-    : NodeData(ClassType::kNodeRenderingData),
+NodeData::NodeData(LayoutObject* layout_object,
+                   scoped_refptr<const ComputedStyle> computed_style)
+    : computed_style_(computed_style),
       layout_object_(layout_object),
-      computed_style_(computed_style) {}
+      bit_field_(RestyleFlags::encode(0) |
+                 ClassTypeData::encode(static_cast<uint16_t>(
+                     ClassType::kNodeRareData))  // Just pick any.
+      ) {}
+
+NodeData::NodeData(blink::NodeData&&) = default;
+NodeData::~NodeData() = default;
 
-void NodeRenderingData::SetComputedStyle(
+void NodeData::SetComputedStyle(
     scoped_refptr<const ComputedStyle> computed_style) {
   DCHECK_NE(&SharedEmptyData(), this);
   computed_style_ = computed_style;
 }
 
-NodeRenderingData& NodeRenderingData::SharedEmptyData() {
-  DEFINE_STATIC_LOCAL(
-      Persistent<NodeRenderingData>, shared_empty_data,
-      (MakeGarbageCollected<NodeRenderingData>(nullptr, nullptr)));
+NodeData& NodeData::SharedEmptyData() {
+  DEFINE_STATIC_LOCAL(Persistent<NodeData>, shared_empty_data,
+                      (MakeGarbageCollected<NodeData>(nullptr, nullptr)));
   return *shared_empty_data;
 }
-void NodeRenderingData::Trace(Visitor* visitor) const {
+void NodeData::Trace(Visitor* visitor) const {
   visitor->Trace(layout_object_);
-  NodeData::Trace(visitor);
 }
 
 void NodeRareData::RegisterScrollTimeline(ScrollTimeline* timeline) {
@@ -127,7 +129,6 @@
 void NodeRareData::Trace(blink::Visitor* visitor) const {
   visitor->Trace(mutation_observer_data_);
   visitor->Trace(flat_tree_node_data_);
-  visitor->Trace(node_layout_data_);
   visitor->Trace(node_lists_);
   visitor->Trace(scroll_timelines_);
   NodeData::Trace(visitor);
--- a/third_party/blink/renderer/core/dom/node_rare_data.h
+++ b/third_party/blink/renderer/core/dom/node_rare_data.h
@@ -41,7 +41,6 @@
 class LayoutObject;
 class MutationObserverRegistration;
 class NodeListsNodeData;
-class NodeRenderingData;
 class NodeRareData;
 class ScrollTimeline;
 
@@ -80,21 +79,44 @@
     kNumberOfDynamicRestyleFlags = 14
   };
 
+  // NOTE: This can only distinguish between NodeRareData and ElementRareData,
+  // not a regular NodeData (because we never need to do that).
   enum class ClassType : uint8_t {
     kNodeRareData,
     kElementRareData,
-    kNodeRenderingData,
-    kLastType = kNodeRenderingData
+    kLastType = kElementRareData,
   };
 
-  virtual ~NodeData() = default;
+  virtual ~NodeData();
   virtual void Trace(Visitor*) const;
 
+  CORE_EXPORT NodeData(LayoutObject*,
+                       scoped_refptr<const ComputedStyle> computed_style);
+  NodeData(const NodeData&) = delete;
+  NodeData(NodeData&&);
+
+  LayoutObject* GetLayoutObject() const { return layout_object_; }
+  void SetLayoutObject(LayoutObject* layout_object) {
+    DCHECK_NE(&SharedEmptyData(), this);
+    layout_object_ = layout_object;
+  }
+
+  const ComputedStyle* GetComputedStyle() const {
+    return computed_style_.get();
+  }
+  void SetComputedStyle(scoped_refptr<const ComputedStyle> computed_style);
+
+  void SetIsPseudoElement(bool value) { is_pseudo_element_ = value; }
+  bool IsPseudoElement() const { return is_pseudo_element_; }
+
+  static NodeData& SharedEmptyData();
+  bool IsSharedEmptyData() { return this == &SharedEmptyData(); }
+
  protected:
   using BitField = WTF::ConcurrentlyReadBitField<uint16_t>;
   using RestyleFlags =
       BitField::DefineFirstValue<uint16_t, kNumberOfDynamicRestyleFlags>;
-  static constexpr size_t kClassTypeBits = 2;
+  static constexpr size_t kClassTypeBits = 1;
   static_assert(static_cast<size_t>(ClassType::kLastType) <
                     ((size_t{1} << kClassTypeBits)),
                 "Too many subtypes to fit into bitfield.");
@@ -103,35 +125,22 @@
                                     kClassTypeBits,
                                     WTF::BitFieldValueConstness::kConst>;
 
-  explicit NodeData(ClassType sub_type)
-      : connected_frame_count_(0),
-        element_flags_(0),
-        is_pseudo_element_(false),
-        bit_field_(RestyleFlags::encode(0) |
-                   ClassTypeData::encode(static_cast<uint8_t>(sub_type))) {}
-
   ClassType GetClassType() const {
     return static_cast<ClassType>(bit_field_.get_concurrently<ClassTypeData>());
   }
 
-  uint16_t connected_frame_count_ : kConnectedFrameCountBits;
-  uint16_t element_flags_ : kNumberOfElementFlags;
-  bool is_pseudo_element_ : 1;
+ protected:
+  scoped_refptr<const ComputedStyle> computed_style_;
+  Member<LayoutObject> layout_object_;
   BitField bit_field_;
+  bool is_pseudo_element_ = false;
+  // 8 free bits here (or 16, if moving is_pseudo_element_ into bit_field_).
 
   friend struct DowncastTraits<NodeRareData>;
-  friend struct DowncastTraits<NodeRenderingData>;
   friend struct DowncastTraits<ElementRareData>;
 };
 
 template <>
-struct DowncastTraits<NodeRenderingData> {
-  static bool AllowFrom(const NodeData& node_data) {
-    return node_data.GetClassType() == NodeData::ClassType::kNodeRenderingData;
-  }
-};
-
-template <>
 struct DowncastTraits<NodeRareData> {
   static bool AllowFrom(const NodeData& node_data) {
     return node_data.GetClassType() == NodeData::ClassType::kNodeRareData;
@@ -145,47 +154,18 @@
   }
 };
 
-class CORE_EXPORT NodeRenderingData final : public NodeData {
- public:
-  NodeRenderingData(LayoutObject*,
-                    scoped_refptr<const ComputedStyle> computed_style);
-  NodeRenderingData(const NodeRenderingData&) = delete;
-  NodeRenderingData& operator=(const NodeRenderingData&) = delete;
-
-  LayoutObject* GetLayoutObject() const { return layout_object_; }
-  void SetLayoutObject(LayoutObject* layout_object) {
-    DCHECK_NE(&SharedEmptyData(), this);
-    layout_object_ = layout_object;
-  }
-
-  const ComputedStyle* GetComputedStyle() const {
-    return computed_style_.get();
-  }
-  void SetComputedStyle(scoped_refptr<const ComputedStyle> computed_style);
-
-  static NodeRenderingData& SharedEmptyData();
-  bool IsSharedEmptyData() { return this == &SharedEmptyData(); }
-
-  void Trace(Visitor*) const override;
-
- private:
-  Member<LayoutObject> layout_object_;
-  scoped_refptr<const ComputedStyle> computed_style_;
-};
-
 class NodeRareData : public NodeData {
  public:
-  explicit NodeRareData(NodeRenderingData* node_layout_data)
-      : NodeRareData(ClassType::kNodeRareData, node_layout_data) {}
+  explicit NodeRareData(NodeData&& node_layout_data)
+      : NodeData(std::move(node_layout_data)),
+        connected_frame_count_(0),
+        element_flags_(0) {
+    bit_field_.set<ClassTypeData>(
+        ClassTypeData::encode(static_cast<uint8_t>(ClassType::kNodeRareData)));
+  }
   NodeRareData(const NodeRareData&) = delete;
   NodeRareData& operator=(const NodeRareData&) = delete;
 
-  NodeRenderingData* GetNodeRenderingData() const { return node_layout_data_; }
-  void SetNodeRenderingData(NodeRenderingData* node_layout_data) {
-    DCHECK(node_layout_data);
-    node_layout_data_ = node_layout_data;
-  }
-
   void ClearNodeLists() { node_lists_.Clear(); }
   NodeListsNodeData* NodeLists() const { return node_lists_.Get(); }
   // EnsureNodeLists() and a following NodeListsNodeData functions must be
@@ -245,18 +225,20 @@
   void UnregisterScrollTimeline(ScrollTimeline*);
   void InvalidateAssociatedAnimationEffects();
 
-  void SetIsPseudoElement(bool value) { is_pseudo_element_ = value; }
-  bool IsPseudoElement() const { return is_pseudo_element_; }
-
   void Trace(blink::Visitor*) const override;
 
  protected:
-  NodeRareData(ClassType class_type, NodeRenderingData* node_layout_data)
-      : NodeData(class_type), node_layout_data_(node_layout_data) {
-    CHECK_NE(node_layout_data, nullptr);
+  NodeRareData(ClassType class_type, NodeData&& node_layout_data)
+      : NodeData(std::move(node_layout_data)),
+        connected_frame_count_(0),
+        element_flags_(0) {
+    bit_field_.set<ClassTypeData>(
+        ClassTypeData::encode(static_cast<uint16_t>(class_type)));
   }
 
-  Member<NodeRenderingData> node_layout_data_;
+  uint16_t connected_frame_count_ : kConnectedFrameCountBits;
+  uint16_t element_flags_ : kNumberOfElementFlags;
+  // 16 free bits here.
 
  private:
   NodeListsNodeData& CreateNodeLists();
--- a/third_party/blink/renderer/core/dom/pseudo_element.cc
+++ b/third_party/blink/renderer/core/dom/pseudo_element.cc
@@ -178,7 +178,7 @@
   parent->GetTreeScope().AdoptIfNeeded(*this);
   SetParentOrShadowHostNode(parent);
   SetHasCustomStyleCallbacks();
-  EnsureRareData().SetIsPseudoElement(true);
+  EnsureMutableData().SetIsPseudoElement(true);
   if ((pseudo_id == kPseudoIdBefore || pseudo_id == kPseudoIdAfter) &&
       parent->HasTagName(html_names::kInputTag)) {
     UseCounter::Count(parent->GetDocument(),
