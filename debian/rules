#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
DU_DIR   := $(DB_DIR)/devutils
MP_DIR   := $(DB_DIR)/misc_patches
SH_DIR   := $(DB_DIR)/shims
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
UP_DIR   := $(UC_DIR)/patches
DL_CACHE := $(RT_DIR)/../download_cache
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release

UB_DEL_SCRIPT := build/linux/unbundle/remove_bundled_libraries.py
UB_REP_SCRIPT := build/linux/unbundle/replace_gn_files.py

# Changelog and control template variables
REVISION := $$(cat $(UC_DIR)/revision.txt)
VERSION  ?= $$(cat $(UC_DIR)/chromium_version.txt)-$(REVISION)
RELEASE  := stable
AUTHOR   := ungoogled-chromium Maintainers <github@null.invalid>
DATETIME := $(shell date -R)

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell tr "\n" " " < $(UC_DIR)/flags.gn | sed 's/"/\\"/g')

# Custom toolchain (needed if enabling optional/llvm-polly-stripmine.patch)
# The llvm version needs to match that of upstream for PGO builds to work
#
#GN_FLAGS += custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
#            host_toolchain=\"//build/toolchain/linux/unbundle:default\"
#
#export AR     := llvm-ar
#export NM     := llvm-nm
#export RANLIB := llvm-ranlib
#export CC     := clang
#export CXX    := clang++
#
#export DEB_CFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.
#export DEB_CXXFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.

# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# Add our downstream Debian flags
GN_FLAGS += \
        is_official_build=true \
        blink_symbol_level=0 \
        symbol_level=0 \
        ffmpeg_branding=\"ChromeOS\" \
        proprietary_codecs=true \
        angle_enable_swiftshader=false \
        enable_swiftshader=false \
        enable_vr=false \
        link_pulseaudio=true \
        rtc_disable_metrics=true \
        rtc_use_pipewire=true \
        use_cfi_cast=true \
        use_dawn=false \
        use_gnome_keyring=false \
        use_kerberos=false \
        use_qt=false \
        use_sysroot=false \
        use_text_section_splitting=true \
        v8_enable_zone_compression=true

# Currently omitted from base (stable)
#
# Extra work     : ffmpeg
# Minor bug      : libpng
# Not in stable  : libaom, libavif, libjxl, openh264
# Stable too old : dav1d, icu
# Compile issues : jsoncpp, re2, snappy, woff2
# Problematic    : harfbuzz-ng, libvpx, libyuv
#
SYS_LIBS :=               \
        brotli            \
        double-conversion \
        flac              \
        fontconfig        \
        freetype          \
        libdrm            \
        libevent          \
        libwebp           \
        libxml            \
        libXNVCtrl        \
        libxslt           \
        opus              \
        zlib

# If enabling extra SYS_LIBS/GN_FLAGS below look, be sure to uncomment
# the corresponding patches (look inside optional/* and various/*).
# One can also uncomment the relevant dev libraries in debian/control.in

# Enable if you are building on the same distro you intend to run under
#SYS_LIBS += libjpeg

# If your system ffmpeg has been rebuilt with patches from system_ffmpeg
#SYS_LIBS += ffmpeg

# Uncomment if you on stable and have installed the backport library
# libaom should work but libavif might not
#SYS_LIBS += libaom libavif

# Uncomment if you are on testing/unstable (or a new enough distro)
#SYS_LIBS += dav1d icu libaom libavif libjxl openh264

# Uncoment to disable atk/dbus
#GN_FLAGS += use_atk=false use_dbus=false

# Uncomment to build pdfium without v8 (javascript) and XFA forms support
#GN_FLAGS += pdf_enable_v8=false pdf_enable_xfa=false

# Add extra flags for system libs
GN_FLAGS +=                           \
        perfetto_use_system_zlib=true \
        use_system_freetype=true      \
        use_system_lcms2=true         \
        use_system_libopenjpeg2=true  \
        use_system_zlib=true

%:
	dh $@

changelog:
	sed -e "s;@@VERSION@@;$(VERSION);g" -e "s;@@RELEASE@@;$(RELEASE);g" -e "s;@@AUTHOR@@;$(AUTHOR);g" -e "s;@@DATETIME@@;$(DATETIME);g" < $(DB_DIR)/changelog.in > $(DB_DIR)/changelog

control:
	sed -e "s;@@AUTHOR@@;$(AUTHOR);g" < $(DB_DIR)/control.in > $(DB_DIR)/control

find_remove_all:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '__pycache__' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +

find_remove_most:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +

find_remove_pycache:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o -type d -name '__pycache__' -exec rm -rf '{}' +

hardclean: find_remove_all
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -g -t clean || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."

tarball:
	test "$$(dirname $(CURDIR))" != "tarball" && printf '%s\n' "Cannot run outside of tarball directory" && exit 1
	find . -mindepth 1 -maxdepth 1 -type d \( -name debian -o -name out \) -prune -o -exec rm -rf "{}" +
	test -d $(DL_CACHE) || mkdir -p $(DL_CACHE)
	test ! -f base/BUILD.gn && $(UL_DIR)/downloads.py retrieve -i $(UC_DIR)/downloads.ini -c $(DL_CACHE) && $(UL_DIR)/downloads.py unpack -i $(UC_DIR)/downloads.ini -c $(DL_CACHE) $(RT_DIR)

disable_mdns:
	test -n "$$(grep ^enable_mdns= $(UC_DIR)/flags.gn)" || sed -e '$$ a enable_mdns=false' -i $(UC_DIR)/flags.gn
	test -f $(DB_DIR)/patches/fix-building-without-mdns-and-service-discovery.patch || cp -a $(MP_DIR)/fix-building-without-mdns-and-service-discovery.patch $(DB_DIR)/patches/
	test -n "$$(grep ^fix-building-without-mdns-and-service-discovery\.patch $(DB_DIR)/patches/series.debian)" || sed '$$ a \\nfix-building-without-mdns-and-service-discovery.patch' -i $(DB_DIR)/patches/series.debian

pgo_configure:
	test -d $(LLVM_DIR) || tools/clang/scripts/update.py
	test -d $(RT_DIR)/chrome/build/pgo_profiles || tools/update_pgo_profiles.py --target linux update --gs-url-base=chromium-optimization-profiles/pgo_profiles
	test -n "$$(grep ^pgo_data_path $(UC_DIR)/flags.gn)" || sed "$$ a pgo_data_path=\"$$(realpath chrome/build/pgo_profiles/$$(cat chrome/build/linux.pgo.txt))\"" -i $(UC_DIR)/flags.gn
	sed -e '/^chrome\/build\/pgo_profiles/d' -i $(UC_DIR)/pruning.list

translate_configure:
	test -f $(DB_DIR)/patches/translate-reverse-enable.patch || cp -a $(MP_DIR)/translate-reverse-enable.patch $(DB_DIR)/patches/
	test -n "$$(grep ^translate-reverse-enable\.patch $(DB_DIR)/patches/series.debian)" || sed '$$ a \\ntranslate-reverse-enable.patch' -i $(DB_DIR)/patches/series.debian
	test -f $(DB_DIR)/etc/chromium.d/google-translate || cp -a $(SH_DIR)/google-translate $(DB_DIR)/etc/chromium.d/
	sed 's@^#\(debian/etc/chromium.d/google-translate\)@\1@' < $(DB_DIR)/ungoogled-chromium.install.in > $(DB_DIR)/ungoogled-chromium.install
	sed -e '/\/translate_manager_browsertest\.cc/d' -e '/\/translate_script\.cc/d' -e '/\/translate_util\.cc/d' -i $(UC_DIR)/domain_substitution.list

setup: changelog control pgo_configure
	if ! patch -R -p1 -s -f --dry-run < $(MP_DIR)/no-exit-if-pruned.patch >/dev/null 2>&1; then patch -p1 < $(MP_DIR)/no-exit-if-pruned.patch; fi
	sed -e '/^buildtools/d' -e '/^third_party\/depot_tools/d' -e '/^third_party\/llvm/d' -e '/^tools\/clang/d' -i $(UC_DIR)/pruning.list
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list
	#all_libs="$$(sed -n "s@^[^-_a-zA-Z0-9]*\([-_a-zA-Z0-9]*\)[^-_a-zA-Z0-9]*third_party/.*@\1@p" $(UB_REP_SCRIPT))"; for lib in $(SYS_LIBS); do all_libs="$$(echo "$$all_libs" | sed "/^$$lib$/d")"; done
	#keep_libs="$$(for lib in $$(echo "$$all_libs" | tr '\n' ' '); do sed -n "s@^[^-_a-zA-Z0-9]*$$lib[^-_a-zA-Z0-9].*\(third_party/[^/]*\).*@\1@p" $(UB_REP_SCRIPT); done | tr '\n' ' ')"
	#test -x $(UB_DEL_SCRIPT) || chmod 0700 $(UB_DEL_SCRIPT) && $(UB_DEL_SCRIPT) --do-remove $$keep_libs
	cat $(UP_DIR)/series $(DB_DIR)/patches/series.debian > $(DB_DIR)/patches/series
	test -d $(DB_DIR)/patches/core && test -d $(DB_DIR)/patches/extra || cp -a $(UP_DIR)/core $(UP_DIR)/extra $(DB_DIR)/patches/
	test -f $(DB_DIR)/ungoogled-chromium.install || cp -a $(DB_DIR)/ungoogled-chromium.install.in $(DB_DIR)/ungoogled-chromium.install
	test -x $(DB_DIR)/ungoogled-chromium.install || chmod 0700 $(DB_DIR)/ungoogled-chromium.install
	test -f $(DB_DIR)/etc/chromium.d/chromium-flags.conf || cp -a $(SH_DIR)/chromium-flags.conf $(DB_DIR)/etc/chromium.d/
	# Remove some default/unwanted flags from submodules/ungoogled-chromium/flags.gn
	sed -e '/^build_with_tflite_lib/d' -e '/^chrome_pgo_phase/d' -e '/^enable_hangout_services_extension/d' -e '/^enable_nacl/d' -e '/^enable_service_discovery/d' -e '/^exclude_unwind_tables/d' -e '/^google_api_key/d' -e '/^google_default_client_id/d' -e '/^google_default_client_secret/d' -i $(UC_DIR)/flags.gn
	# Remove various entries from domain_substitution.list (third_party/libwebp/BUILD.gn causes a bizarre hash mismatch error)
	sed -e '/content\/browser\/resources\/gpu\/info_view\.js/d' -e '/^third_party\/depot_tools/d' -e '/^third_party\/libwebp\/BUILD\.gn/d' -e '/^tools\/clang/d' -i $(UC_DIR)/domain_substitution.list

setup_no_mdns: disable_mdns setup
	:

setup_translate: translate_configure setup
	:

setup_no_mdns_translate: disable_mdns translate_configure setup
	:

override_dh_auto_configure: find_remove_most
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -t cleandead || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."
	# Undo the unbundling process before re-doing it to prevent overwriting the backup files (via aborted builds)
	$(UB_REP_SCRIPT) --undo
	$(UB_REP_SCRIPT) --system-libraries $(SYS_LIBS)
	test -f $(DS_CACHE) && printf '%s\n' "$(DS_CACHE) exists, aborting." || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)

override_dh_auto_build:
	gn gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver
	test ! -f out/Release/locales/en-US.pak || cp -a out/Release/locales/en-US.pak out/Release/resources/

override_dh_prep: find_remove_pycache
	for file in $$(find -type f -name "*.gn.orig" -o -type f -name "*.gni.orig"); do mv $$file $${file%.orig}; done
	test ! -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	dh_prep

override_dh_auto_install-arch:
	chmod 4755 out/Release/chrome_sandbox
	$(DU_DIR)/update_launcher.sh < $(SH_DIR)/chromium.sh > $(SH_DIR)/chromium

override_dh_auto_install-indep:
	test ! -f out/Release/locales/en-US.pak || rm -f out/Release/locales/en-US.pak

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_dwz:
	@echo "Skipping dwz, compiled with -fdebug-types-section instead."

override_dh_builddeb:
	dh_builddeb -- -z 9

override_dh_update_autotools_config:
