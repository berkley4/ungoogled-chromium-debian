#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
MP_DIR   := $(DB_DIR)/misc_patches
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release

UB_DEL_SCRIPT := build/linux/unbundle/remove_bundled_libraries.py
UB_REP_SCRIPT := build/linux/unbundle/replace_gn_files.py

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell sed ':a;N;$!ba;s/\n/ /g;s/"/\\"/g' < $(UC_DIR)/flags.gn)

# Custom toolchain (needed if enabling optional/llvm-polly-* patches)
# The llvm version needs to match that of chromium for PGO builds to work
#
#GN_FLAGS += custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
#            host_toolchain=\"//build/toolchain/linux/unbundle:default\"
#
#export AR     := llvm-ar
#export NM     := llvm-nm
#export RANLIB := llvm-ranlib
#export CC     := clang
#export CXX    := clang++
#
#export DEB_CFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.
#export DEB_CXXFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.

# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# Add our downstream Debian flags
GN_FLAGS += \
        is_official_build=true \
        blink_symbol_level=0 \
        symbol_level=0 \
        ffmpeg_branding=\"ChromeOS\" \
        proprietary_codecs=true \
        angle_enable_swiftshader=false \
        enable_swiftshader=false \
        enable_component_updater=false \
        enable_lens_desktop=false \
        enable_trace_logging=false \
        enable_vr=false \
        rtc_disable_metrics=true \
        skia_enable_skshaper_tests=false \
        use_cfi_cast=true \
        use_dawn=false \
        build_dawn_tests=false \
        use_gnome_keyring=false \
        use_kerberos=false \
        use_qt=false \
        use_runtime_vlog=false \
        use_sysroot=false \
        use_text_section_splitting=true \
        glue_core_pools=true \
        enable_pointer_compression_support=true \
        v8_enable_zone_compression=true

# Uncoment to disable atk/dbus
#GN_FLAGS += use_atk=false use_dbus=false

# Comment to build pdfium with v8 (javascript) and XFA forms support
GN_FLAGS += pdf_enable_v8=false pdf_enable_xfa=false

# Uncomment to enable an out-of-process print dialog (X11 only)
#GN_FLAGS += enable_oop_basic_print_dialog=true

# Disable print preview (workaround for print preview dialog crash)
GN_FLAGS += enable_print_preview=false

# Enable pipewire
GN_FLAGS += rtc_use_pipewire=true

# Disable pulseaudio
#GN_FLAGS += use_pulseaudio=false

# Enable linking to pulseaudio library (has no effect if use_pulseaudio=false)
GN_FLAGS += link_pulseaudio=true

# Disable VA-API
#GN_FLAGS += use_vaapi=false


# Currently omitted from base (stable)
#
# Note: jsoncpp, re2, snappy (and perhaps woff2) cannot
#       be unbundled when use_custom_libcxx=true.
#       Custom (ie bundled) libcxx is needed for CFI.
#
# Extra work     : ffmpeg
# Not in stable  : openh264
# Stable too old : dav1d, icu, libaom, libavif, libpng
# Compile issues : jsoncpp, re2, snappy, woff2
# Problematic    : harfbuzz-ng, libvpx, libyuv
# Interdependent : libxslt depends upon libxml; libxml depends upon icu
#
SYS_LIBS :=               \
        brotli            \
        double-conversion \
        flac              \
        fontconfig        \
        freetype          \
        libdrm            \
        libevent          \
        libwebp           \
        libXNVCtrl        \
        opus              \
        zlib

# If enabling extra SYS_LIBS/GN_FLAGS below look, be sure to uncomment
# the corresponding patches (look inside optional/* and various/*).
# One can also uncomment the relevant dev libraries in debian/control.in

# Enable if you are building on the same distro you intend to run under
#SYS_LIBS += libjpeg

# Enable if needed (normally not a compiled target)
#SYS_LIBS += libusb

# If your system ffmpeg has been rebuilt with patches from system_ffmpeg
#SYS_LIBS += ffmpeg

# Uncomment if you on stable and have installed the backport library
# libaom should work but libavif might not
#SYS_LIBS += libaom libavif

# Uncomment if you are on testing/unstable (or a new enough distro)
#GN_FLAGS += use_system_libpng=true
#SYS_LIBS += dav1d libaom libavif libpng libxml libxslt openh264

# Unstable users can uncomment to enable system icu
#SYS_LIBS += icu

# Add extra flags for system libs
GN_FLAGS +=                           \
        perfetto_use_system_zlib=true \
        use_system_freetype=true      \
        use_system_lcms2=true         \
        use_system_libopenjpeg2=true  \
        use_system_libtiff=true       \
        use_system_zlib=true

%:
	dh $@

find_remove_all:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '__pycache__' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +

find_remove_most:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +

find_remove_pycache:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o -type d -name '__pycache__' -exec rm -rf '{}' +

hardclean: find_remove_all
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -g -t clean || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."

remove_bundled:
	all_libs="$$(sed -n "s@^[^-_a-zA-Z0-9]*\([-_a-zA-Z0-9]*\)[^-_a-zA-Z0-9]*third_party/.*@\1@p" $(UB_REP_SCRIPT))"; for lib in $(SYS_LIBS); do all_libs="$$(echo "$$all_libs" | sed "/^$$lib$/d")"; done
	keep_libs="$$(for lib in $$(echo "$$all_libs" | tr '\n' ' '); do sed -n "s@^[^-_a-zA-Z0-9]*$$lib[^-_a-zA-Z0-9].*\(third_party/[^/]*\).*@\1@p" $(UB_REP_SCRIPT); done | tr '\n' ' ')"
	test -x $(UB_DEL_SCRIPT) || chmod 0700 $(UB_DEL_SCRIPT) && $(UB_DEL_SCRIPT) --do-remove $$keep_libs

undo_unbundling:
	find \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o -type f \( -name \*.gn.original -o -name \*.gni.original \) -print | while read f; do mv $$f $${f%.original}; done

setup:
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list
	# Uncomment 'remove_bundled' below to remove bundled files associated with SYS_LIBS
	#remove_bundled

override_dh_auto_configure: find_remove_most undo_unbundling
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -t cleandead || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."
	test -z "$(SYS_LIBS)" || $(UB_REP_SCRIPT) --system-libraries $(SYS_LIBS)
	test -f $(DS_CACHE) && printf '%s\n' "$(DS_CACHE) exists, aborting." || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)

override_dh_auto_build:
	gn gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver
	test ! -f out/Release/locales/en-US.pak || cp -a out/Release/locales/en-US.pak out/Release/resources/

override_dh_prep: find_remove_pycache undo_unbundling
	test ! -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	dh_prep

override_dh_auto_install-arch:
	chmod 4755 out/Release/chrome_sandbox

override_dh_auto_install-indep:
	test ! -f out/Release/locales/en-US.pak || rm -f out/Release/locales/en-US.pak

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_dwz:
	@echo "Skipping dwz, compiled with -fdebug-types-section instead."

override_dh_builddeb:
	dh_builddeb -- -z 9

override_dh_update_autotools_config:
