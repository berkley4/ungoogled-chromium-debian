#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
MP_DIR   := $(DB_DIR)/misc_patches
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release

UB_REP_SCRIPT := build/linux/unbundle/replace_gn_files.py

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell tr "\n" " " < $(UC_DIR)/flags.gn | sed 's/"/\\"/g')

# Custom toolchain (needed if enabling optional/llvm-polly-* patches)
# The llvm version needs to match that of chromium for PGO builds to work
#
#GN_FLAGS += custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
#            host_toolchain=\"//build/toolchain/linux/unbundle:default\"
#
#export AR     := llvm-ar
#export NM     := llvm-nm
#export RANLIB := llvm-ranlib
#export CC     := clang
#export CXX    := clang++
#
#export DEB_CFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.
#export DEB_CXXFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.

# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# Add our downstream Debian flags
GN_FLAGS +=                                     \
        is_official_build=true                  \
        blink_symbol_level=0                    \
        symbol_level=0                          \
        ffmpeg_branding=\"ChromeOS\"            \
        proprietary_codecs=true                 \
        angle_enable_swiftshader=false          \
        enable_swiftshader=false                \
        build_dawn_tests=false                  \
        dawn_use_swiftshader=false              \
        enable_component_updater=false          \
        enable_lens_desktop=false               \
        enable_trace_logging=false              \
        enterprise_cloud_content_analysis=false \
        enterprise_local_content_analysis=false \
        rtc_disable_metrics=true                \
        skia_enable_skshaper_tests=false        \
        use_cfi_cast=true                       \
        use_kerberos=false                      \
        use_runtime_vlog=false                  \
        use_sysroot=false                       \
        use_text_section_splitting=true         \
        glue_core_pools=true                    \
        enable_pointer_compression_support=true \
        v8_enable_zone_compression=true

# The below is best configured via debian/configure.sh (which
# needs to be run anyway when self-compiling).

# Disable atk/dbus
#GN_FLAGS += use_atk=false use_dbus=false

# Enable mutex priority inheritance
GN_FLAGS += enable_mutex_priority_inheritance=true

# Diable pdfium javascript and XFA forms support
GN_FLAGS += pdf_enable_v8=false pdf_enable_xfa=false

# Enable an out-of-process print dialog (X11 only)
#GN_FLAGS += enable_oop_basic_print_dialog=true

# Disable print preview (workaround for print preview dialog crash)
GN_FLAGS += enable_print_preview=false

# Disable virtual reality features
GN_FLAGS += enable_vr=false enable_arcore=false enable_openxr=false enable_cardboard=false

# Enable 256-bit re-vectorization pass in WASM compilation pipeline
#GN_FLAGS += v8_enable_wasm_simd256_revec=true


# Enable WebGPU
#GN_FLAGS += skia_use_dawn=true

# Disable WebGPU
GN_FLAGS += use_dawn=false

# Disable openh264
#GN_FLAGS += media_use_openh264=false

# Enable pipewire
GN_FLAGS += rtc_use_pipewire=true

# Disable pulseaudio
#GN_FLAGS += use_pulseaudio=false

# Enable linking to pulseaudio (has no effect if use_pulseaudio=false)
GN_FLAGS += link_pulseaudio=true

# Disable Qt
#GN_FLAGS += use_qt=false

# Disable VA-API
#GN_FLAGS += use_vaapi=false


# Currently omitted from base (stable)
#
# Note: jsoncpp, re2, snappy and woff2 cannot be
#       unbundled when use_custom_libcxx=true because
#       custom (ie bundled) libcxx is needed for CFI.
#
# Extra work     : ffmpeg
# Stable too old : dav1d
# Compile issues : jsoncpp, re2, snappy, woff2
# Problematic    : harfbuzz-ng, libvpx, libyuv
# Interdependent : libxslt depends upon libxml; libxml depends upon icu
#
SYS_LIBS :=               \
        double-conversion \
        flac              \
        fontconfig        \
        freetype          \
        libdrm            \
        libevent          \
        libpng            \
        libwebp           \
        libXNVCtrl        \
        opus              \
        zlib

# The below is best configured via debian/configure.sh, ehich is better
# suited to automatically deal with any of the dependent patches.

# Backported libraries (if you on stable)
#SYS_LIBS +=

# Enable brotli
#SYS_LIBS += brotli

# If you are building on the same distro you intend to run under
SYS_LIBS += libjpeg

# Enable openh264
SYS_LIBS += openh264

# (System icu listed with libraries which depend on it)
#SYS_LIBS += icu libxml libxslt
#SYS_LIBS += libaom libavif

# TESTING/UNSTABLE libraries
#SYS_LIBS += dav1d


# Enable only if really needed (not normally a compiled target)
#SYS_LIBS += libusb

# If your system ffmpeg is self-built with patches from system_ffmpeg
#SYS_LIBS += ffmpeg

# Add extra flags for system libs
GN_FLAGS +=                           \
        perfetto_use_system_zlib=true \
        use_system_freetype=true      \
        use_system_lcms2=true         \
        use_system_libopenjpeg2=true  \
        use_system_libpng=true        \
        use_system_libtiff=true       \
        use_system_zlib=true

%:
	dh $@

hardclean:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '__pycache__' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -g -t clean || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."

undo_unbundling:
	find base/third_party/ third_party/ -type f -name \*.bundled -print | while read f; do mv $$f $${f%.bundled}; done

prune:
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list 2>/dev/null

override_dh_auto_configure: undo_unbundling
	test -z "$(SYS_LIBS)" || $(UB_REP_SCRIPT) --system-libraries $(SYS_LIBS)
	test -f $(DS_CACHE) && printf '%s\n' "$(DS_CACHE) exists, aborting." || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)
	gn gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args

override_dh_auto_build:
	ninja -j $(JOBS) -C $(OUT_DIR) -t cleandead
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver
	test ! -f out/Release/locales/en-US.pak || cp -a out/Release/locales/en-US.pak out/Release/resources/

override_dh_prep: undo_unbundling
	test ! -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	dh_prep

override_dh_auto_install-arch:
	chmod 4755 out/Release/chrome_sandbox

override_dh_auto_install-indep:
	test ! -f out/Release/locales/en-US.pak || rm -f out/Release/locales/en-US.pak

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_dwz:
	@echo "Skipping dwz, compiled with -fdebug-types-section instead."

override_dh_builddeb:
	dh_builddeb -- -z 9

override_dh_update_autotools_config:
