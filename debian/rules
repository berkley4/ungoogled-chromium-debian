#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
SH_DIR   := $(DB_DIR)/shims
CL_DIR   := $(DB_DIR)/submodules/chromium-launcher
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
UP_DIR   := $(UC_DIR)/patches
DL_CACHE := $(DB_DIR)/download_cache
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release
GN       := $(OUT_DIR)/gn

# Changelog and control template variables
VERSION  := $(file < $(UC_DIR)/chromium_version.txt)-1
RELEASE  := focal
AUTHOR   := ungoogled-chromium Maintainers <github@null.invalid>
DATETIME := $(shell date -R)

# Setup compiler and linkers flags
export DEB_BUILD_MAINT_OPTIONS  := optimize=-lto
export DEB_CXXFLAGS_MAINT_STRIP := -g
export CXXFLAGS                 := $(shell dpkg-buildflags --get CXXFLAGS) \
                                   -Wno-unknown-warning-option
export CFLAGS                   := $(CXXFLAGS)

# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell tr "\n" " " < $(UC_DIR)/flags.gn | sed 's/"/\\"/g')

# Add our downstream Debian flags
GN_FLAGS += \
        use_custom_libcxx=false \
        is_official_build=true \
        symbol_level=1 \
        blink_enable_generated_code_formatting=false \
        is_cfi=true \
        use_sysroot=false \
        use_gnome_keyring=false \
        ffmpeg_branding=\"ChromeOS\" \
        proprietary_codecs=true \
        link_pulseaudio=true \
        use_vaapi=true \
        enable_swiftshader=false \
        enable_vr=false \
        use_kerberos=false \
        use_text_section_splitting=true \
        v8_enable_pointer_compression=true \
        v8_enable_zone_compression=true \
        sample_profile_is_accurate=true

# Currently omitted from base (focal): icu, harfbuzz-ng, ffmpeg, openh264, libvpx, libpng
SYS_LIBS :=         \
        flac        \
        fontconfig  \
        freetype    \
        jsoncpp     \
        libdrm      \
        libevent    \
        libjpeg     \
        libwebp     \
        libxml      \
        libxslt     \
        opus        \
        re2         \
        snappy      \
        zlib

# Add extra flags for system libs
GN_FLAGS +=                           \
        perfetto_use_system_zlib=true \
        use_system_lcms2=true         \
        use_system_libopenjpeg2=true  \
        use_system_zlib=true

%:
	dh $@

changelog:
	sed -e "s;@@VERSION@@;$(VERSION);g" -e "s;@@RELEASE@@;$(RELEASE);g" -e "s;@@AUTHOR@@;$(AUTHOR);g" -e "s;@@DATETIME@@;$(DATETIME);g" < $(DB_DIR)/changelog.in > $(DB_DIR)/changelog

gitclean:
	test ! -d $(RT_DIR)/.git || git clean -xfd -e debian/changelog -e debian/control -e debian/download_cache/

control:
	sed -e "s;@@AUTHOR@@;$(AUTHOR);g" < $(DB_DIR)/control.in > $(DB_DIR)/control

download:
	test -d $(DL_CACHE) || mkdir -p $(DL_CACHE)
	test -d build || $(UL_DIR)/downloads.py retrieve -i $(UC_DIR)/downloads.ini -c $(DL_CACHE)

setup: changelog control download
	test -d build || $(UL_DIR)/downloads.py unpack -i $(UC_DIR)/downloads.ini -c $(DL_CACHE) $(RT_DIR)
	tools/clang/scripts/update.py
	sed -e '/^buildtools/d' -e '/^third_party\/llvm/d' -e '/^chrome\/build\/pgo_profiles/d' -i $(UC_DIR)/pruning.list
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list
	for lib in $(subst libevent,,$(subst libjpeg,libjpeg_turbo,$(SYS_LIBS))); do find "third_party/$$lib" -type f ! -path "third_party/$$lib/chromium/*" ! -path "third_party/$$lib/google/*" ! -name "*.gn" ! -name "*.gni" ! -name "*.isolate" -delete; done
	test -d $(DB_DIR)/patches/core && test -d $(DB_DIR)/patches/extra || cp -a $(UP_DIR)/core $(UP_DIR)/extra $(DB_DIR)/patches/
	test -n "$$(grep '^core\|^extra' $(DB_DIR)/patches/series)" || cat $(UP_DIR)/series >>$(DB_DIR)/patches/series
	sed 's@^\(chrome_pgo_phase=\)[01]@\12@' -i $(UC_DIR)/flags.gn
	test -n "$$(grep ^pgo_data_path $(UC_DIR)/flags.gn)" || sed "$$ a pgo_data_path=\"$$(realpath chrome/build/pgo_profiles/$$(cat chrome/build/linux.pgo.txt))\"" -i $(UC_DIR)/flags.gn

$(GN):
	# Switch to distribution GN once generate-ninja has widespread availability
	tools/gn/bootstrap/bootstrap.py -j $(JOBS) --skip-generate-buildfiles

override_dh_auto_configure:
	sed -e '/tools\/clang\/scripts\/update.py/d' -i $(UC_DIR)/domain_substitution.list
	[ -f $(DS_CACHE) ] && printf '%s\n' "$(DS_CACHE) exists, aborting." || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)
	cp $(SH_DIR)/jsoncpp.gn build/linux/unbundle
	build/linux/unbundle/replace_gn_files.py --system-libraries $(SYS_LIBS)

override_dh_auto_build: $(GN)
	$(GN) gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver
	$(MAKE) -C $(CL_DIR) CFLAGS="$(CFLAGS) -g -pie -fPIE" CHROMIUM_BINARY=/usr/lib/chromium/chrome chromium

override_dh_prep:
	for file in `find -name "*.gn.orig" -o -name "*.gni.orig"`; do mv $$file $${file%.orig}; done
	rm -f build/linux/unbundle/jsoncpp.gn
	$(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	git submodule foreach git reset --hard
	dh_prep

override_dh_auto_install:
	chmod 4755 out/Release/chrome-sandbox

override_dh_fixperms:
	dh_fixperms --exclude chrome_sandbox

override_dh_auto_clean:
	rm -rf out
	$(MAKE) -C $(CL_DIR) clean
	find -name "*.pyc" -delete
	dh_auto_clean
