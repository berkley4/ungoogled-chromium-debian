#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release

UB_REP_SCRIPT := build/linux/unbundle/replace_gn_files.py

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell tr "\n" " " < $(UC_DIR)/flags.gn | sed 's/"/\\"/g')

# Custom toolchain (needed if enabling optional/llvm-polly-* patches)
# The llvm major version needs to at least match chromium's for PGO to work
#
#GN_FLAGS += custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
#            host_toolchain=\"//build/toolchain/linux/unbundle:default\"
#
#export LLVM_DIR := /usr/lib/llvm-18/bin
#
#export AR     := llvm-ar
#export NM     := llvm-nm
#export RANLIB := llvm-ranlib
#export CC     := clang
#export CXX    := clang++
#
#export DEB_CFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.
#export DEB_CXXFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.

# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# General downstream build flags
GN_FLAGS +=                                     \
        is_official_build=true                  \
        blink_symbol_level=0                    \
        symbol_level=0                          \
        ffmpeg_branding=\"ChromeOS\"

# Enabled components
GN_FLAGS +=                                     \
        enable_mse_mpeg2ts_stream_parser=true   \
        enable_pointer_compression_support=true \
        glue_core_pools=true                    \
        proprietary_codecs=true                 \
        use_cfi_cast=true                       \
        use_crash_key_stubs=true                \
        use_text_section_splitting=true

# Disabled components
GN_FLAGS +=                                     \
        angle_build_tests=false                 \
        angle_enable_swiftshader=false          \
        angle_has_histograms=false              \
        angle_has_rapidjson=false               \
        build_angle_perftests=false             \
        build_dawn_tests=false                  \
        dawn_enable_null=false                  \
        dawn_tests_use_angle=false              \
        dawn_use_swiftshader=false              \
        enable_component_updater=false          \
        enable_extractors=false                 \
        enable_lens_desktop=false               \
        enable_maldoca=false                    \
        enable_perfetto_unittests=false         \
        enable_rust_crash=false                 \
        enable_rust_gtest_interop=false         \
        enable_screen_ai_service=false          \
        enable_swiftshader=false                \
        enable_trace_logging=false              \
        rtc_build_examples=false                \
        rtc_build_tools=false                   \
        rtc_disable_logging=true                \
        rtc_disable_metrics=true                \
        rtc_disable_trace_events=true           \
        rtc_enable_google_benchmarks=false      \
        rtc_enable_protobuf=false               \
        skia_enable_skshaper_tests=false        \
        tint_build_benchmarks=false             \
        tint_build_unittests=false              \
        use_kerberos=false                      \
        use_sysroot=false                       \
        v8_enable_zone_compression=false

# The items below are best configured via debian/configure.sh
# (this needs to be run anyway when self-compiling).

### Rust toolchain

#export RUSTC_BOOTSTRAP=1
#GN_FLAGS += rust_sysroot_absolute=RUST_PATH rustc_version=RUST_DASHV


### General components

# Disable atk/dbus
#GN_FLAGS += use_atk=false use_dbus=false

# Disable click-to-call
#GN_FLAGS += enable_click_to_call=false

# Disable feed v2
#GN_FLAGS += enable_feed_v2=false

# Disable media remoting
#GN_FLAGS += enable_media_remoting=false

# Enable mutex priority inheritance
GN_FLAGS += enable_mutex_priority_inheritance=true

# Disable notifications (system notifications)
#GN_FLAGS += enable_system_notifications=false

# Diable pdfium javascript and XFA forms support
GN_FLAGS += pdf_enable_v8=false pdf_enable_xfa=false

# Disable openh264
#GN_FLAGS += media_use_openh264=false rtc_use_h264=false

# Enable pipewire
GN_FLAGS += rtc_use_pipewire=true

# Disable print preview (replace with simpler system print dialog)
#GN_FLAGS += enable_print_preview=false enable_oop_printing=false

# Disable pulseaudio
#GN_FLAGS += use_pulseaudio=false

# Enable linking to pulseaudio (has no effect if use_pulseaudio=false)
GN_FLAGS += link_pulseaudio=true

# Disable Qt
#GN_FLAGS += use_qt=false

# Disable speech service
#GN_FLAGS += enable_speech_service=false

# Disable supervised users (parental control)
GN_FLAGS += enable_supervised_users=false

# Disable VA-API
#GN_FLAGS += use_vaapi=false

# Disable virtual reality features
GN_FLAGS += enable_vr=false

# Disable WebGPU
GN_FLAGS += use_dawn=false skia_use_dawn=false

# Disable zstd
GN_FLAGS += disable_zstd_filter=true


### AVX2 intructions

# Disable RTC AVX2 instructions
#GN_FLAGS += rtc_enable_avx2=false

# Enable 256-bit re-vectorization pass in WASM compilation pipeline
GN_FLAGS += v8_enable_wasm_simd256_revec=true


### X11 Only

# Disable wayland ozone platform
#GN_FLAGS += ozone_platform_wayland=false


# Currently omitted from base (stable)
#
# Certain libraries cannot be unbundled due to their dependency on the
# libstdc++ system library. We need to build with use_custom_libcxx=true
# in order to enable CFI.
#
# libstdc++ issue : crc32c, flatbuffers, highway, libyuv
#                   jsoncpp, re2, snappy and woff2
#
# Problematic     : ffmpeg, libvpx
#
# Interdependent  : libxslt depends on libxml; libxml depends on icu
#                   libavif depends on libaom and dav1d
#                   libaom depends on libyuv (see compile issues above)
#                   fontconfig/harfbuzz depend on freetype
#                   freetype depends on brotli and libpng
#                   libtiff depends on libwebp
#
# We cannot unbundle libavif or libaom (indirect dependency on libstc++)
#
# Unbundled libjpeg = packages cannot be installed on debian or ubuntu
#
# Some general rules of thumb :-
#
# If we use bundled icu, we must also use bundled libxml and libxslt.
# If we unbundle fontconfig, we must also unbundle freetype, brotli and libpng.
# If we unbundle freetype, we must also unbundle brotli and libpng.
# If we unbundle libtiff, we must also unbundle libwebp.

SYS_LIBS :=               \
        double-conversion \
        flac              \
        libdrm            \
        libevent          \
        libsecret         \
        libusb            \
        libXNVCtrl        \
        opus              \
        zlib

# The below is best configured via debian/configure.sh, ehich is better
# suited to automatically deal with any of the dependency issues


# Enable dav1d (debian testing/unstable)
SYS_LIBS += dav1d

# Enable libjpeg (debs won't be installable on both debian and unbuntu)
SYS_LIBS += libjpeg

# Enable openh264
SYS_LIBS += openh264

# Enable zstd
#SYS_LIBS += zstd


# Backported libraries (stable users can insert below)
#SYS_LIBS +=


### DEPENDENCY CHAINS

# Enable icu (at least unstable is needed, maybe experimental)
SYS_LIBS += icu libxml libxslt

# Enable libwebp (also libtiff which depends on it)
SYS_LIBS += libwebp
GN_FLAGS += use_system_libtiff=true

# Enable harfbuzz (freetype is a dependency)
SYS_LIBS += harfbuzz-ng
GN_FLAGS += use_system_harfbuzz=true

# Enable fontconfig and dependencies
SYS_LIBS += fontconfig freetype brotli libpng

# Enable if either of fontconfig or freetype above are not enabled
#SYS_LIBS += libpng


### UNSUPPORTED - unbundling ffmeg is buggy/problematic

# If your system ffmpeg is self-built with patches from system_ffmpeg
#SYS_LIBS += ffmpeg


# Add extra flags for system libs
GN_FLAGS +=                           \
        perfetto_use_system_zlib=true \
        use_system_lcms2=true         \
        use_system_libopenjpeg2=true  \
        use_system_libpng=true        \
        use_system_zlib=true

%:
	dh $@

hardclean:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '__pycache__' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -g -t clean || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."

prune:
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list 2>/dev/null

override_dh_auto_configure:
	test -f $(DS_CACHE) || find base/third_party/ third_party/ build/config/ -type f -name \*.bundled | while read f; do mv $$f $${f%.bundled}; done
	test -f $(DS_CACHE) || test -z "$(SYS_LIBS)" || $(UB_REP_SCRIPT) --system-libraries $(SYS_LIBS)
	test -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)
	gn gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args

override_dh_auto_build:
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver

override_dh_prep:
	test ! -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	find base/third_party/ third_party/ build/config/ -type f -name \*.bundled | while read f; do mv $$f $${f%.bundled}; done
	ninja -j $(JOBS) -C $(OUT_DIR) -t cleandead
	dh_prep

override_dh_auto_install-arch:
	chmod 4755 $(OUT_DIR)/chrome_sandbox

override_dh_auto_install-indep:
	cp -a $(OUT_DIR)/locales/en-US.pak $(OUT_DIR)/resources/

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_dwz:
	@echo "Skipping dwz, compiled with -fdebug-types-section instead."

override_dh_builddeb:
	dh_builddeb -- -z 9

override_dh_update_autotools_config:
