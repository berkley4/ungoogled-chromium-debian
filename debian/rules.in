#!/usr/bin/make -f

RT_DIR   := $(CURDIR)
DB_DIR   := $(RT_DIR)/debian
UC_DIR   := $(DB_DIR)/submodules/ungoogled-chromium
UL_DIR   := $(UC_DIR)/utils
DS_CACHE := $(DB_DIR)/domsubcache.tar.gz
OUT_DIR  := out/Release

UB_REP_SCRIPT := build/linux/unbundle/replace_gn_files.py

# Set the list of bundled library files
UB_LIST := $(shell sed -z 's@\n@ @g' $(DB_DIR)/misc_files/bundled.txt)

# Start with the upstream Ungoogled Chromium flags
GN_FLAGS := $(shell sed -z -e 's@\x22@\x5c\x22@g' -e 's@\n@ @g' $(UC_DIR)/flags.gn)

# Custom toolchain (needed if enabling optional/llvm-polly-* patches)
# The llvm major version needs to at least match chromium's for PGO to work
#
#export LLVM_DIR := _LLVM_BASE_DIR/bin
#
#export AR     := $(LLVM_DIR)/llvm-ar
#export NM     := $(LLVM_DIR)/llvm-nm
#export RANLIB := $(LLVM_DIR)/llvm-ranlib
#export CC     := $(LLVM_DIR)/clang
#export CXX    := $(LLVM_DIR)/clang++
#
#export DEB_CFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.
#export DEB_CXXFLAGS_MAINT_SET := -ffile-prefix-map=$(CURDIR)=.

# Enable ccache
#GN_FLAGS += cc_wrapper=ccache

# Clang toolchain
#GN_FLAGS += clang_base_path=\"_LLVM_BASE_DIR\" clang_version=\"_LLVM_VER\"
#GN_FLAGS += custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
#GN_FLAGS += host_toolchain=\"//build/toolchain/linux/unbundle:default\"

# Rust toolchain
export RUSTC_BOOTSTRAP=1
#RUST_PATH := _RUST_PATH
#RUST_VER := $(shell $(RUST_PATH)/bin/rustc -V)
#GN_FLAGS += rust_sysroot_absolute=\"$(RUST_PATH)\" rustc_version=\"$(RUST_VER)\"
#GN_FLAGS += toolchain_supports_rust_thin_lto=false


# Use parallel jobs if requested
JOBS := 1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
JOBS := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# Find the distribution codename for this release
CODENAME := $(patsubst %:,,$(shell lsb_release -c))

# General downstream build flags
GN_FLAGS +=					\
	is_official_build=true			\
	blink_symbol_level=0			\
	symbol_level=0				\
	ffmpeg_branding=\"ChromeOS\"

# Enabled components
GN_FLAGS +=					\
	cppgc_enable_pointer_compression=true	\
	enable_mse_mpeg2ts_stream_parser=true	\
	enable_pointer_compression_support=true	\
	glue_core_pools=true			\
	proprietary_codecs=true			\
	use_cfi_cast=true			\
	use_crash_key_stubs=true		\
	use_text_section_splitting=true

# Disabled components
GN_FLAGS +=					\
	angle_has_histograms=false		\
	angle_has_rapidjson=false		\
	enable_component_updater=false		\
	enable_extractors=false			\
	enable_maldoca=false			\
	enable_screen_ai_service=false		\
	use_kerberos=false			\
	use_sysroot=false

# Disabled debug/development/test features
GN_FLAGS +=					\
	angle_build_tests=false			\
	build_angle_perftests=false		\
	build_dawn_tests=false			\
	dawn_enable_null=false			\
	dawn_tests_use_angle=false		\
	enable_perfetto_unittests=false		\
	enable_rust_crash=false			\
	enable_rust_gtest_interop=false		\
	enable_trace_logging=false		\
	optional_trace_events_enabled=false	\
	rtc_build_examples=false		\
	rtc_build_tools=false			\
	rtc_disable_check_msg=true		\
	rtc_disable_logging=true		\
	rtc_disable_metrics=true		\
	rtc_disable_trace_events=true		\
	rtc_enable_google_benchmarks=false	\
	rtc_enable_protobuf=false		\
	skia_enable_skshaper_tests=false

# The items below are best configured via debian/configure.sh
# (this needs to be run anyway when self-compiling).


### General components

# Disable atk/dbus
#GN_FLAGS += use_atk=false use_dbus=false

# Disable bluez bluetooth protocol stack (disabling atk/dbus will also disable bluez)
#GN_FLAGS += use_bluez=false

# Disable click-to-call
#GN_FLAGS += enable_click_to_call=false

# Disable compose
#GN_FLAGS += enable_compose=false

# Disable enterprise watermark
GN_FLAGS += enterprise_watermark=false

# Enable ESbuild
#GN_FLAGS += devtools_fast_bundle=true

# Disable feed v2
#GN_FLAGS += enable_feed_v2=false

# Disable headless mode
#GN_FLAGS += headless_enable_commands=false headless_mode_policy_supported=false
#GN_FLAGS += headless_use_policy=false headless_use_prefs=false ozone_platform_headless=false

# Enable HLS manifest parser and demuxer
GN_FLAGS += enable_hls_demuxer=true

# Google lens
#GN_FLAGS += enable_lens_desktop=false

# Disable media remoting
#GN_FLAGS += enable_media_remoting=false

# Enable mutex priority inheritance
GN_FLAGS += enable_mutex_priority_inheritance=true

# Disable notifications (system notifications)
#GN_FLAGS += enable_system_notifications=false

# Diable pdfium javascript and XFA forms support
GN_FLAGS += pdf_enable_v8=false pdf_enable_xfa=false

# Disable openh264
#GN_FLAGS += media_use_openh264=false rtc_use_h264=false

# Enable pipewire
GN_FLAGS += rtc_use_pipewire=true

# Disable print preview (replace with simpler system print dialog)
#GN_FLAGS += enable_print_preview=false enable_oop_printing=false

# Disable pulseaudio
#GN_FLAGS += use_pulseaudio=false

# Enable linking to pulseaudio (has no effect if use_pulseaudio=false)
GN_FLAGS += link_pulseaudio=true

# Disable Qt
#GN_FLAGS += use_qt=false

# Disable speech service
#GN_FLAGS += enable_speech_service=false

# Disable swiftshader
#GN_FLAGS += enable_swiftshader=false
GN_FLAGS += dawn_use_swiftshader=false
#GN_FLAGS += enable_swiftshader_vulkan=false

# Disable VA-API
#GN_FLAGS += use_vaapi=false

# Disable virtual reality features
GN_FLAGS += enable_vr=false

# Disable vulkan (also see swiftshader section)
#GN_FLAGS += enable_vulkan=false angle_enable_vulkan=false
#GN_FLAGS += angle_build_vulkan_system_info=false angle_shared_libvulkan=false angle_use_vulkan_display=false

# Disable WebGPU (also see swiftshader section)
GN_FLAGS += use_dawn=false skia_use_dawn=false
GN_FLAGS += dawn_enable_desktop_gl=false dawn_enable_opengles=false dawn_enable_spirv_validation=false

# Uncomment when enabling WebGPU
#GN_FLAGS += tint_build_benchmarks=false tint_build_unittests=false

# Comment out when enabling either WebGPU or vulkan (or both)
GN_FLAGS += dawn_enable_vulkan=false dawn_enable_vulkan_loader=false dawn_enable_vulkan_validation_layers=false

# Disable zstd
GN_FLAGS += disable_zstd_filter=true


### AVX2 intructions

# Disable RTC AVX2 instructions
#GN_FLAGS += rtc_enable_avx2=false

# Enable 256-bit re-vectorization pass in WASM compilation pipeline
GN_FLAGS += v8_enable_wasm_simd256_revec=true


### X11 Only

# Disable wayland ozone platform
#GN_FLAGS += ozone_platform_wayland=false


# Certain libraries are problematic due to incompatibilities between
# the distro/upstream implementation and chromium's own implementation.
#
# Certain libraries cannot be unbundled due to their dependency on the
# libstdc++ system library. We need to build with use_custom_libcxx=true
# in order to enable CFI.
#
# Problematic          : ffmpeg, libaom, libavif, libvpx, libwebp
#
# libstdc++ issue      : crc32c, flatbuffers, highway, libyuv
#                        jsoncpp, re2, snappy,woff2
#
# Too old for stable   : brotli, dav1d, icu
#                        libavif/libwebp (libsharpyuv dependency)
#
# Dependent on TOO OLD : fontconfig, freetype, harfbuzz-ng
#                        libxml, libxslt
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Interdependent IMPOSSIBLE :-
#
#     libavif depends on libaom, libyuv
#     libaom depends on libyuv
#
# Interdependent POSSIBLE :-
#
#     libxslt depends on libxml; libxml depends on icu
#     harfbuzz-ng depends on freetype and icu
#     fontconfig depend on freetype
#     freetype depends on brotli and libpng
#

SYS_LIBS :=			\
	double-conversion	\
	flac			\
	libdrm			\
	libevent		\
	libsecret		\
	libusb			\
	libXNVCtrl		\
	opus			\
	zlib


# The below is best configured via debian/configure.sh, which is better
# suited to automatically deal with any of the dependency issues

# Enable dav1d (debian testing/unstable)
SYS_LIBS += dav1d

# Enable libjpeg (debs won't be installable on both debian and ubuntu)
SYS_LIBS += libjpeg

# Enable openh264
SYS_LIBS += openh264

# Enable zstd
#SYS_LIBS += zstd

# Stable users can insert backported libraries below
#SYS_LIBS +=


### Dependency chains around icu and brotli (unstable/experimental only)

# Enable to unbundle brotli
SYS_LIBS += fontconfig freetype brotli libpng

# Enable to unbundle icu
#SYS_LIBS += harfbuzz-ng libxslt libxml icu
#GN_FLAGS += use_system_harfbuzz=true

# Disable if unbundling icu
GN_FLAGS += icu_copy_icudata_to_root_build_dir=false

# Enable if NOT unbundling either icu OR brotli
#SYS_LIBS += libpng


### UNSUPPORTED - unbundling ffmeg is buggy/problematic

# If your system ffmpeg is self-built with patches from system_ffmpeg
#SYS_LIBS += ffmpeg


# Add extra flags for system libs
GN_FLAGS +=				\
        perfetto_use_system_zlib=true	\
        use_system_lcms2=true		\
        use_system_libopenjpeg2=true	\
        use_system_libpng=true		\
        use_system_zlib=true

%:
	dh $@

hardclean:
	find . \( -path .\*/.git -o -path ./.pc -o -path ./debian -o -path ./out \) -prune -o \( -name '_gclient_*' -o -name '__pycache__' -o -name '*.orig' -o -name '*.rej' \) -exec rm -rf '{}' +
	test -d $(OUT_DIR) && ninja -j $(JOBS) -C $(OUT_DIR) -g -t clean || printf '%s\n' "$(OUT_DIR) does not exist, nothing to do."

prune:
	$(UL_DIR)/prune_binaries.py $(RT_DIR) $(UC_DIR)/pruning.list 2>/dev/null

override_dh_auto_configure:
	test ! -f $(DEBIAN)/en-US.pak || mv $(DEBIAN)/en-US.pak $(OUT_DIR)/locales/
	test -f $(DS_CACHE) || for f in $(UB_LIST); do test ! -f $$f || mv $$f $${f%.bundled}; done
	test -f $(DS_CACHE) || test -z "$(SYS_LIBS)" || $(UB_REP_SCRIPT) --system-libraries $(SYS_LIBS)
	test -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py apply -r $(UC_DIR)/domain_regex.list -f $(UC_DIR)/domain_substitution.list -c $(DS_CACHE) $(RT_DIR)
	gn gen $(OUT_DIR) --args="$(GN_FLAGS)" --fail-on-unused-args
	#test -h $(OUT_DIR)/icudtl.dat || ln -sf ../../third_party/icu/common/icudtl.dat -t $(OUT_DIR)

override_dh_auto_build:
	ninja -j $(JOBS) -C $(OUT_DIR) chrome chrome_sandbox chromedriver

override_dh_prep:
	# TODO: remove the $(OUT_DIR)/resources/en-US.pak test/delete line after a couple of releases
	test ! -f $(OUT_DIR)/resources/en-US.pak || rm -f $(OUT_DIR)/resources/en-US.pak
	test ! -f $(DS_CACHE) || $(UL_DIR)/domain_substitution.py revert -c $(DS_CACHE) $(RT_DIR)
	for f in $(UB_LIST); do test ! -f $$f || mv $$f $${f%.bundled}; done
	ninja -j $(JOBS) -C $(OUT_DIR) -t cleandead
	dh_prep

override_dh_auto_install-arch:
	chmod 4755 $(OUT_DIR)/chrome_sandbox

override_dh_auto_install-indep:
	mv $(OUT_DIR)/locales/en-US.pak $(DEBIAN)/

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_dwz:
	@echo "Skipping dwz, compiled with -fdebug-types-section instead."

override_dh_builddeb:
	dh_builddeb -- -z 9

override_dh_update_autotools_config:
